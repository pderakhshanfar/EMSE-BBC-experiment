/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:37:13 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("QEwq_yib", "QEwq_yib");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("QEwq_yib", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QEwq_yib", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.siblingElements();
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("QEwq_yib", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QEwq_yib", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      document0.setSiblingIndex((-819));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("QEwq_yib", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-819), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QEwq_yib", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.tagName("QEwq_yib");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("qewq_yib", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("QEwq_yib", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-819), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QEwq_yib", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("QEwq_yib", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("qewq_yib", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("QEwq_yib", document1.location());
      assertEquals((-819), document1.siblingIndex());
      
      Document document2 = (Document)document0.val("QEwq_yib");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("qewq_yib", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("QEwq_yib", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-819), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QEwq_yib", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("QEwq_yib", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals((-819), document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("QEwq_yib", document2.baseUri());
      assertEquals("qewq_yib", document2.tagName());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "3'b";
      Document document0 = Document.createShell("3'b");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("3'b", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3'b", document0.location());
      
      Document document1 = (Document)document0.empty();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("3'b", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3'b", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3'b", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("3'b", document1.location());
      
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("3'b", "3'b");
      assertNotNull(evaluator_AttributeWithValue0);
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document1.addChildren(nodeArray0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, nodeArray0.length);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("3'b", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("3'b", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("3'b", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("3'b", document1.location());
      
      // Undeclared exception!
      document1.is((Evaluator) evaluator_AttributeWithValue0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".G!`mx9", ".G!`mx9");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(".G!`mx9", document0.location());
      assertEquals(".G!`mx9", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      
      document0.reparentChild(document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(".G!`mx9", document0.location());
      assertEquals(".G!`mx9", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(".G!`mx9", document0.location());
      assertEquals(".G!`mx9", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      int int0 = (-2);
      Node[] nodeArray0 = new Node[3];
      DocumentType documentType0 = new DocumentType(".G!`mx9", ".G!`mx9", (String) null, (String) null, ".G!`mx9");
      assertNotNull(documentType0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      
      nodeArray0[0] = (Node) documentType0;
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(".G!`mx9", document0.location());
      assertEquals(".G!`mx9", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(".G!`mx9", document1.location());
      assertEquals(".G!`mx9", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      
      nodeArray0[1] = (Node) document1;
      Element element0 = document1.createElement("SYSTEM");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(".G!`mx9", document0.location());
      assertEquals(".G!`mx9", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(".G!`mx9", document1.location());
      assertEquals(".G!`mx9", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("SYSTEM", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(".G!`mx9", element0.baseUri());
      assertEquals("SYSTEM", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      nodeArray0[2] = (Node) element0;
      Document document2 = (Document)document0.insertChildren((-2), nodeArray0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(3, nodeArray0.length);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(".G!`mx9", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals(".G!`mx9", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(".G!`mx9", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals(".G!`mx9", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      Appendable appendable0 = null;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sy;0e3jVS%(y:E.rw", "sy;0e3jVS%(y:E.rw");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("sy;0e3jVS%(y:E.rw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("sy;0e3jVS%(y:E.rw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.toggleClass("sy;0e3jVS%(y:E.rw");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("sy;0e3jVS%(y:E.rw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("sy;0e3jVS%(y:E.rw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("sy;0e3jVS%(y:E.rw", document1.baseUri());
      assertEquals("sy;0e3jVS%(y:E.rw", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document0.toggleClass("");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("sy;0e3jVS%(y:E.rw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("sy;0e3jVS%(y:E.rw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("sy;0e3jVS%(y:E.rw", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("sy;0e3jVS%(y:E.rw", document2.location());
      
      boolean boolean0 = document1.hasClass("");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("sy;0e3jVS%(y:E.rw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("sy;0e3jVS%(y:E.rw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("sy;0e3jVS%(y:E.rw", document1.baseUri());
      assertEquals("sy;0e3jVS%(y:E.rw", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("owg.jsoup_pa&seV.ParseError", "owg.jsoup_pa&seV.ParseError");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      CDataNode cDataNode0 = new CDataNode("owg.jsoup_pa&seV.ParseError");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      TextNode textNode0 = cDataNode0.text("owg.jsoup_pa&seV.ParseError");
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertNotNull(textNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#cdata", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      
      document0.setParentNode(textNode0);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#cdata", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-1984));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("br");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Document document1 = (Document)document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, linkedList0.size());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("br", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("br", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Parser parser2 = parser1.setTrackErrors(1359);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertNotNull(parser2);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("br");
      assertNotNull(stringReader0);
      
      Document document0 = parser2.parseInput((Reader) stringReader0, "org.jsoup.nodes.Element$1");
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertNotNull(document0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.appendElement("org.jsoup.nodes.Element$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = ";wL/~e";
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      DocumentType documentType0 = new DocumentType("Pu1_", (String) null, " > ", "html");
      assertNotNull(documentType0);
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      
      document0.setParentNode(documentType0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Document document1 = Parser.parse(";wL/~e", ";wL/~e");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(";wL/~e", document1.location());
      assertEquals(";wL/~e", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      
      boolean boolean1 = element0.hasText();
      assertTrue(boolean1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_NUy(< ft%<vP8n[M", "_NUy(< ft%<vP8n[M");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document1 = (Document)document0.prepend("-0)XZ)H!Rg7ARj");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      assertEquals("_NUy(< ft%<vP8n[M", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      
      Elements elements0 = document0.previousElementSiblings();
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Map<String, String> map0 = document0.dataset();
      assertSame(document0, document1);
      assertNotNull(map0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Element element0 = document1.prependElement("title");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      assertEquals("_NUy(< ft%<vP8n[M", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("title", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("_NUy(< ft%<vP8n[M", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("title", element0.tagName());
      assertTrue(element0.isBlock());
      
      Elements elements1 = element0.getAllElements();
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      assertEquals("_NUy(< ft%<vP8n[M", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("title", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("_NUy(< ft%<vP8n[M", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("title", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("SDz>fi_?n6Vnp", "SDz>fi_?n6Vnp");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("SDz>fi_?n6Vnp", document0.location());
      assertEquals("SDz>fi_?n6Vnp", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.prependElement("SDz>fi_?n6Vnp");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("SDz>fi_?n6Vnp", document0.location());
      assertEquals("SDz>fi_?n6Vnp", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("sdz>fi_?n6vnp", element0.nodeName());
      assertEquals("sdz>fi_?n6vnp", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("SDz>fi_?n6Vnp", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      document0.reparentChild(document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("SDz>fi_?n6Vnp", document0.location());
      assertEquals("SDz>fi_?n6Vnp", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("SDz>fi_?n6Vnp", document0.location());
      assertEquals("SDz>fi_?n6Vnp", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element1 = element0.firstElementSibling();
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("SDz>fi_?n6Vnp", document0.location());
      assertEquals("SDz>fi_?n6Vnp", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("sdz>fi_?n6vnp", element0.nodeName());
      assertEquals("sdz>fi_?n6vnp", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("SDz>fi_?n6Vnp", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("sdz>fi_?n6vnp", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("sdz>fi_?n6vnp", element1.tagName());
      assertEquals("SDz>fi_?n6Vnp", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("owg.jsoup_pa&seV.ParseError", "owg.jsoup_pa&seV.ParseError");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      DocumentType documentType0 = new DocumentType((String) null, "^'S4(%", (String) null, "@}");
      assertNotNull(documentType0);
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      
      Document document1 = (Document)document0.prependChild(documentType0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("owg.jsoup_pa&seV.ParseError", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("owg.jsoup_pa&seV.ParseError", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "xhtml";
      Document document0 = Parser.parseBodyFragmentRelaxed("xhtml", ":has(el) subselect must not be empty");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":has(el) subselect must not be empty", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(":has(el) subselect must not be empty", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      int int0 = (-1888);
      document0.setSiblingIndex((-1888));
      assertFalse(document0.isBlock());
      assertEquals((-1888), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":has(el) subselect must not be empty", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(":has(el) subselect must not be empty", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.empty();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals((-1888), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(":has(el) subselect must not be empty", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(":has(el) subselect must not be empty", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":has(el) subselect must not be empty", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(":has(el) subselect must not be empty", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals((-1888), document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      Document document2 = (Document)document1.prependText("xhtml");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals((-1888), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":has(el) subselect must not be empty", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(":has(el) subselect must not be empty", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":has(el) subselect must not be empty", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(":has(el) subselect must not be empty", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals((-1888), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals((-1888), document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(":has(el) subselect must not be empty", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(":has(el) subselect must not be empty", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("[i)=2h\"Wh%KMvz@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: [i)=2h\"Wh%KMvz@
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(string1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Ta29o", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotNull(document4);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("Ta29o", document4.location());
      assertFalse(document4.isBlock());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      Document document5 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document5, document4);
      assertNotSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertNotNull(document5);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("Ta29o", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      
      List<TextNode> list1 = document2.textNodes();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      Elements elements3 = document2.getElementsByAttributeValueMatching("body", "CONTINUE");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotNull(elements3);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      
      String string2 = document1.tagName();
      assertEquals("#root", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotNull(string2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      
      Elements elements4 = document0.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements2));
      assertFalse(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements3));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements0);
      assertNotNull(elements4);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      
      List<Node> list2 = document1.ensureChildNodes();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotNull(list2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      
      Elements elements5 = document1.nextElementSiblings();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements5.equals((Object)elements1));
      assertFalse(elements5.equals((Object)elements0));
      assertTrue(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements3));
      assertTrue(elements5.equals((Object)elements4));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements3);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements1);
      assertNotNull(elements5);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertTrue(elements5.isEmpty());
      assertEquals(0, elements5.size());
      
      Document document6 = (Document)document5.removeClass("D$GjGhgqGJ;U:\"UwJ");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document6, document5);
      assertNotSame(document6, document0);
      assertSame(document6, document1);
      assertSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertSame(document2, document6);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document5, document4);
      assertSame(document5, document6);
      assertNotSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertNotNull(document6);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals(1, document6.siblingIndex());
      assertEquals("Ta29o", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertEquals("Ta29o", document6.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("Ta29o", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      
      String string3 = document0.baseUri();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document0, document1);
      assertNull(string3);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Elements elements6 = document6.getElementsByAttribute("o");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(elements6.equals((Object)elements0));
      assertTrue(elements6.equals((Object)elements2));
      assertTrue(elements6.equals((Object)elements3));
      assertTrue(elements6.equals((Object)elements5));
      assertTrue(elements6.equals((Object)elements4));
      assertTrue(elements6.equals((Object)elements1));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document6, document5);
      assertNotSame(document6, document0);
      assertSame(document6, document1);
      assertSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertSame(document2, document6);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(elements6, elements0);
      assertNotSame(elements6, elements4);
      assertNotSame(elements6, elements1);
      assertNotSame(elements6, elements3);
      assertNotSame(elements6, elements5);
      assertNotSame(elements6, elements2);
      assertSame(document5, document4);
      assertSame(document5, document6);
      assertNotSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertNotNull(elements6);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals(1, document6.siblingIndex());
      assertEquals("Ta29o", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertEquals("Ta29o", document6.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals(0, elements6.size());
      assertTrue(elements6.isEmpty());
      assertEquals("Ta29o", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("tr");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("tr", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("tr", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("tr", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("tr", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("\"", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "textarea");
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("s; hLx@ps);>64j");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("s; hLx@ps);>64j", document0.location());
      assertEquals("s; hLx@ps);>64j", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      boolean boolean1 = document0.is((Evaluator) evaluator_AllElements0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("s; hLx@ps);>64j", document0.location());
      assertEquals("s; hLx@ps);>64j", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("*", evaluator_AllElements0.toString());
      
      Document document1 = (Document)document0.toggleClass("')uOd+9w:i~%@'yy");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("s; hLx@ps);>64j", document0.location());
      assertEquals("s; hLx@ps);>64j", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("s; hLx@ps);>64j", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("s; hLx@ps);>64j", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      
      Document document2 = (Document)document1.toggleClass("')uOd+9w:i~%@'yy");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("s; hLx@ps);>64j", document0.location());
      assertEquals("s; hLx@ps);>64j", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("s; hLx@ps);>64j", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("s; hLx@ps);>64j", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("s; hLx@ps);>64j", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("s; hLx@ps);>64j", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      
      boolean boolean2 = document0.hasClass("java.lang.string@0000000048");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("s; hLx@ps);>64j", document0.location());
      assertEquals("s; hLx@ps);>64j", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[mWP</~LAgVOar1:C", "[mWP</~LAgVOar1:C");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("[mWP</~LAgVOar1:C", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("[mWP</~LAgVOar1:C", document0.baseUri());
      
      String string0 = document0.data();
      assertEquals("~LAgVOar1:C", string0);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("[mWP</~LAgVOar1:C", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("[mWP</~LAgVOar1:C", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("owg.jsoup_pa&seV.ParseError", "owg.jsoup_pa&seV.ParseError");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("owg.jsoup_pa&seV.ParseError", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      
      Document document2 = (Document)document0.appendTo(document1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("owg.jsoup_pa&seV.ParseError", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("owg.jsoup_pa&seV.ParseError", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      document1.is("#root");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "J4fv6N<DbYYH";
      Document document0 = Parser.parseBodyFragment("J4fv6N<DbYYH", "J4fv6N<DbYYH");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J4fv6N<DbYYH", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("J4fv6N<DbYYH", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.tagName("J4fv6N<DbYYH");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("j4fv6n<dbyyh", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J4fv6N<DbYYH", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("J4fv6N<DbYYH", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("j4fv6n<dbyyh", document1.tagName());
      assertEquals("J4fv6N<DbYYH", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("J4fv6N<DbYYH", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      document1.setSiblingIndex((-3637));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("j4fv6n<dbyyh", document0.tagName());
      assertEquals((-3637), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J4fv6N<DbYYH", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("J4fv6N<DbYYH", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals((-3637), document1.siblingIndex());
      assertEquals("j4fv6n<dbyyh", document1.tagName());
      assertEquals("J4fv6N<DbYYH", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("J4fv6N<DbYYH", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      String string1 = document0.html();
      assertEquals("<html>\n <head></head>\n <body>\n  J4fv6N\n </body>\n</html>", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals("j4fv6n<dbyyh", document0.tagName());
      assertEquals((-3637), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J4fv6N<DbYYH", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("J4fv6N<DbYYH", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan(43);
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("j4fv6n<dbyyh", document0.tagName());
      assertEquals((-3637), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J4fv6N<DbYYH", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("J4fv6N<DbYYH", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = document0.siblingElements();
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("j4fv6n<dbyyh", document0.tagName());
      assertEquals((-3637), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J4fv6N<DbYYH", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("J4fv6N<DbYYH", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Document document2 = (Document)document0.doClone(document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("j4fv6n<dbyyh", document0.tagName());
      assertEquals((-3637), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J4fv6N<DbYYH", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("J4fv6N<DbYYH", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals((-3637), document1.siblingIndex());
      assertEquals("j4fv6n<dbyyh", document1.tagName());
      assertEquals("J4fv6N<DbYYH", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("J4fv6N<DbYYH", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("J4fv6N<DbYYH", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals((-3637), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("J4fv6N<DbYYH", document2.baseUri());
      assertEquals("j4fv6n<dbyyh", document2.tagName());
      
      String string2 = "x3%WS$W\\X5X~($&it";
      Elements elements2 = document2.getElementsByClass("x3%WS$WX5X~($&it");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertEquals("j4fv6n<dbyyh", document0.tagName());
      assertEquals((-3637), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J4fv6N<DbYYH", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("J4fv6N<DbYYH", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals((-3637), document1.siblingIndex());
      assertEquals("j4fv6n<dbyyh", document1.tagName());
      assertEquals("J4fv6N<DbYYH", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("J4fv6N<DbYYH", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("J4fv6N<DbYYH", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals((-3637), document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("J4fv6N<DbYYH", document2.baseUri());
      assertEquals("j4fv6n<dbyyh", document2.tagName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      // Undeclared exception!
      try { 
        document2.selectFirst("ee`fq5>b");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'ee`fq5>b': unexpected token at '`fq5>b'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Element element0 = new Element("'fAvYRXQtcTD{W");
      assertNotNull(element0);
      assertEquals("'fAvYRXQtcTD{W", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("'fAvYRXQtcTD{W", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      DocumentType documentType0 = new DocumentType("QOR-Sf=Md?ZHja>~,;'", "QOR-Sf=Md?ZHja>~,;'", "QOR-Sf=Md?ZHja>~,;'", "QOR-Sf=Md?ZHja>~,;'");
      assertNotNull(documentType0);
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      
      Element element1 = element0.doClone(documentType0);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertEquals("'fAvYRXQtcTD{W", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("'fAvYRXQtcTD{W", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("'fAvYRXQtcTD{W", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("'fAvYRXQtcTD{W", element1.nodeName());
      
      // Undeclared exception!
      try { 
        element1.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("owg.jsoup_pa&seV.ParseError", "owg.jsoup_pa&seV.ParseError");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertFalse(document0.hasParent());
      
      List<Node> list0 = Parser.parseXmlFragment("owg.jsoup_pa&seV.ParseError", "owg.jsoup_pa&seV.ParseError");
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      document0.childNodes = list0;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, document0.childNodes.size());
      assertFalse(document0.childNodes.isEmpty());
      
      Document document1 = (Document)document0.toggleClass("owg.jsoup_pa&seV.ParseError");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("owg.jsoup_pa&seV.ParseError", document1.baseUri());
      assertEquals("owg.jsoup_pa&seV.ParseError", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      boolean boolean0 = document1.hasClass("owg.jsoup_pa&seV.ParseError");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("owg.jsoup_pa&seV.ParseError", document1.baseUri());
      assertEquals("owg.jsoup_pa&seV.ParseError", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.empty();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("SD|z>fi_?nr6V p", "publicId");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("publicId", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("publicId", document0.baseUri());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "publicId");
      assertNotNull(charBuffer0);
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.capacity());
      assertEquals("publicId", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("SD|z>fi_?nr6V p", "SD|z>fi_?nr6V p");
      assertNotNull(document0);
      assertEquals("SD|z>fi_?nr6V p", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("SD|z>fi_?nr6V p", document0.baseUri());
      
      DataNode dataNode0 = new DataNode("SD|z>fi_?nr6V p", "SD|z>fi_?nr6V p");
      assertNotNull(dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      DataNode dataNode1 = dataNode0.setWholeData("SD|z>fi_?nr6V p");
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertNotNull(dataNode1);
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode1.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      
      Document document1 = (Document)document0.prependChild(dataNode1);
      assertSame(document0, document1);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("SD|z>fi_?nr6V p", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("SD|z>fi_?nr6V p", document0.baseUri());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertTrue(dataNode1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("SD|z>fi_?nr6V p", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("SD|z>fi_?nr6V p", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      String string0 = document0.data();
      assertEquals("SD|z>fi_?nr6V p", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("SD|z>fi_?nr6V p", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("SD|z>fi_?nr6V p", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("%RNI_iQp],&Y", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("%rni_iqp],&y", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("%rni_iqp],&y", tag0.toString());
      
      String string0 = parseSettings0.normalizeTag("%RNI_iQp],&Y");
      assertEquals("%rni_iqp],&y", string0);
      assertNotNull(string0);
      
      CDataNode cDataNode0 = new CDataNode("DoctypeSystemIdentifier_doubleQuoted");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FormElement formElement0 = new FormElement(tag0, "DoctypeSystemIdentifier_doubleQuoted", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("%rni_iqp],&y", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("%rni_iqp],&y", tag0.toString());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", formElement0.baseUri());
      assertEquals("%rni_iqp],&y", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("%rni_iqp],&y", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      
      Set<String> set0 = formElement0.classNames();
      assertNotNull(set0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("%rni_iqp],&y", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("%rni_iqp],&y", tag0.toString());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", formElement0.baseUri());
      assertEquals("%rni_iqp],&y", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("%rni_iqp],&y", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("DoctypeSystemIdentifier_doubleQuoted"));
      
      Element element0 = formElement0.classNames(set0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertNotNull(element0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("%rni_iqp],&y", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("%rni_iqp],&y", tag0.toString());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", formElement0.baseUri());
      assertEquals("%rni_iqp],&y", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("%rni_iqp],&y", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("%rni_iqp],&y", element0.tagName());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", element0.baseUri());
      assertEquals("%rni_iqp],&y", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(set0.contains("DoctypeSystemIdentifier_doubleQuoted"));
      
      Element element1 = formElement0.appendChild(cDataNode0);
      assertSame(formElement0, element0);
      assertSame(formElement0, element1);
      assertSame(element1, formElement0);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("%rni_iqp],&y", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("%rni_iqp],&y", tag0.toString());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", formElement0.baseUri());
      assertEquals("%rni_iqp],&y", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("%rni_iqp],&y", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("%rni_iqp],&y", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("%rni_iqp],&y", element1.tagName());
      
      String string1 = formElement0.ownText();
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(formElement0, element0);
      assertSame(formElement0, element1);
      assertNotNull(string1);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("%rni_iqp],&y", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("%rni_iqp],&y", tag0.toString());
      assertTrue(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("DoctypeSystemIdentifier_doubleQuoted", formElement0.baseUri());
      assertEquals("%rni_iqp],&y", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("%rni_iqp],&y", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TJ07D3\"]b_9T#L", "TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TJ07D3\"]b_9T#L");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsMatchingOwnText("TJ07D3\"]b_9T#L");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      String string1 = null;
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      String string2 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>", string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string2);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotNull(document4);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document4.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      Elements elements3 = document1.previousElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotNull(elements3);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(elements3.isEmpty());
      assertEquals(1, elements3.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string2));
      
      boolean boolean1 = linkedHashSet0.add((String) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string2));
      
      // Undeclared exception!
      try { 
        document2.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Element element0 = new Element("br");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.appendElement("br");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("br", element1.nodeName());
      
      String string0 = element0.outerHtml();
      assertEquals("<br><br></br>", string0);
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element1);
      assertNotNull(string0);
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      
      Element element2 = element0.tagName("org.jsoup.internal.StringUtil");
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      assertEquals("org.jsoup.internal.stringutil", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.internal.stringutil", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals("org.jsoup.internal.stringutil", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("org.jsoup.internal.stringutil", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      
      Element element3 = element2.empty();
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertNotSame(element2, element1);
      assertSame(element3, element2);
      assertNotSame(element3, element1);
      assertSame(element3, element0);
      assertNotNull(element3);
      assertEquals("org.jsoup.internal.stringutil", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.internal.stringutil", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals("org.jsoup.internal.stringutil", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("org.jsoup.internal.stringutil", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals("org.jsoup.internal.stringutil", element3.tagName());
      assertEquals("org.jsoup.internal.stringutil", element3.nodeName());
      assertEquals("", element3.baseUri());
      assertFalse(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertFalse(element3.isBlock());
      
      // Undeclared exception!
      try { 
        element0.prependChild(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s; hvx@ps);t6oj", "q]47-BiJw%W&");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("q]47-BiJw%W&", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("q]47-BiJw%W&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("Children collection to be inserted must not be null.");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("q]47-BiJw%W&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("q]47-BiJw%W&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("children collection to be inserted must not be null.", element0.nodeName());
      assertEquals("children collection to be inserted must not be null.", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("q]47-BiJw%W&", element0.baseUri());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Children collection to be inserted must not be null.");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("q]47-BiJw%W&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("q]47-BiJw%W&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element element0 = new Element("!1h");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("!1h", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("!1h", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.appendElement("!1h");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertEquals("!1h", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("!1h", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("!1h", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("!1h", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      
      Element element2 = element1.appendElement("3Q'cOF#QN");
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      assertEquals("!1h", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("!1h", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("!1h", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("!1h", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("3q'cof#qn", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertEquals("3q'cof#qn", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element3 = element2.before("");
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element3, element2);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotNull(element3);
      assertEquals("!1h", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("!1h", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("!1h", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("!1h", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("3q'cof#qn", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertEquals("3q'cof#qn", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("3q'cof#qn", element3.nodeName());
      assertEquals("", element3.baseUri());
      assertEquals("3q'cof#qn", element3.tagName());
      assertFalse(element3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertEquals(0, element3.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("owg.jsoup_pa&seV.ParseError", "owg.jsoup_pa&seV.ParseError");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      
      Element element0 = document0.appendElement("owg.jsoup_pa&seV.ParseError");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("owg.jsoup_pa&sev.parseerror", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("owg.jsoup_pa&sev.parseerror", element0.nodeName());
      assertEquals("owg.jsoup_pa&seV.ParseError", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      Elements elements0 = document0.getElementsMatchingOwnText("owg.jsoup_pa&seV.ParseError");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      OutputStreamWriter outputStreamWriter0 = element0.html((OutputStreamWriter) null);
      assertNull(outputStreamWriter0);
      assertFalse(document0.hasParent());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("owg.jsoup_pa&seV.ParseError", document0.location());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("owg.jsoup_pa&sev.parseerror", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("owg.jsoup_pa&sev.parseerror", element0.nodeName());
      assertEquals("owg.jsoup_pa&seV.ParseError", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000060 java.lang.string@0000000045");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000060 java.lang.string@0000000045");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      
      Document document2 = (Document)document0.toggleClass(" />");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      
      document0.setSiblingIndex(28);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(28, document0.siblingIndex());
      
      boolean boolean0 = document0.hasClass("head");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(28, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "hYt?D";
      Document document0 = Parser.parseBodyFragmentRelaxed("'", "hYt?D");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hYt?D", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("hYt?D", document0.location());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hYt?D", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("hYt?D", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("hYt?D", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("hYt?D", document1.baseUri());
      
      Element element0 = document1.createElement("*");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hYt?D", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("hYt?D", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("hYt?D", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("hYt?D", document1.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("*", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("*", element0.tagName());
      assertEquals("hYt?D", element0.baseUri());
      assertFalse(element0.hasParent());
      
      Document document2 = (Document)document0.appendTo(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hYt?D", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("hYt?D", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("hYt?D", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("hYt?D", document1.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("*", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("*", element0.tagName());
      assertEquals("hYt?D", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("hYt?D", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("hYt?D", document2.location());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("hYt?D", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("tn", "tn");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tn", document0.baseUri());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tn", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      
      Document document2 = document1.normalise();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("tn", document2.baseUri());
      assertEquals("tn", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      
      Document document3 = document1.ownerDocument();
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.isBlock());
      assertEquals("tn", document3.location());
      assertEquals("tn", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Document document4 = Parser.parseBodyFragment("tn", "tn");
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotNull(document4);
      assertEquals("tn", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("tn", document4.location());
      assertFalse(document4.hasParent());
      
      Attributes attributes0 = document2.attributes();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotNull(attributes0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("tn", document2.baseUri());
      assertEquals("tn", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, attributes0.size());
      
      Tag tag0 = Tag.valueOf("textarea");
      assertNotNull(tag0);
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      
      FormElement formElement0 = new FormElement(tag0, "hDJ6bk]6-$!@+tD!w", attributes0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertNotNull(formElement0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("tn", document2.baseUri());
      assertEquals("tn", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, attributes0.size());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("hDJ6bk]6-$!@+tD!w", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("textarea", formElement0.tagName());
      assertEquals("textarea", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      
      String string0 = attributes0.toString();
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("tn", document2.baseUri());
      assertEquals("tn", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, attributes0.size());
      
      FormElement formElement1 = formElement0.addElement(document2);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("tn", document2.baseUri());
      assertEquals("tn", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, attributes0.size());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("hDJ6bk]6-$!@+tD!w", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("textarea", formElement0.tagName());
      assertEquals("textarea", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("hDJ6bk]6-$!@+tD!w", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("textarea", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("textarea", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      
      Document document5 = (Document)document4.text("hDJ6bk]6-$!@+tD!w");
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertSame(document4, document5);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotNull(document5);
      assertEquals("tn", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("tn", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("tn", document5.baseUri());
      assertEquals("tn", document5.location());
      assertFalse(document5.hasParent());
      
      boolean boolean0 = Element.preserveWhitespace(formElement1);
      assertTrue(boolean0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document4));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("tn", document2.baseUri());
      assertEquals("tn", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, attributes0.size());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("hDJ6bk]6-$!@+tD!w", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("textarea", formElement0.tagName());
      assertEquals("textarea", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("hDJ6bk]6-$!@+tD!w", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("textarea", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("textarea", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup_parseV.ParseError", "org.jsoup_parseV.ParseError");
      assertNotNull(document0);
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      
      Document document1 = (Document)document0.toggleClass("org.jsoup_parseV.ParseError");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertEquals("org.jsoup_parseV.ParseError", document1.location());
      assertEquals("org.jsoup_parseV.ParseError", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document2 = (Document)document1.appendChild(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertEquals("org.jsoup_parseV.ParseError", document1.location());
      assertEquals("org.jsoup_parseV.ParseError", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup_parseV.ParseError", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("org.jsoup_parseV.ParseError", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      
      Document document3 = (Document)document1.parent();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotNull(document3);
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertEquals("org.jsoup_parseV.ParseError", document1.location());
      assertEquals("org.jsoup_parseV.ParseError", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("org.jsoup_parseV.ParseError", document3.baseUri());
      assertEquals("org.jsoup_parseV.ParseError", document3.location());
      assertFalse(document3.isBlock());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("br");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.baseUri());
      assertEquals("br", element0.nodeName());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element1 = document0.appendElement("br");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("br", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("br", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "\"\"//~");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("\"\"//~", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("\"\"//~", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement("\"\"//~");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("\"\"//~", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("\"\"//~", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"\"//~", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("\"\"//~", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"\"//~", element0.nodeName());
      assertTrue(element0.hasParent());
      
      String string0 = element0.text();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("\"\"//~", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("\"\"//~", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"\"//~", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("\"\"//~", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"\"//~", element0.nodeName());
      assertTrue(element0.hasParent());
      
      String string1 = document0.val();
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("\"\"//~", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("\"\"//~", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element1 = document0.child(1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("\"\"//~", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("\"\"//~", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("\"\"//~", element1.nodeName());
      assertEquals("\"\"//~", element1.baseUri());
      assertEquals("\"\"//~", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          String string0 = ";wL/~e";
          Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
          assertNotNull(document0);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          
          Elements elements0 = document0.children();
          assertNotNull(elements0);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          assertEquals(1, elements0.size());
          assertFalse(elements0.isEmpty());
          
          Element element0 = document0.body();
          assertNotNull(element0);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          assertTrue(element0.isBlock());
          assertEquals("body", element0.tagName());
          assertEquals(";wL/~e", element0.baseUri());
          assertEquals("body", element0.nodeName());
          assertEquals(1, element0.siblingIndex());
          assertEquals(1, element0.childNodeSize());
          assertTrue(element0.hasParent());
          
          Elements elements1 = document0.getElementsByAttributeValueEnding(";wL/~e", ";wL/~e");
          assertFalse(elements1.equals((Object)elements0));
          assertNotSame(elements1, elements0);
          assertNotNull(elements1);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          assertEquals(0, elements1.size());
          assertTrue(elements1.isEmpty());
          
          List<TextNode> list0 = document0.textNodes();
          assertNotNull(list0);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          assertTrue(list0.isEmpty());
          assertEquals(0, list0.size());
          
          Element element1 = element0.html("html");
          assertSame(element0, element1);
          assertSame(element1, element0);
          assertNotNull(element1);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          assertTrue(element0.isBlock());
          assertEquals("body", element0.tagName());
          assertEquals(";wL/~e", element0.baseUri());
          assertEquals("body", element0.nodeName());
          assertEquals(1, element0.siblingIndex());
          assertEquals(1, element0.childNodeSize());
          assertTrue(element0.hasParent());
          assertEquals(1, element1.siblingIndex());
          assertTrue(element1.hasParent());
          assertEquals("body", element1.tagName());
          assertEquals(1, element1.childNodeSize());
          assertTrue(element1.isBlock());
          assertEquals("body", element1.nodeName());
          assertEquals(";wL/~e", element1.baseUri());
          
          Elements elements2 = element1.previousElementSiblings();
          assertFalse(elements2.equals((Object)elements0));
          assertFalse(elements2.equals((Object)elements1));
          assertSame(element0, element1);
          assertSame(element1, element0);
          assertNotSame(elements2, elements0);
          assertNotSame(elements2, elements1);
          assertNotNull(elements2);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          assertTrue(element0.isBlock());
          assertEquals("body", element0.tagName());
          assertEquals(";wL/~e", element0.baseUri());
          assertEquals("body", element0.nodeName());
          assertEquals(1, element0.siblingIndex());
          assertEquals(1, element0.childNodeSize());
          assertTrue(element0.hasParent());
          assertEquals(1, element1.siblingIndex());
          assertTrue(element1.hasParent());
          assertEquals("body", element1.tagName());
          assertEquals(1, element1.childNodeSize());
          assertTrue(element1.isBlock());
          assertEquals("body", element1.nodeName());
          assertEquals(";wL/~e", element1.baseUri());
          assertFalse(elements2.isEmpty());
          assertEquals(1, elements2.size());
          
          LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
          assertNotNull(linkedHashSet0);
          assertEquals(0, linkedHashSet0.size());
          assertTrue(linkedHashSet0.isEmpty());
          assertFalse(linkedHashSet0.contains("html"));
          
          Element element2 = element1.append("#6NTT3}d8X8+c^yVt-");
          assertSame(element0, element2);
          assertSame(element0, element1);
          assertSame(element1, element0);
          assertSame(element1, element2);
          assertSame(element2, element1);
          assertSame(element2, element0);
          assertNotNull(element2);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          assertTrue(element0.isBlock());
          assertEquals("body", element0.tagName());
          assertEquals(";wL/~e", element0.baseUri());
          assertEquals("body", element0.nodeName());
          assertEquals(1, element0.siblingIndex());
          assertEquals(2, element0.childNodeSize());
          assertTrue(element0.hasParent());
          assertEquals(1, element1.siblingIndex());
          assertTrue(element1.hasParent());
          assertEquals(2, element1.childNodeSize());
          assertEquals("body", element1.tagName());
          assertTrue(element1.isBlock());
          assertEquals("body", element1.nodeName());
          assertEquals(";wL/~e", element1.baseUri());
          assertTrue(element2.isBlock());
          assertTrue(element2.hasParent());
          assertEquals(2, element2.childNodeSize());
          assertEquals("body", element2.nodeName());
          assertEquals(1, element2.siblingIndex());
          assertEquals("body", element2.tagName());
          assertEquals(";wL/~e", element2.baseUri());
          
          String string1 = document0.text();
          assertEquals("html#6NTT3}d8X8+c^yVt-", string1);
          assertFalse(string1.equals((Object)string0));
          assertNotNull(string1);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          
          boolean boolean0 = linkedHashSet0.add("Vb");
          assertTrue(boolean0);
          assertEquals(1, linkedHashSet0.size());
          assertFalse(linkedHashSet0.isEmpty());
          assertFalse(linkedHashSet0.contains("html"));
          assertTrue(linkedHashSet0.contains("Vb"));
          
          Element element3 = element0.classNames((Set<String>) linkedHashSet0);
          assertSame(element0, element2);
          assertSame(element0, element1);
          assertSame(element0, element3);
          assertSame(element3, element1);
          assertSame(element3, element0);
          assertSame(element3, element2);
          assertNotNull(element3);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          assertTrue(element0.isBlock());
          assertEquals("body", element0.tagName());
          assertEquals(";wL/~e", element0.baseUri());
          assertEquals("body", element0.nodeName());
          assertEquals(1, element0.siblingIndex());
          assertEquals(2, element0.childNodeSize());
          assertTrue(element0.hasParent());
          assertEquals(1, linkedHashSet0.size());
          assertFalse(linkedHashSet0.isEmpty());
          assertEquals("body", element3.tagName());
          assertEquals(2, element3.childNodeSize());
          assertEquals(1, element3.siblingIndex());
          assertEquals(";wL/~e", element3.baseUri());
          assertTrue(element3.hasParent());
          assertEquals("body", element3.nodeName());
          assertTrue(element3.isBlock());
          assertFalse(linkedHashSet0.contains("html"));
          assertTrue(linkedHashSet0.contains("Vb"));
          
          Element element4 = document0.selectFirst("html");
          assertFalse(element4.equals((Object)element0));
          assertFalse(element4.equals((Object)element2));
          assertFalse(element4.equals((Object)element1));
          assertFalse(element4.equals((Object)element3));
          assertNotSame(element4, element0);
          assertNotSame(element4, element2);
          assertNotSame(element4, element1);
          assertNotSame(element4, element3);
          assertNotNull(element4);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          assertEquals(";wL/~e", element4.baseUri());
          assertTrue(element4.hasParent());
          assertEquals(0, element4.siblingIndex());
          assertEquals(2, element4.childNodeSize());
          assertEquals("html", element4.tagName());
          assertEquals("html", element4.nodeName());
          assertTrue(element4.isBlock());
          
          Element element5 = element1.toggleClass(";wL/~e");
          assertFalse(element0.equals((Object)element4));
          assertFalse(element1.equals((Object)element4));
          assertFalse(element5.equals((Object)element4));
          assertNotSame(element0, element4);
          assertSame(element0, element5);
          assertSame(element0, element2);
          assertSame(element0, element1);
          assertSame(element0, element3);
          assertSame(element1, element0);
          assertSame(element1, element3);
          assertSame(element1, element2);
          assertSame(element1, element5);
          assertNotSame(element1, element4);
          assertNotSame(element5, element4);
          assertSame(element5, element1);
          assertSame(element5, element2);
          assertSame(element5, element0);
          assertSame(element5, element3);
          assertNotNull(element5);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          assertTrue(element0.isBlock());
          assertEquals("body", element0.tagName());
          assertEquals(";wL/~e", element0.baseUri());
          assertEquals("body", element0.nodeName());
          assertEquals(1, element0.siblingIndex());
          assertEquals(2, element0.childNodeSize());
          assertTrue(element0.hasParent());
          assertEquals(1, element1.siblingIndex());
          assertTrue(element1.hasParent());
          assertEquals(2, element1.childNodeSize());
          assertEquals("body", element1.tagName());
          assertTrue(element1.isBlock());
          assertEquals("body", element1.nodeName());
          assertEquals(";wL/~e", element1.baseUri());
          assertEquals("body", element5.tagName());
          assertTrue(element5.isBlock());
          assertEquals(2, element5.childNodeSize());
          assertEquals(1, element5.siblingIndex());
          assertEquals("body", element5.nodeName());
          assertTrue(element5.hasParent());
          assertEquals(";wL/~e", element5.baseUri());
          
          Element element6 = element3.previousElementSibling();
          assertFalse(element0.equals((Object)element4));
          assertFalse(element3.equals((Object)element4));
          assertFalse(element6.equals((Object)element1));
          assertFalse(element6.equals((Object)element4));
          assertFalse(element6.equals((Object)element0));
          assertFalse(element6.equals((Object)element5));
          assertFalse(element6.equals((Object)element2));
          assertFalse(element6.equals((Object)element3));
          assertNotSame(element0, element4);
          assertNotSame(element0, element6);
          assertSame(element0, element5);
          assertSame(element0, element2);
          assertSame(element0, element1);
          assertSame(element0, element3);
          assertNotSame(element3, element4);
          assertSame(element3, element1);
          assertSame(element3, element0);
          assertNotSame(element3, element6);
          assertSame(element3, element5);
          assertSame(element3, element2);
          assertNotSame(element6, element1);
          assertNotSame(element6, element4);
          assertNotSame(element6, element0);
          assertNotSame(element6, element5);
          assertNotSame(element6, element2);
          assertNotSame(element6, element3);
          assertNotNull(element6);
          assertFalse(document0.updateMetaCharsetElement());
          assertEquals(0, document0.siblingIndex());
          assertFalse(document0.isBlock());
          assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
          assertFalse(document0.hasParent());
          assertEquals(";wL/~e", document0.baseUri());
          assertEquals(";wL/~e", document0.location());
          assertEquals("#root", document0.tagName());
          assertEquals(1, document0.childNodeSize());
          assertEquals("#document", document0.nodeName());
          assertTrue(element0.isBlock());
          assertEquals("body", element0.tagName());
          assertEquals(";wL/~e", element0.baseUri());
          assertEquals("body", element0.nodeName());
          assertEquals(1, element0.siblingIndex());
          assertEquals(2, element0.childNodeSize());
          assertTrue(element0.hasParent());
          assertEquals(1, linkedHashSet0.size());
          assertFalse(linkedHashSet0.isEmpty());
          assertEquals("body", element3.tagName());
          assertEquals(2, element3.childNodeSize());
          assertEquals(1, element3.siblingIndex());
          assertEquals(";wL/~e", element3.baseUri());
          assertTrue(element3.hasParent());
          assertEquals("body", element3.nodeName());
          assertTrue(element3.isBlock());
          assertTrue(element6.isBlock());
          assertEquals(0, element6.childNodeSize());
          assertEquals("head", element6.tagName());
          assertEquals("head", element6.nodeName());
          assertEquals(0, element6.siblingIndex());
          assertTrue(element6.hasParent());
          assertEquals(";wL/~e", element6.baseUri());
          assertFalse(linkedHashSet0.contains("html"));
          assertTrue(linkedHashSet0.contains("Vb"));
          
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          assertNotNull(fileDescriptor0);
          assertFalse(fileDescriptor0.valid());
          
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:234)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:172)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:189)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:295)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:201)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:54)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("QEwyyyib");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("QEwyyyib", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyib", document0.location());
      
      Document document1 = (Document)document0.tagName("QEwyyyib");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyib", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("QEwyyyib", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyib", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("QEwyyyib", document1.location());
      assertEquals("qewyyyib", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("QEwyyyib", document1.baseUri());
      
      Document document2 = (Document)document0.val("org.jsoupgar.eV.ParseError");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyib", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("QEwyyyib", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyib", document0.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("QEwyyyib", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("QEwyyyib", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("qewyyyib", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      
      Document document3 = (Document)document2.appendChild(document1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyib", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("QEwyyyib", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("QEwyyyib", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("QEwyyyib", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("qewyyyib", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("QEwyyyib", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("QEwyyyib", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("QEwyyyib", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("qewyyyib", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("qewyyyib", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("QEwyyyib", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("QEwyyyib", document3.baseUri());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      
      document1.hasText();
      document1.prependChild(document2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup_parseV.ParseError", "org.jsoup_parseV.ParseError");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.toggleClass("org.jsoup_parseV.ParseError");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup_parseV.ParseError", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup_parseV.ParseError", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = (Document)document0.toggleClass("org.jsoup_parseV.ParseError");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup_parseV.ParseError", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup_parseV.ParseError", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      
      Elements elements0 = document1.getElementsByClass("java.lang.string@0000000047");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup_parseV.ParseError", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup_parseV.ParseError", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "readonly");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("readonly", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("readonly", document0.baseUri());
      
      String string0 = document0.data();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals("readonly", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("readonly", document0.baseUri());
      
      CDataNode cDataNode0 = new CDataNode("ZyD-7$o");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      Node node0 = cDataNode0.doClone(document0);
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertNotNull(node0);
      assertEquals("#document", document0.nodeName());
      assertEquals("readonly", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("readonly", document0.baseUri());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      
      Document document1 = (Document)document0.doClone(node0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("readonly", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("readonly", document0.baseUri());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("readonly", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("readonly", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      // Undeclared exception!
      try { 
        document1.prepend("ZyD-7$o");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("S}");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("S}", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("S}", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("S}");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("S}", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("S}", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("S}", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("S}", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      
      Document document2 = (Document)document1.toggleClass("java.lang.string@0000000016");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("S}", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("S}", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("S}", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("S}", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("S}", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("S}", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      
      Document document3 = (Document)document1.toggleClass("java.lang.string@0000000016");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("S}", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("S}", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("S}", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("S}", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("S}", document3.location());
      assertEquals("S}", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      
      boolean boolean0 = document1.hasClass("java.lang.string@0000000016");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("S}", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("S}", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("S}", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("S}", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)5;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)40, (byte)0, (byte) (-109), (byte)5, (byte)58, (byte)5}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup_parseV.ParseError", "org.jsoup_parseV.ParseError");
      assertNotNull(document0);
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      DocumentType documentType0 = new DocumentType("org.jsoup_parseV.ParseError", "org.jsoup_parseV.ParseError", "VCh}po(Ml>", "BrpD+C|7W/[?+}");
      assertNotNull(documentType0);
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      
      nodeArray0[4] = (Node) documentType0;
      Document document1 = Parser.parse("Bs87w`L?}![=bnl", "BrpD+C|7W/[?+}");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("BrpD+C|7W/[?+}", document1.location());
      assertEquals("BrpD+C|7W/[?+}", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      nodeArray0[5] = (Node) document1;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(8, nodeArray0.length);
      assertEquals(3, document0.siblingIndex());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      
      Element element0 = document0.body();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(element0);
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup_parseV.ParseError", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(3, document0.siblingIndex());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      
      Elements elements0 = document0.previousElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(2, elements0.size());
      assertFalse(elements0.isEmpty());
      assertEquals(3, document0.siblingIndex());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      
      Document document2 = (Document)document1.addClass("BrpD+C|7W/[?+}");
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("BrpD+C|7W/[?+}", document1.location());
      assertEquals("BrpD+C|7W/[?+}", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("BrpD+C|7W/[?+}", document2.baseUri());
      assertEquals("BrpD+C|7W/[?+}", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document("br");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      element0.setSiblingIndex((-1256));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-1256), element0.siblingIndex());
      assertEquals("br", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("java.lang.string@0000000038");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      assertNotNull(document0);
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.siblingIndex = (-2064888121);
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals((-2064888121), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.val(" > ");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals((-2064888121), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document1.location());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals((-2064888121), document1.siblingIndex());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      String string0 = "CO";
      Element element0 = document0.appendElement("CO");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("co", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("co", element0.tagName());
      
      String string1 = null;
      int int0 = 0;
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Element element0 = new Element("4");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("4", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("4", element0.tagName());
      
      List<Node> list0 = Parser.parseFragment("4", element0, "4");
      assertNotNull(list0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("4", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("4", element0.tagName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      element0.childNodes = list0;
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("4", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("4", element0.tagName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, element0.childNodes.size());
      assertFalse(element0.childNodes.isEmpty());
      
      String string0 = "E#";
      Elements elements0 = element0.getElementsByAttribute("E#");
      assertNotNull(elements0);
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("4", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("4", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = element0.getElementsByAttributeValueEnding("4", "4");
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("4", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("4", element0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Elements elements2 = element0.getElementsByAttributeValueEnding("ne", "4");
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("4", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("4", element0.tagName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      // Undeclared exception!
      try { 
        element0.prepend("#root");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup_parseV.ParseError", "org.jsoup_parseV.ParseError");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.toggleClass("org.jsoup_parseV.ParseError");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup_parseV.ParseError", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup_parseV.ParseError", document1.baseUri());
      assertFalse(document1.isBlock());
      
      Document document2 = (Document)document0.toggleClass("org.jsoup_parseV.ParseError");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup_parseV.ParseError", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup_parseV.ParseError", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      
      boolean boolean0 = document0.hasClass("org.jsoup_parseV.ParseError");
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      MockFile mockFile0 = new MockFile("org.jsoup_parseV.ParseError");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "org.jsoup_parseV.ParseError");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintStream0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) document0;
      objectArray0[1] = (Object) document1;
      objectArray0[2] = (Object) mockFile1;
      objectArray0[3] = (Object) mockFile1;
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.printf("org.jsoup_parseV.ParseError", objectArray0);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertEquals(4, objectArray0.length);
      assertEquals("org.jsoup_parseV.ParseError", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("org.jsoup_parseV.ParseError", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/experiment/org.jsoup_parseV.ParseError/org.jsoup_parseV.ParseError", mockFile1.toString());
      assertEquals("org.jsoup_parseV.ParseError", mockFile1.getName());
      assertEquals(27L, mockFile1.length());
      assertEquals("/experiment/org.jsoup_parseV.ParseError", mockFile1.getParent());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      
      MockPrintStream mockPrintStream2 = (MockPrintStream)document0.html((Appendable) mockPrintStream1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream0, mockPrintStream2);
      assertSame(mockPrintStream1, mockPrintStream2);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintStream2, mockPrintStream0);
      assertSame(mockPrintStream2, mockPrintStream1);
      assertNotNull(mockPrintStream2);
      assertEquals(4, objectArray0.length);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup_parseV.ParseError", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup_parseV.ParseError", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup_parseV.ParseError", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("org.jsoup_parseV.ParseError", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("/experiment/org.jsoup_parseV.ParseError/org.jsoup_parseV.ParseError", mockFile1.toString());
      assertEquals(104L, mockFile1.length());
      assertEquals("org.jsoup_parseV.ParseError", mockFile1.getName());
      assertEquals("/experiment/org.jsoup_parseV.ParseError", mockFile1.getParent());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.canWrite());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.isAbsolute());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      
      // Undeclared exception!
      document2.outerHtmlTail(mockPrintStream2, 1192721831, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.location());
      
      document0.siblingIndex = (-1340);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals((-1340), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.location());
      
      Element element0 = document0.appendElement("CO");
      assertNotNull(element0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals((-1340), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("co", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("co", element0.tagName());
      assertEquals(";wL/~e", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals((-1340), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document1 = (Document)document0.prepend(";wL/~e");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals((-1340), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.location());
      assertEquals((-1340), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(";wL/~e", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(";wL/~e", document1.location());
      assertEquals("#root", document1.tagName());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("}HL|br:vIp", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("}hl|br:vip", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("}hl|br:vip", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "8J =r~cX>@VBKqJ", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("}hl|br:vip", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("}hl|br:vip", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("}hl|br:vip", formElement0.nodeName());
      assertEquals("8J =r~cX>@VBKqJ", formElement0.baseUri());
      assertEquals("}hl|br:vip", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      
      CDataNode cDataNode0 = new CDataNode("`wv:RD2ueLO5g1b;y");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Node node0 = cDataNode0.parent();
      assertNull(node0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Element element0 = formElement0.doClone((Node) null);
      assertFalse(element0.equals((Object)formElement0));
      assertNotSame(formElement0, element0);
      assertNotSame(element0, formElement0);
      assertNotNull(element0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("}hl|br:vip", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("}hl|br:vip", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("}hl|br:vip", formElement0.nodeName());
      assertEquals("8J =r~cX>@VBKqJ", formElement0.baseUri());
      assertEquals("}hl|br:vip", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("8J =r~cX>@VBKqJ", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("}hl|br:vip", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("}hl|br:vip", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell("t=G<4r:fzSax");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      document0.childNodes = null;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.tagName("t=G<4r:fzSax");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("t=g<4r:fzsax", document0.tagName());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("t=G<4r:fzSax", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("t=G<4r:fzSax", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("t=g<4r:fzsax", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      
      String string0 = document0.val();
      assertEquals("", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("t=g<4r:fzsax", document0.tagName());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document1.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("t=G<4r:fzSax");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("t=G<4r:fzSax", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.appendElement("br");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("t=G<4r:fzSax", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("t=G<4r:fzSax", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertFalse(element1.isBlock());
      
      Element element2 = element1.appendElement("br");
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("t=G<4r:fzSax", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("t=G<4r:fzSax", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("t=G<4r:fzSax", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("br", element2.nodeName());
      assertEquals("br", element2.tagName());
      assertTrue(element2.hasParent());
      
      List<Node> list0 = document0.childNodesCopy();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      String string0 = element1.outerHtml();
      assertEquals("<br><br></br>", string0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("t=G<4r:fzSax", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("t=G<4r:fzSax", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertFalse(element1.isBlock());
      
      Tag tag0 = element1.tag();
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotNull(tag0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("t=G<4r:fzSax", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("t=G<4r:fzSax", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isEmpty());
      assertEquals("br", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("QEwyyyib");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("QEwyyyib", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("QEwyyyib", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.tagName("QEwyyyib");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("qewyyyib", document0.tagName());
      assertEquals("QEwyyyib", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("QEwyyyib", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("QEwyyyib", document1.location());
      assertEquals("qewyyyib", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("QEwyyyib", document1.baseUri());
      
      Document document2 = (Document)document0.val("QEwyyyib");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("qewyyyib", document0.tagName());
      assertEquals("QEwyyyib", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("QEwyyyib", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("QEwyyyib", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("QEwyyyib", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("qewyyyib", document2.tagName());
      
      Elements elements0 = document0.getElementsByAttributeStarting("value");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("qewyyyib", document0.tagName());
      assertEquals("QEwyyyib", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("QEwyyyib", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("QEwyyyiG");
      assertNotNull(document0);
      assertEquals("QEwyyyiG", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.tagName("QEwyyyiG");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("QEwyyyiG", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("QEwyyyiG", document1.location());
      
      document0.reparentChild(document0);
      assertSame(document0, document1);
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      
      Elements elements0 = document0.previousElementSiblings();
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = '~';
      charArray0[2] = '{';
      charArray0[3] = '[';
      charArray0[4] = '5';
      charArray0[5] = ';';
      charArray0[6] = 'B';
      charArray0[7] = ':';
      charArray0[8] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'N', '~', '{', '[', '5', ';', 'B', ':', '-'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      assertEquals(9, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.remaining());
      assertEquals("N~{[5;B:-", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) uS_ASCII0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotNull(document_OutputSettings1);
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotNull(document_OutputSettings3);
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      // Undeclared exception!
      try { 
        document1.outerHtmlHead(charBuffer0, 8222, document_OutputSettings3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("t=G<4r:fzSax");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t=G<4r:fzSax", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("t=G<4r:fzSax", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      
      Element element0 = document1.head();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t=G<4r:fzSax", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("t=G<4r:fzSax", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("t=G<4r:fzSax", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.appendElement("br");
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t=G<4r:fzSax", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("t=G<4r:fzSax", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("t=G<4r:fzSax", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals("t=G<4r:fzSax", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      
      Element element2 = element1.appendElement("br");
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t=G<4r:fzSax", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("t=G<4r:fzSax", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("t=G<4r:fzSax", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals("t=G<4r:fzSax", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("br", element2.nodeName());
      assertEquals("t=G<4r:fzSax", element2.baseUri());
      assertEquals("br", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      
      Charset charset0 = document1.charset();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(charset0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t=G<4r:fzSax", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("t=G<4r:fzSax", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      String string0 = element1.outerHtml();
      assertEquals("<br><br></br>", string0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("t=G<4r:fzSax", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("t=G<4r:fzSax", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t=G<4r:fzSax", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("t=G<4r:fzSax", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("t=G<4r:fzSax", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals("t=G<4r:fzSax", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput(" `KpcSsW", ";woue");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";woue", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";woue", document0.location());
      
      Document document1 = (Document)document0.toggleClass(";woue");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";woue", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";woue", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(";woue", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(";woue", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      String string0 = document0.wholeText();
      assertEquals(" `KpcSsW", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";woue", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";woue", document0.location());
      
      Document document2 = (Document)document1.toggleClass(" `KpcSsW");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";woue", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";woue", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(";woue", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(";woue", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(";woue", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(";woue", document2.baseUri());
      
      Elements elements0 = document0.getElementsByClass(" `KpcSsW");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";woue", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";woue", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("D$,", "BeforeDoctypePublicIdentifier");
      assertNotNull(document0);
      assertEquals("BeforeDoctypePublicIdentifier", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("BeforeDoctypePublicIdentifier", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.appendElement("textarea");
      assertNotNull(element0);
      assertEquals("BeforeDoctypePublicIdentifier", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("BeforeDoctypePublicIdentifier", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("BeforeDoctypePublicIdentifier", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      Element element1 = document0.appendElement("#root");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertEquals("BeforeDoctypePublicIdentifier", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("BeforeDoctypePublicIdentifier", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("#root", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#root", element1.tagName());
      assertEquals("BeforeDoctypePublicIdentifier", element1.baseUri());
      assertTrue(element1.hasParent());
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertEquals("BeforeDoctypePublicIdentifier", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("BeforeDoctypePublicIdentifier", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("br", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.getName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("textarea", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      FormElement formElement0 = new FormElement(tag0, "BeforeDoctypePublicIdentifier", attributes1);
      assertNotNull(formElement0);
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("br", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("br", formElement0.tagName());
      assertEquals("br", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("BeforeDoctypePublicIdentifier", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      
      String string0 = formElement0.outerHtml();
      assertEquals("<br>", string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(string0);
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("br", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("br", formElement0.tagName());
      assertEquals("br", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("BeforeDoctypePublicIdentifier", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      
      Tag tag1 = element0.tag();
      assertFalse(element0.equals((Object)element1));
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(element0, element1);
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      assertEquals("BeforeDoctypePublicIdentifier", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("BeforeDoctypePublicIdentifier", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("BeforeDoctypePublicIdentifier", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isData());
      assertFalse(tag1.formatAsBlock());
      assertTrue(tag1.preserveWhitespace());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isSelfClosing());
      assertEquals("textarea", tag1.toString());
      assertEquals("textarea", tag1.getName());
      assertTrue(tag1.isFormSubmittable());
      assertTrue(tag1.isInline());
      assertTrue(tag1.isFormListed());
      assertTrue(tag1.isKnownTag());
      assertFalse(tag1.isBlock());
      
      Elements elements0 = element1.getElementsMatchingOwnText("b");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(elements0);
      assertEquals("BeforeDoctypePublicIdentifier", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("BeforeDoctypePublicIdentifier", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("#root", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#root", element1.tagName());
      assertEquals("BeforeDoctypePublicIdentifier", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("QEwyyyiG", "QEwyyyiG");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.tagName("QEwyyyiG");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertFalse(document1.hasParent());
      
      String string0 = document1.val();
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document0.attr("QEwyyyiG", true);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("qewyyyig", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("QEwyyyiG", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("QEwyyyiG", document2.baseUri());
      
      Elements elements0 = document2.getElementsByAttributeValueMatching("QEwyyyiG", "");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("qewyyyig", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("QEwyyyiG", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("QEwyyyiG", document2.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";woUe", ";woUe");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";woUe", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      
      DocumentType documentType0 = new DocumentType(";woUe", ";woUe", "YrWL FT-65sg;<:L6");
      assertNotNull(documentType0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      
      documentType0.reparentChild(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";woUe", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      document0.reparentChild(documentType0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";woUe", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertTrue(documentType0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";woUe", ";woUe");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";woUe", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";woUe", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(";woUe", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      
      Element element1 = element0.appendElement(";woUe");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";woUe", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(";woUe", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(";woue", element1.tagName());
      assertEquals(";woue", element1.nodeName());
      assertEquals(";woUe", element1.baseUri());
      assertFalse(element1.isBlock());
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";woUe", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      String string0 = element0.outerHtml();
      assertEquals("<br>\n <;woue></;woue></br>", string0);
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element1);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";woUe", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(";woUe", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      
      String string1 = element0.text();
      assertEquals("", string1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(element0, element1);
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";woUe", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(";woUe", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</!)J1<N}LMvSB", "Cl\"");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Cl\"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Cl\"", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Cl\"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Cl\"", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("Cl\""));
      
      Document document1 = (Document)document0.classNames(set0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Cl\"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Cl\"", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Cl\"", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Cl\"", document1.baseUri());
      assertFalse(set0.contains("Cl\""));
      
      Set<String> set1 = charset0.aliases();
      assertFalse(set1.equals((Object)set0));
      assertSame(document0, document1);
      assertNotNull(set1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Cl\"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Cl\"", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set1.size());
      assertFalse(set1.isEmpty());
      assertFalse(set1.contains("Cl\""));
      
      document0.charset(charset0);
      assertSame(document0, document1);
      assertEquals("Cl\"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Cl\"", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      String string0 = document0.outerHtml();
      assertEquals("<!--!)J1<N}LMvSB-->\n<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body></body>\n</html>", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("Cl\"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Cl\"", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string1 = document0.text();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertNotNull(string1);
      assertEquals("Cl\"", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Cl\"", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";woUe", ";woUe");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";woUe", document0.location());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(";woUe", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals(";woUe", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.isBlock());
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(";woUe", document0.location());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  ;woUe\n </body>\n</html>\n<br>", string0);
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(";woUe", document0.location());
      
      String string1 = document0.text();
      assertEquals(";woUe", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(";woUe", document0.location());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "Insert position out of bounds.";
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements0 = document0.getElementsByAttribute("Insert position out of bounds.");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Element element0 = document0.prependElement("zt)xtLcPQS1.V{");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("zt)xtlcpqs1.v{", element0.nodeName());
      assertEquals("zt)xtlcpqs1.v{", element0.tagName());
      assertTrue(element0.hasParent());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Map<String, String> map0 = element0.dataset();
      assertNotNull(map0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("zt)xtlcpqs1.v{", element0.nodeName());
      assertEquals("zt)xtlcpqs1.v{", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Element element1 = element0.prependElement("Insert position out of bounds.");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("zt)xtlcpqs1.v{", element0.nodeName());
      assertEquals("zt)xtlcpqs1.v{", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("insert position out of bounds.", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("insert position out of bounds.", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      
      String string1 = element0.cssSelector();
      assertEquals("zt)xtlcpqs1.v{", string1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(element0, element1);
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("zt)xtlcpqs1.v{", element0.nodeName());
      assertEquals("zt)xtlcpqs1.v{", element0.tagName());
      assertTrue(element0.hasParent());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string2 = element0.ownText();
      assertEquals("", string2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(element0, element1);
      assertNotNull(string2);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("zt)xtlcpqs1.v{", element0.nodeName());
      assertEquals("zt)xtlcpqs1.v{", element0.tagName());
      assertTrue(element0.hasParent());
      
      element0.setSiblingIndex((-2163));
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals((-2163), element0.siblingIndex());
      assertEquals("zt)xtlcpqs1.v{", element0.nodeName());
      assertEquals("zt)xtlcpqs1.v{", element0.tagName());
      assertTrue(element0.hasParent());
      
      // Undeclared exception!
      try { 
        element0.getElementsContainingOwnText("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("S3}", "S3}");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S3}", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("S3}", document0.baseUri());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S3}", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("S3}", document0.baseUri());
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S3}", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("S3}", document0.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      document0.childNodes = list0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S3}", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("S3}", document0.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, document0.childNodes.size());
      assertFalse(document0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.appendElement("CO");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("}", "}");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("}", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("}", document0.baseUri());
      assertFalse(document0.hasParent());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("}", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("}", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("CO");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("}", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("}", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("co", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("co", element0.tagName());
      assertEquals("}", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("}", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("}", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("}", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("}", document1.baseUri());
      assertFalse(document1.hasParent());
      
      document1.setParentNode(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("}", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("}", document0.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("}", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("}", document1.baseUri());
      
      boolean boolean0 = document1.hasClass("}");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("}", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("}", document0.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("}", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("}", document1.baseUri());
      
      Element element1 = document0.nextElementSibling();
      assertSame(document0, document1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("}", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("}", document0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("co", element1.tagName());
      assertEquals("co", element1.nodeName());
      assertEquals("}", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("{", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("{", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("{", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("{", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      document0.charset(charset0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("{", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("{", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head>\n  <meta charset=\"UTF-8\">\n </head>\n <body>\n  {\n </body>\n</html>", string0);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("{", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("{", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.updateMetaCharsetElement());
      
      String string1 = document0.text();
      assertEquals("{", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("{", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("{", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document0 = Document.createShell("4Xi9U");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4Xi9U", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("4Xi9U", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.createElement("xg.6<8");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4Xi9U", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("4Xi9U", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("xg.6<8", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("xg.6<8", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("4Xi9U", element0.baseUri());
      
      Element element1 = element0.prepend("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("4Xi9U", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("4Xi9U", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("xg.6<8", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("xg.6<8", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("4Xi9U", element0.baseUri());
      assertEquals("4Xi9U", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("xg.6<8", element1.nodeName());
      assertEquals("xg.6<8", element1.tagName());
      assertFalse(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Tag tag0 = Tag.valueOf("rp");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("rp", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("rp", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes1.put(" ", " ");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      FormElement formElement0 = new FormElement(tag0, "4p !LhU", attributes2);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotNull(formElement0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("rp", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("rp", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("rp", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("rp", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("4p !LhU", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      
      Document document0 = Parser.parseBodyFragment("UTF-", "~Y{X8`xhC4-");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("~Y{X8`xhC4-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~Y{X8`xhC4-", document0.location());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("~Y{X8`xhC4-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~Y{X8`xhC4-", document0.location());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("~Y{X8`xhC4-", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("~Y{X8`xhC4-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      FormElement formElement1 = formElement0.addElement(document1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("rp", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("rp", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("rp", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("rp", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("4p !LhU", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("~Y{X8`xhC4-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~Y{X8`xhC4-", document0.location());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("~Y{X8`xhC4-", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("~Y{X8`xhC4-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("rp", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("rp", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("4p !LhU", formElement1.baseUri());
      
      List<Node> list0 = formElement1.childNodes();
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertSame(formElement1, formElement0);
      assertNotNull(list0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("rp", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("rp", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("rp", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("rp", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("4p !LhU", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("~Y{X8`xhC4-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~Y{X8`xhC4-", document0.location());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("~Y{X8`xhC4-", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("~Y{X8`xhC4-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("rp", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("rp", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("4p !LhU", formElement1.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      formElement1.childNodes = list0;
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("rp", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("rp", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("rp", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("rp", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("4p !LhU", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("~Y{X8`xhC4-", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~Y{X8`xhC4-", document0.location());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("~Y{X8`xhC4-", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("~Y{X8`xhC4-", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("rp", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("rp", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("4p !LhU", formElement1.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, formElement1.childNodes.size());
      assertTrue(formElement1.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        formElement1.text(" ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("java.lang.string@0000000038", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes1.put("font", "font");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      FormElement formElement0 = new FormElement(tag0, "uUD,gSi1zWwlA 3|u", attributes2);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotNull(formElement0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("uUD,gSi1zWwlA 3|u", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      
      Attribute attribute0 = Attribute.createFromEncoded("UO~C}lLc-eK", "co");
      assertNotNull(attribute0);
      assertEquals("UO~C}lLc-eK", attribute0.getKey());
      assertEquals("co", attribute0.getValue());
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("UO~C}lLc-eK", attribute0.getKey());
      assertEquals("co", attribute0.getValue());
      assertEquals(2, attributes3.size());
      
      attributes3.keys = null;
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("UO~C}lLc-eK", attribute0.getKey());
      assertEquals("co", attribute0.getValue());
      assertEquals(2, attributes3.size());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Element element0 = new Element(tag0, "", attributes3);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotNull(element0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("UO~C}lLc-eK", attribute0.getKey());
      assertEquals("co", attribute0.getValue());
      assertEquals(2, attributes3.size());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      
      FormElement formElement1 = formElement0.addElement(element0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("uUD,gSi1zWwlA 3|u", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("UO~C}lLc-eK", attribute0.getKey());
      assertEquals("co", attribute0.getValue());
      assertEquals(2, attributes3.size());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("uUD,gSi1zWwlA 3|u", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      
      // Undeclared exception!
      try { 
        formElement1.val();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";woUe", ";woUe");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";woUe", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.hasParent());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";woUe", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = Parser.parseBodyFragmentRelaxed(";woUe", ";woUe");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";woUe", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(";woUe", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document1.toggleClass(";woUe");
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";woUe", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(";woUe", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals(";woUe", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(";woUe", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      
      Document document3 = (Document)document2.toggleClass("G.POZ5,P");
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";woUe", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(";woUe", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals(";woUe", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(";woUe", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(";woUe", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(";woUe", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      
      boolean boolean0 = document1.hasClass("G.POZ5,P");
      assertTrue(boolean0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";woUe", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(";woUe", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@[nx+B2_", ";wL/~e");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("@[nx+B2_");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";wL/~e", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document1.toggleClass("@[nx+B2_");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";wL/~e", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(";wL/~e", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(";wL/~e", document2.baseUri());
      
      boolean boolean0 = document1.hasClass("org.jsoup.parser.parseerror");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";wL/~e", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      String string0 = document0.wholeText();
      assertEquals("@[nx+B2_", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("S3}", "S3}");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("S3}", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S3}", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("S3}", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S3}", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("S3}", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S3}", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("S3}", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = document0.appendElement("S3}");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("S3}", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S3}", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s3}", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("S3}", element1.baseUri());
      assertEquals("s3}", element1.tagName());
      
      Element element2 = element1.firstElementSibling();
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("S3}", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S3}", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s3}", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("S3}", element1.baseUri());
      assertEquals("s3}", element1.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      assertEquals("html", element2.tagName());
      assertEquals("S3}", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.nodeName());
      
      Element element3 = element0.toggleClass("S3}");
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotSame(element3, element2);
      assertNotNull(element3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("S3}", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S3}", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("S3}", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertEquals("body", element3.nodeName());
      assertEquals(1, element3.siblingIndex());
      assertEquals(1, element3.childNodeSize());
      assertEquals("S3}", element3.baseUri());
      assertTrue(element3.hasParent());
      
      Elements elements0 = document0.getElementsByClass("S3}");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("S3}", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S3}", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = new Document("QEwyyyiG");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.tagName("QEwyyyiG");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("qewyyyig", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("QEwyyyiG", document1.location());
      
      Document document2 = (Document)document0.val("QEwyyyiG");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("QEwyyyiG", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("QEwyyyiG", document2.baseUri());
      assertEquals("qewyyyig", document2.tagName());
      
      Document document3 = (Document)document2.selectFirst("QEwyyyiG");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("QEwyyyiG", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("QEwyyyiG", document2.baseUri());
      assertEquals("qewyyyig", document2.tagName());
      assertEquals("qewyyyig", document3.tagName());
      assertEquals("QEwyyyiG", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("QEwyyyiG", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      
      Elements elements0 = document3.getAllElements();
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("QEwyyyiG", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("QEwyyyiG", document2.baseUri());
      assertEquals("qewyyyig", document2.tagName());
      assertEquals("qewyyyig", document3.tagName());
      assertEquals("QEwyyyiG", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("QEwyyyiG", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Elements elements1 = document2.getElementsByAttributeValueNot("html", "QEwyyyiG");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("QEwyyyiG", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("QEwyyyiG", document2.baseUri());
      assertEquals("qewyyyig", document2.tagName());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = Parser.parse("S3}", "S3}");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("S3}", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("S3}", document0.location());
      assertFalse(document0.hasParent());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("S3}", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("S3}", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("org.jsoup.nodes.Attributes$Dataset");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("S3}", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("S3}", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("S3}", document1.baseUri());
      assertEquals("S3}", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      Document document2 = (Document)document1.toggleClass("");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("S3}", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("S3}", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("S3}", document1.baseUri());
      assertEquals("S3}", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("S3}", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("S3}", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsByClass("Pattern syntax error: ");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("S3}", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("S3}", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@[nx+B2_", ";woUe");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.toggleClass("9");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(";woUe", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(";woUe", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = (Document)document1.toggleClass("IC2 x-clJ u6");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(";woUe", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(";woUe", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(";woUe", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(";woUe", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      boolean boolean0 = document0.hasClass("<PYY?8");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";woUe", ";woUe");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement(";woUe");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";woue", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";woue", element0.nodeName());
      assertEquals(";woUe", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      String string0 = element0.absUrl("~cV|");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";woue", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";woue", element0.nodeName());
      assertEquals(";woUe", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.append("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";woue", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";woue", element0.nodeName());
      assertEquals(";woUe", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(";woUe", element1.baseUri());
      assertEquals(";woue", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(";woue", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("org.jsoup.nodes.LeafNode", "Swl3q]-h");
      assertNotNull(elements0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = element0.getElementsContainingOwnText("Swl3q]-h");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";woue", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";woue", element0.nodeName());
      assertEquals(";woUe", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      String string1 = element0.text();
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertSame(element0, element1);
      assertNotNull(string1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";woue", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";woue", element0.nodeName());
      assertEquals(";woUe", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      byte[] byteArray0 = new byte[0];
      String string0 = "h>)>&GZ8";
      Element element0 = document0.prependElement("h>)>&GZ8");
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("h>)>&gz8", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("h>)>&gz8", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      List<TextNode> list0 = document1.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Elements elements0 = document1.children();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element1 = element0.previousElementSibling();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("h>)>&gz8", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("h>)>&gz8", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element2 = element0.after("a2-C?uXKN=.");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotNull(element2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("h>)>&gz8", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("h>)>&gz8", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("h>)>&gz8", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("h>)>&gz8", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      
      // Undeclared exception!
      try { 
        element2.outerHtmlHead(stringBuffer0, (-2641), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";woUe", ";woUe");
      assertNotNull(document0);
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      document0.siblingIndex = (-448);
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.baseUri());
      assertEquals((-448), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document1 = (Document)document0.text("_*x?E#.[RxbyALQR*");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.baseUri());
      assertEquals((-448), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals((-448), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(";woUe", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(";woUe", document1.location());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("uW_z^9Ed?jTprxDv*O'", "children collection to be inserted must not be null.");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals("children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Elements elements0 = element0.parents();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals("children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals("children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.wrap("html > body");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("children collection to be inserted must not be null.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("children collection to be inserted must not be null.", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = ";wL/~e";
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte)98, (byte)62, (byte)35, (byte)8, (byte)4, (byte)0}, byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(7, byteArray0.length);
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(7, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)4, (byte)98, (byte)62, (byte)35, (byte)8, (byte)4, (byte)0}, byteArray0);
      assertNotNull(charBuffer0);
      assertEquals(7, byteArray0.length);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(7, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(7, byteBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0004b>#\b\u0004\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotNull(document_OutputSettings2);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(836);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(836, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(836, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(836, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(836, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(true);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotNull(document_OutputSettings4);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(836, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(836, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(836, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(836, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(836, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      
      // Undeclared exception!
      document0.outerHtmlTail(charBuffer0, 48, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"%#\"oAt0*J);FG| }");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = "value";
      Document document0 = new Document("value");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string1 = document0.title();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      document0.childNodes = null;
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("value", "value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.toggleClass("@[nx+B2_");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.parser.ParseError", document1.baseUri());
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document1.toggleClass("(ISUw?P!C{)B=$");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.parser.ParseError", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.parser.ParseError", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      
      Elements elements0 = document0.getElementsByClass("(ISUw?P!C{)B=$");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@[nx+B2_", ";woUe");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("9");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(";woUe", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(";woUe", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      Document document2 = (Document)document1.toggleClass("IC2 x-clJ u6");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(";woUe", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(";woUe", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(";woUe", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(";woUe", document2.location());
      assertFalse(document2.hasParent());
      
      Elements elements0 = document0.getElementsByClass(";woUe");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = document0.getElementsMatchingOwnText(";woUe");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";woUe", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(";woUe", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(", "org.jsoup.nodes.Attributes");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      
      Element element0 = document0.appendElement("S3}");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Attributes", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("s3}", element0.nodeName());
      assertEquals("s3}", element0.tagName());
      assertFalse(element0.isBlock());
      
      Elements elements0 = document0.getAllElements();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(5, elements0.size());
      
      Element element1 = document0.head();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("org.jsoup.nodes.Attributes", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      
      Element element2 = element1.wrap("org.jsoup.nodes.Attributes");
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("org.jsoup.nodes.Attributes", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("org.jsoup.nodes.Attributes", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(", "org.jsoup.nQdes.5ttributes");
      assertNotNull(document0);
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nQdes.5ttributes", element0.baseUri());
      assertEquals("br", element0.nodeName());
      
      String string0 = element0.absUrl("=^Hl5LdoI&]yyz0DMO=");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nQdes.5ttributes", element0.baseUri());
      assertEquals("br", element0.nodeName());
      
      Element element1 = element0.append("org.jsoup.nQdes.5ttributes");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.nQdes.5ttributes", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("br", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("s3}", "InSelectInTable");
      assertNotNull(elements0);
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = document0.getElementsContainingOwnText("bdi");
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      String string1 = document0.text();
      assertEquals(":nth-child( org.jsoup.nQdes.5ttributes", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J ", "J ");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("J ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("J ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.appendText("J ");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("J ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("J ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("J ", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("J ", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsContainingText("J ");
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("J ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("J ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(", "org.jsoup.nQdes.5ttributes");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.text("org.jsoup.nQdes.5ttributes");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals(0, int0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      
      Element element0 = document1.appendElement("br");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nQdes.5ttributes", element0.baseUri());
      assertEquals("br", element0.nodeName());
      
      Element element1 = element0.append("org.jsoup.nQdes.5ttributes");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.nQdes.5ttributes", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertEquals("org.jsoup.nQdes.5ttributes", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertEquals("br", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      
      Elements elements0 = document1.getElementsByAttributeValueEnding("s3}", "InSelectInTable");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document1.getElementsContainingOwnText("bdi");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Element element2 = element0.getElementById("InSelectInTable");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element1);
      assertNull(element2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nQdes.5ttributes", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nQdes.5ttributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.nQdes.5ttributes", element0.baseUri());
      assertEquals("br", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      document0.reparentChild(document0);
      assertEquals(";wL/~e", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.text();
      assertEquals(";wL/~e", string0);
      assertNotNull(string0);
      assertEquals(";wL/~e", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      document0.after(";wL/~e");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.ParseError", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document1 = (Document)document0.html("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      
      boolean boolean0 = document1.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.toggleClass("org.jsoup.parser.ParseError");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.ParseError", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      Set<String> set0 = document1.classNames();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(set0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.ParseError", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("org.jsoup.parser.ParseError"));
      
      boolean boolean0 = document1.hasClass("Children collection to be inserted must not be null.");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.ParseError", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      
      Elements elements0 = document0.getElementsContainingText("org.jsoup.nodes.Element");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element1 = element0.attr("org.jsoup.nodes.Element", true);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("QEwyyyiG", "QEwyyyiG");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QEwyyyiG", document0.baseUri());
      
      Document document1 = (Document)document0.tagName("QEwyyyiG");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Document document2 = document1.ownerDocument();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("QEwyyyiG", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("QEwyyyiG", document2.baseUri());
      assertEquals("qewyyyig", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      
      Document document3 = (Document)document2.toggleClass("qewyyyhig");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("QEwyyyiG", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("QEwyyyiG", document2.baseUri());
      assertEquals("qewyyyig", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("qewyyyig", document3.tagName());
      assertEquals("QEwyyyiG", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("QEwyyyiG", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = Parser.xmlParser();
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser1, parser0);
      assertNotNull(parser1);
      assertFalse(parser1.isTrackErrors());
      
      Document document4 = document1.parser(parser1);
      assertFalse(parser1.equals((Object)parser0));
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(parser1, parser0);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("QEwyyyiG", document4.baseUri());
      assertEquals("QEwyyyiG", document4.location());
      assertEquals("qewyyyig", document4.tagName());
      assertFalse(document4.hasParent());
      
      Elements elements0 = document4.getElementsByClass("qewyyyhig");
      assertFalse(parser1.equals((Object)parser0));
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(parser1, parser0);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("QEwyyyiG", document4.baseUri());
      assertEquals("QEwyyyiG", document4.location());
      assertEquals("qewyyyig", document4.tagName());
      assertFalse(document4.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document5 = (Document)document1.html("qewyyyhig");
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertNotNull(document5);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("QEwyyyiG", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals("QEwyyyiG", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("qewyyyig", document5.tagName());
      
      boolean boolean0 = document2.is("QEwyyyiG");
      assertTrue(boolean0);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("QEwyyyiG", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("QEwyyyiG", document2.baseUri());
      assertEquals("qewyyyig", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("k?_i(1rpKk[*", "org.jsoup.nodes.Attributes");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.text("k?_i(1rpKk[*");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Attributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document2 = (Document)document0.filter(nodeFilter0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Attributes", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Attributes", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";wL/~e");
      assertFalse(boolean0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Attributes", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.nodes.attributes", tag0.getName());
      assertEquals("org.jsoup.nodes.attributes", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      Attributes attributes2 = attributes1.put("S3}", "Children collection to be inserted must not be null.");
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotNull(attributes2);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      
      Attributes attributes3 = attributes2.put("V/mR/iY]([`6CtF0", false);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotNull(attributes3);
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      
      FormElement formElement0 = new FormElement(tag0, "S3}", attributes3);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.nodes.attributes", tag0.getName());
      assertEquals("org.jsoup.nodes.attributes", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("org.jsoup.nodes.attributes", formElement0.tagName());
      assertEquals("org.jsoup.nodes.attributes", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("S3}", formElement0.baseUri());
      
      int int0 = formElement0.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes3);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.nodes.attributes", tag0.getName());
      assertEquals("org.jsoup.nodes.attributes", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("org.jsoup.nodes.attributes", formElement0.tagName());
      assertEquals("org.jsoup.nodes.attributes", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("S3}", formElement0.baseUri());
      
      Element element0 = document1.appendElement("@[nx+b2_");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Attributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("@[nx+b2_", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("@[nx+b2_", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Attributes", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("k?_i(1rpKk[*", "InSelectInTable");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = element0.getElementsContainingOwnText(";wL/~e");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Attributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("@[nx+b2_", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("@[nx+b2_", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Attributes", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Element element1 = document1.getElementById("@sH<t");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNull(element1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Attributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      String string0 = document1.text();
      assertEquals("k?_i(1rpKk[*", string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Attributes", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Elements elements2 = document0.getElementsByAttributeValueStarting("7q&R`T7", "@[nx+b2_");
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Attributes", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Attributes", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse(";wU/~e", ";wU/~e");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wU/~e", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";wU/~e", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.appendElement(";wU/~e");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wU/~e", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";wU/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(";wu/~e", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(";wu/~e", element0.tagName());
      assertEquals(";wU/~e", element0.baseUri());
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("body", "urgm");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wU/~e", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";wU/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = document0.getElementsContainingText("v`43;CvaPk}`N]");
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wU/~e", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(";wU/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.toggleClass("org.jsoup.parser.ParseError");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document1.location());
      assertEquals("org.jsoup.parser.ParseError", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements0 = document0.getElementsByClass("org.jsoup.parser.ParseError");
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      boolean boolean0 = document0.hasClass("org.jsoup.parser.ParseError");
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed(";wl/~e", "@[nx+B2_");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@[nx+B2_", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("@[nx+B2_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.toggleClass("@[nx+B2_");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@[nx+B2_", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("@[nx+B2_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("@[nx+B2_", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("@[nx+B2_", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      
      Document document2 = (Document)document1.toggleClass("'-u7+7~>o");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@[nx+B2_", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("@[nx+B2_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("@[nx+B2_", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("@[nx+B2_", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("@[nx+B2_", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("@[nx+B2_", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      Elements elements0 = document0.getElementsByClass("@[nx+B2_");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@[nx+B2_", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("@[nx+B2_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = document1.getElementsByAttributeValueEnding(";wl/~e", ";wl/~e");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@[nx+B2_", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("@[nx+B2_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("@[nx+B2_", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("@[nx+B2_", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      document0.reparentChild(document0);
      assertEquals(";wL/~e", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.text();
      assertEquals(";wL/~e", string0);
      assertNotNull(string0);
      assertEquals(";wL/~e", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      document0.append(";wL/~e");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J]", "J]");
      assertNotNull(document0);
      assertEquals("J]", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("J]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.tagName("J]");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("J]", document0.location());
      assertEquals("J]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("j]", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("j]", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("J]", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("J]", document1.baseUri());
      
      Elements elements0 = document1.getElementsByAttributeValueNot(" ", " ");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertEquals("J]", document0.location());
      assertEquals("J]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("j]", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("j]", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("J]", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("J]", document1.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = document0.val();
      assertEquals("", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("J]", document0.location());
      assertEquals("J]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("j]", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      String string1 = document1.text();
      assertEquals("J]", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string1);
      assertEquals("J]", document0.location());
      assertEquals("J]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("j]", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("j]", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("J]", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("J]", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document0 = Parser.parseBodyFragmentRelaxed("0", "^tm|&u@");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.location());
      
      String string0 = document0.cssSelector();
      assertEquals("^tm|&u@", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      document0.reparentChild(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.location());
      
      Document document2 = Parser.parseBodyFragmentRelaxed("NUT5f)b*^iev4(,I.$x", "7W(D<k]e(lt[X~");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("7W(D<k]e(lt[X~", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("7W(D<k]e(lt[X~", document2.baseUri());
      
      Elements elements0 = document2.previousElementSiblings();
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(elements0);
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("7W(D<k]e(lt[X~", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("7W(D<k]e(lt[X~", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document1.getElementsByIndexLessThan((-1915959191));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      // Undeclared exception!
      document0.prepend("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Element element0 = new Element("pubSysKey");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("pubSysKey", element0.tagName());
      assertEquals("pubSysKey", element0.nodeName());
      
      int int0 = element0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("pubSysKey", element0.tagName());
      assertEquals("pubSysKey", element0.nodeName());
      
      String string0 = element0.wholeText();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("pubSysKey", element0.tagName());
      assertEquals("pubSysKey", element0.nodeName());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Element element1 = element0.prependText("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("pubSysKey", element0.tagName());
      assertEquals("pubSysKey", element0.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("pubSysKey", element1.nodeName());
      assertEquals("pubSysKey", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      
      Elements elements0 = element0.getElementsByIndexEquals(0);
      assertSame(element0, element1);
      assertNotNull(elements0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("pubSysKey", element0.tagName());
      assertEquals("pubSysKey", element0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string0));
      
      Element element2 = element0.classNames(set0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("pubSysKey", element0.tagName());
      assertEquals("pubSysKey", element0.nodeName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("pubSysKey", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("pubSysKey", element2.nodeName());
      assertFalse(set0.contains(string0));
      
      Element element3 = element2.addClass("pubSysKey");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertSame(element2, element1);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element0);
      assertNotNull(element3);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("pubSysKey", element0.tagName());
      assertEquals("pubSysKey", element0.nodeName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("pubSysKey", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("pubSysKey", element2.nodeName());
      assertEquals(1, element3.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertEquals("", element3.baseUri());
      assertEquals("pubSysKey", element3.tagName());
      assertFalse(element3.isBlock());
      assertEquals("pubSysKey", element3.nodeName());
      assertFalse(element3.hasParent());
      assertFalse(set0.contains(string0));
      
      Element element4 = element0.empty();
      assertSame(element0, element2);
      assertSame(element0, element4);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element4, element1);
      assertSame(element4, element3);
      assertSame(element4, element2);
      assertSame(element4, element0);
      assertNotNull(element4);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("pubSysKey", element0.tagName());
      assertEquals("pubSysKey", element0.nodeName());
      assertEquals(0, element4.siblingIndex());
      assertEquals(0, element4.childNodeSize());
      assertEquals("pubSysKey", element4.nodeName());
      assertEquals("", element4.baseUri());
      assertFalse(element4.hasParent());
      assertFalse(element4.isBlock());
      assertEquals("pubSysKey", element4.tagName());
      
      Element element5 = element2.html("pubSysKey");
      assertSame(element0, element2);
      assertSame(element0, element4);
      assertSame(element0, element5);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertSame(element2, element4);
      assertSame(element2, element5);
      assertSame(element2, element1);
      assertSame(element5, element1);
      assertSame(element5, element0);
      assertSame(element5, element2);
      assertSame(element5, element4);
      assertSame(element5, element3);
      assertNotNull(element5);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("pubSysKey", element0.tagName());
      assertEquals("pubSysKey", element0.nodeName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("pubSysKey", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("pubSysKey", element2.nodeName());
      assertEquals(1, element5.childNodeSize());
      assertEquals(0, element5.siblingIndex());
      assertEquals("", element5.baseUri());
      assertFalse(element5.hasParent());
      assertFalse(element5.isBlock());
      assertEquals("pubSysKey", element5.tagName());
      assertEquals("pubSysKey", element5.nodeName());
      assertFalse(set0.contains(string0));
      
      // Undeclared exception!
      try { 
        element2.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("QEwyyyiG", "QEwyyyiG");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      
      Comment comment0 = new Comment("^ttmbu@", "^ttmbu@");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      document0.parentNode = (Node) comment0;
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      Document document1 = (Document)document0.tagName("QEwyyyiG");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("QEwyyyiG", document1.location());
      
      String string0 = document1.val();
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("qewyyyig", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("qewyyyig", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("QEwyyyiG", document1.location());
      
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_NUy(< ft%<vP8n[M", "_NUy(< ft%<vP8n[M");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.prepend("-0)XZ)H!Rg7ARj");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("_NUy(< ft%<vP8n[M", document1.location());
      
      document0.reparentChild(document0);
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      
      Elements elements0 = document0.previousElementSiblings();
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Map<String, String> map0 = document0.dataset();
      assertSame(document0, document1);
      assertNotNull(map0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("_NUy(< ft%<vP8n[M", document0.baseUri());
      assertEquals("_NUy(< ft%<vP8n[M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      // Undeclared exception!
      document1.prependElement("title");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document0 = parser0.parseInput("", "");
      assertSame(parser0, parser1);
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.tagName());
      
      String string0 = document0.cssSelector();
      assertEquals("^tm|&u@", string0);
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.setSiblingIndex((-944));
      assertSame(parser0, parser1);
      assertSame(document0, document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals((-944), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document2 = (Document)document0.appendText("w]9\"X2eM2cKx+xbTQ-s");
      assertSame(parser0, parser1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals((-944), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document2.location());
      assertEquals("^tm|&u@", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals((-944), document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      
      Elements elements0 = document0.getElementsContainingText("w]9\"X2eM2cKx+xbTQ-s");
      assertSame(parser0, parser1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals((-944), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.prependText(";wL/~e");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(";wL/~e", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";wL/~e", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      
      String string0 = document0.text();
      assertEquals(";wL/~e ;wL/~e", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("M37tFe]F0WLciUx[3", "Fn*2-#");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Fn*2-#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Fn*2-#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Fn*2-#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Fn*2-#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("Fn*2-#", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.shallowClone();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Fn*2-#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Fn*2-#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("Fn*2-#", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("Fn*2-#", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertFalse(element1.hasParent());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":U6S", ";wL/~e");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = document0.parser(parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";wL/~e", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(";wL/~e", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Element element0 = document1.body();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";wL/~e", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(";wL/~e", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";wL/~e", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(";wL/~e", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document1.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ymw}!x.U a'U}db!O7", "Ymw}!x.U a'U}db!O7");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ymw}!x.U a'U}db!O7", document0.location());
      assertEquals("Ymw}!x.U a'U}db!O7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ymw}!x.U a'U}db!O7", document0.location());
      assertEquals("Ymw}!x.U a'U}db!O7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("Ymw}!x.U a'U}db!O7", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      
      element0.setParentNode(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ymw}!x.U a'U}db!O7", document0.location());
      assertEquals("Ymw}!x.U a'U}db!O7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("Ymw}!x.U a'U}db!O7", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ymw}!x.U a'U}db!O7", document0.location());
      assertEquals("Ymw}!x.U a'U}db!O7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element1 = element0.firstElementSibling();
      assertNull(element1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ymw}!x.U a'U}db!O7", document0.location());
      assertEquals("Ymw}!x.U a'U}db!O7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("Ymw}!x.U a'U}db!O7", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TJ07D3\")q_9T#L", "TJ07D3\")q_9T#L");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\")q_9T#L", document0.baseUri());
      assertEquals("TJ07D3\")q_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\")q_9T#L", document0.baseUri());
      assertEquals("TJ07D3\")q_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\")q_9T#L", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\")q_9T#L", document0.baseUri());
      assertEquals("TJ07D3\")q_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\")q_9T#L", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      
      Element element1 = element0.firstElementSibling();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\")q_9T#L", document0.baseUri());
      assertEquals("TJ07D3\")q_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\")q_9T#L", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("TJ07D3\")q_9T#L", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("QEwyyyiG", "QEwyyyiG");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Document document1 = Document.createShell("QEwyyyiG");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document2 = (Document)document0.toggleClass("lF&PkXr$LS+d`");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("QEwyyyiG", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("QEwyyyiG", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("QEwyyyiG", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("QEwyyyiG", document3.location());
      assertFalse(document3.isBlock());
      
      Elements elements0 = document3.getElementsByAttributeValueStarting("checkbox", "tn");
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(elements0);
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("QEwyyyiG", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("QEwyyyiG", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document3.getElementsByClass("QEwyyyiG");
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("QEwyyyiG", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("QEwyyyiG", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Elements elements2 = document2.getElementsContainingOwnText("QEwyyyiG");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("QEwyyyiG", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("QEwyyyiG", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("QEwyyyiG", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(405);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(405, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(405, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(405, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      
      Charset charset0 = document3.charset();
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(charset0);
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("QEwyyyiG", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("QEwyyyiG", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotNull(document_OutputSettings3);
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("QEwyyyiG", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("QEwyyyiG", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(405, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(405, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(405, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(405, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotNull(document_OutputSettings4);
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(405, document_OutputSettings4.indentAmount());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("QEwyyyiG", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("QEwyyyiG", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(405, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(405, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(405, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(405, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      
      try { 
        document0.outerHtmlHead(pipedWriter0, 405, document_OutputSettings4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      
      document0.siblingIndex = (-1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-1), document0.siblingIndex());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = (Document)document0.toggleClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-1), document0.siblingIndex());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.parser.ParseError", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-1), document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Elements elements0 = document0.getElementsByClass("org.jsoup.parser.ParseError");
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-1), document0.siblingIndex());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document2 = (Document)document0.removeClass("");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-1), document0.siblingIndex());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.parser.ParseError", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals((-1), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.parser.ParseError", document2.baseUri());
      
      String string1 = document0.text();
      assertEquals("org.jsoup.parser.ParseError", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.parser.ParseError", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-1), document0.siblingIndex());
      assertEquals("org.jsoup.parser.ParseError", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("b", document0.location());
      assertEquals("b", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K!I");
      assertFalse(boolean0);
      
      DataNode dataNode0 = new DataNode("1m-[~'ojpclnngj/");
      assertNotNull(dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      
      document0.parentNode = (Node) dataNode0;
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("b", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("b", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      String string0 = document0.ownText();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("b", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("b", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("v<+ zp^;DOh", "1m-[~'ojpclnngj/");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("b", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("b", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document0.getElementsByIndexLessThan((-1198605172));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("b", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("b", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.html("QTa0ENSD3|EzLx%[%");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("option[selected]", "option[selected]");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("option[selected]", document0.location());
      assertEquals("option[selected]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("option[selected]", document0.location());
      assertEquals("option[selected]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("option[selected]", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      element0.setSiblingIndex((-1436010313));
      assertFalse(document0.isBlock());
      assertEquals("option[selected]", document0.location());
      assertEquals("option[selected]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("option[selected]", element0.baseUri());
      assertEquals((-1436010313), element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      
      // Undeclared exception!
      try { 
        element0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("option[selected]", "option[selected]");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("option[selected]", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("option[selected]", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("option[selected]", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("option[selected]", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("option[selected]", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      
      Elements elements0 = element0.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("option[selected]", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("option[selected]", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("option[selected]", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element1 = element0.before("t`yv?kg^m-ptlbqfs[g");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("option[selected]", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("option[selected]", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("option[selected]", element0.baseUri());
      assertEquals(3, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(3, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("option[selected]", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.ParseError", "QEwyyyiG");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = (Document)document0.toggleClass("STOP");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("QEwyyyiG", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("QEwyyyiG", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      
      Elements elements0 = document0.getElementsByClass("org.jsoup.parser.ParseError");
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("QEwyyyiG", document0.location());
      assertEquals("QEwyyyiG", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragment("^tm|&u@", "^tm|&u@");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.append("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      Element element0 = document0.body();
      assertSame(document0, document1);
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("^tm|&u@", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.addClass("^tm|&u@");
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("^tm|&u@", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("^tm|&u@", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      
      element1.reparentChild(document0);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("^tm|&u@", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("^tm|&u@", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000122': unexpected token at '@0000000122'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TJ07D3\")q_9T#L", "TJ07D3\")q_9T#L");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\")q_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\")q_9T#L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\")q_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\")q_9T#L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("TJ07D3\")q_9T#L", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\")q_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\")q_9T#L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("TJ07D3\")q_9T#L", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = document0.shallowClone();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\")q_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\")q_9T#L", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#root", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("TJ07D3\")q_9T#L", element1.baseUri());
      assertEquals("#root", element1.nodeName());
      assertFalse(element1.isBlock());
      
      // Undeclared exception!
      try { 
        element0.attr((String) null, "TJ07D3\")q_9T#L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "missing semicolon";
      Tag tag0 = Tag.valueOf("missing semicolon");
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("missing semicolon", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("missing semicolon", tag0.getName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string1 = "#";
      Attributes attributes1 = attributes0.put("#", "Attributes incorrectly present on end tag");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      FormElement formElement0 = new FormElement(tag0, "missing semicolon", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("missing semicolon", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("missing semicolon", tag0.getName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("missing semicolon", formElement0.nodeName());
      assertEquals("missing semicolon", formElement0.tagName());
      assertEquals("missing semicolon", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      
      Element element0 = formElement0.prependElement("M");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(element0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("missing semicolon", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("missing semicolon", tag0.getName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("missing semicolon", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("missing semicolon", formElement0.tagName());
      assertEquals("missing semicolon", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("m", element0.tagName());
      assertEquals("missing semicolon", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("m", element0.nodeName());
      
      element0.replaceWith(formElement0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("missing semicolon", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("missing semicolon", tag0.getName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("missing semicolon", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("missing semicolon", formElement0.tagName());
      assertEquals("missing semicolon", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("m", element0.tagName());
      assertEquals("missing semicolon", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("m", element0.nodeName());
      
      // Undeclared exception!
      formElement0.attr("n,9", "n,9");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TJ07J3\"!b_9T#L", "TJ07J3\"!b_9T#L");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertFalse(document0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      
      boolean boolean1 = document0.isBlock();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(document0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      
      Elements elements0 = document0.getElementsByIndexLessThan((-306));
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document1 = (Document)document0.appendText("TJ07J3\"!b_9T#L");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document1.baseUri());
      assertEquals("TJ07J3\"!b_9T#L", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      
      Elements elements1 = document0.getElementsByAttributeValue("textarea", "=,j-/~V;6SMS<");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Elements elements2 = document0.getElementsContainingText("textarea");
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      String string0 = document0.text();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.prependText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      String string0 = document0.text();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      boolean boolean1 = document0.isBlock();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      assertNotNull(elements0);
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document1 = (Document)document0.appendText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" > ", document1.baseUri());
      
      Elements elements1 = document0.getElementsByAttributeValue(" > ", "textarea");
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Elements elements2 = document1.getElementsContainingText(" > ");
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" > ", document1.baseUri());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TeJ07J3\"!b_9T#L", "TeJ07J3\"!b_9T#L");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TeJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.text();
      assertEquals("TeJ07J3\"!b_9T#L", string0);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TeJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = (Document)document0.toggleClass("TeJ07J3\"!b_9T#L");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TeJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("TeJ07J3\"!b_9T#L", document1.location());
      assertEquals(0, document1.siblingIndex());
      
      String string1 = document1.val();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TeJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("TeJ07J3\"!b_9T#L", document1.location());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = (Document)document0.val("TeJ07J3\"!b_9T#L");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TeJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("TeJ07J3\"!b_9T#L", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document2.location());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TeJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Pattern pattern0 = Pattern.compile("");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      
      Elements elements0 = document2.getElementsMatchingText(pattern0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TeJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("TeJ07J3\"!b_9T#L", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document2.location());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("l k(+Ki2/^#]/-|h!=u");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = document0.parser(parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document1.location());
      
      Document document2 = (Document)document0.toggleClass("tj07d3\"]b_9t#l");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Elements elements0 = document0.getElementsByClass("Uk,Qn wCQIDRf/iB9g0");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string0 = document1.cssSelector();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("l k(+Ki2/^#]/-|h!=u", document1.location());
      
      // Undeclared exception!
      try { 
        document2.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = parser1.parseInput("z/_ 5l]t", "z/_ 5l]t");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z/_ 5l]t", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("z/_ 5l]t", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z/_ 5l]t", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("z/_ 5l]t", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("z/_ 5l]t", document1.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("z/_ 5l]t", document1.location());
      
      Attributes attributes0 = document0.attributes();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertNotNull(attributes0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z/_ 5l]t", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("z/_ 5l]t", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(64);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(64, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(64, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(64, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotNull(parser2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z/_ 5l]t", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("z/_ 5l]t", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("z/_ 5l]t", document1.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("z/_ 5l]t", document1.location());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(64, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(64, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(64, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("z/_ 5l]t", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("z/_ 5l]t", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      
      Document document3 = document2.parser(parser1);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z/_ 5l]t", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("z/_ 5l]t", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("z/_ 5l]t", document1.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("z/_ 5l]t", document1.location());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(64, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(64, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(64, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("z/_ 5l]t", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("z/_ 5l]t", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("z/_ 5l]t", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("z/_ 5l]t", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      
      String string0 = document3.html();
      assertEquals("z/_ 5l]t", string0);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z/_ 5l]t", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("z/_ 5l]t", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("z/_ 5l]t", document1.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("z/_ 5l]t", document1.location());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(64, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(64, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(64, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("z/_ 5l]t", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("z/_ 5l]t", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("z/_ 5l]t", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("z/_ 5l]t", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      
      Document document4 = (Document)document3.val("z/_ 5l]t");
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotNull(document4);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("z/_ 5l]t", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("z/_ 5l]t", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("z/_ 5l]t", document1.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("z/_ 5l]t", document1.location());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(64, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(64, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(64, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("z/_ 5l]t", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("z/_ 5l]t", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("z/_ 5l]t", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("z/_ 5l]t", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("z/_ 5l]t", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("z/_ 5l]t", document4.baseUri());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      
      Document document1 = (Document)document0.prependText(";wL/~e");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(";wL/~e", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(";wL/~e", document1.baseUri());
      
      String string0 = document1.text();
      assertEquals(";wL/~e ;wL/~e", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(";wL/~e", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(";wL/~e", document1.baseUri());
      
      // Undeclared exception!
      try { 
        document1.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("^tm|b&u@", "^tm|b&u@");
      assertNotNull(document0);
      assertEquals("^tm|b&u@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|b&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      document0.reparentChild(document0);
      assertEquals("^tm|b&u@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|b&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals("^tm|b&u@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|b&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document1 = (Document)document0.attr(">^tm|b&u@", true);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("^tm|b&u@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|b&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|b&u@", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|b&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TeJ07J3\"!b_9T#L", "TeJ07J3\"!b_9T#L");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TeJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document0.location());
      
      String string0 = document0.text();
      assertEquals("TeJ07J3\"!b_9T#L", string0);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TeJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("TeJ07J3\"!b_9T#L", document0.location());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("TeJ07J3\"!b_9T#L", "TeJ07J3\"!b_9T#L");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document1.isBlock());
      assertEquals("TeJ07J3\"!b_9T#L", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("TeJ07J3\"!b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      
      Document document2 = (Document)document1.toggleClass("TeJ07J3\"!b_9T#L");
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document1.isBlock());
      assertEquals("TeJ07J3\"!b_9T#L", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("TeJ07J3\"!b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("TeJ07J3\"!b_9T#L", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("TeJ07J3\"!b_9T#L", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      
      List<Node> list0 = document1.childNodesCopy();
      assertFalse(document1.equals((Object)document0));
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotNull(list0);
      assertFalse(document1.isBlock());
      assertEquals("TeJ07J3\"!b_9T#L", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("TeJ07J3\"!b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      document2.childNodes = list0;
      assertFalse(document1.isBlock());
      assertEquals("TeJ07J3\"!b_9T#L", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("TeJ07J3\"!b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("TeJ07J3\"!b_9T#L", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("TeJ07J3\"!b_9T#L", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document2.childNodes.isEmpty());
      assertEquals(1, document2.childNodes.size());
      
      // Undeclared exception!
      try { 
        document1.getElementsByClass("org.nsoup.nodes.Elemet$NodeList");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TJ0D3\")q_9T#L", "TJ0D3\")q_9T#L");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("TJ0D3\")q_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("TJ0D3\")q_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("TJ0D3\")q_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("TJ0D3\")q_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("TJ0D3\")q_9T#L", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.clone();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("TJ0D3\")q_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("TJ0D3\")q_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("TJ0D3\")q_9T#L", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("TJ0D3\")q_9T#L", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertFalse(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      
      Elements elements0 = document0.getElementsByClass("org.nsoup.nodes.Elemet$NodeList");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("TJ0D3\")q_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("TJ0D3\")q_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element1);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("TJ0D3\")q_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("TJ0D3\")q_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("TJ0D3\")q_9T#L", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element2 = element0.after(">^tm|b&u@");
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertEquals("TJ0D3\")q_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("TJ0D3\")q_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("TJ0D3\")q_9T#L", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals("TJ0D3\")q_9T#L", element2.baseUri());
      assertEquals("body", element2.tagName());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      document0.reparentChild(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.getElementsMatchingOwnText(";wL/~e");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      // Undeclared exception!
      document0.before("1^e<H3=q>;");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("TJ07J3\"!b_9T#L", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("TJ07J3\"!b_9T#L", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("TJ07J3\"!b_9T#L", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("address", "address");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      FormElement formElement0 = new FormElement(tag0, "address", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("TJ07J3\"!b_9T#L", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("TJ07J3\"!b_9T#L", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("address", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("TJ07J3\"!b_9T#L", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      
      Document document0 = new Document("*D");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("*D", document0.location());
      assertEquals("*D", document0.baseUri());
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("*D", document0.location());
      assertEquals("*D", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("*D", document1.baseUri());
      assertEquals("*D", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      
      Element element0 = formElement0.attr("TJ07J3\"!b_9T#L", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertNotNull(element0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("TJ07J3\"!b_9T#L", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("TJ07J3\"!b_9T#L", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("address", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("TJ07J3\"!b_9T#L", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("address", element0.baseUri());
      
      FormElement formElement1 = formElement0.addElement(document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("TJ07J3\"!b_9T#L", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("TJ07J3\"!b_9T#L", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("address", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("TJ07J3\"!b_9T#L", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("*D", document0.location());
      assertEquals("*D", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("*D", document1.baseUri());
      assertEquals("*D", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("address", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("TJ07J3\"!b_9T#L", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("TJ07J3\"!b_9T#L", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      
      Element element1 = formElement1.prependElement("*D");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertNotNull(element1);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("TJ07J3\"!b_9T#L", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("TJ07J3\"!b_9T#L", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("address", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("TJ07J3\"!b_9T#L", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("*D", document0.location());
      assertEquals("*D", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("*D", document1.baseUri());
      assertEquals("*D", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("address", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("TJ07J3\"!b_9T#L", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("TJ07J3\"!b_9T#L", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertFalse(element1.isBlock());
      assertEquals("*d", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("address", element1.baseUri());
      assertEquals("*d", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      
      List<DataNode> list0 = element1.dataNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertNotNull(list0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("TJ07J3\"!b_9T#L", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("TJ07J3\"!b_9T#L", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("address", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("TJ07J3\"!b_9T#L", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("*D", document0.location());
      assertEquals("*D", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("*D", document1.baseUri());
      assertEquals("*D", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("address", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("TJ07J3\"!b_9T#L", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("TJ07J3\"!b_9T#L", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertFalse(element1.isBlock());
      assertEquals("*d", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("address", element1.baseUri());
      assertEquals("*d", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("^Ttm|Bu@", "^Ttm|Bu@");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^Ttm|Bu@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^Ttm|Bu@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.title();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^Ttm|Bu@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^Ttm|Bu@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.val("^Ttm|Bu@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^Ttm|Bu@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^Ttm|Bu@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("^Ttm|Bu@", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^Ttm|Bu@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      String string1 = document0.val();
      assertEquals("^Ttm|Bu@", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^Ttm|Bu@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^Ttm|Bu@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document2 = (Document)document0.val("");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^Ttm|Bu@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^Ttm|Bu@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("^Ttm|Bu@", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^Ttm|Bu@", document2.location());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^Ttm|Bu@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^Ttm|Bu@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = ";wL/~e";
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      
      String string1 = null;
      Element element1 = element0.previousElementSibling();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      
      // Undeclared exception!
      try { 
        element1.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("TJ07J3\"!b_9T#L");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.prependText("TJ07J3\"!b_9T#L");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("TJ07J3\"!b_9T#L", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      String string0 = document0.text();
      assertEquals("TJ07J3\"!b_9T#L", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.nextElementSiblings();
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Pattern pattern0 = Pattern.compile("TJ07J3\"!b_9T#L", 4);
      assertNotNull(pattern0);
      assertEquals("TJ07J3\"!b_9T#L", pattern0.toString());
      assertEquals(4, pattern0.flags());
      assertEquals("TJ07J3\"!b_9T#L", pattern0.pattern());
      
      Elements elements1 = document0.getElementsMatchingOwnText(pattern0);
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07J3\"!b_9T#L", pattern0.toString());
      assertEquals(4, pattern0.flags());
      assertEquals("TJ07J3\"!b_9T#L", pattern0.pattern());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      
      Elements elements2 = document1.getElementsByAttributeValueStarting(":6=", "\"1C2`u;VwTh0Ji`XSi");
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("TJ07J3\"!b_9T#L", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("id", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("id", tag0.getName());
      
      Element element0 = new Element(tag0, "id");
      assertNotNull(element0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("id", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("id", tag0.getName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("id", element0.baseUri());
      assertEquals("id", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("id", element0.tagName());
      assertFalse(element0.isBlock());
      
      Elements elements0 = element0.select("id");
      assertNotNull(elements0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("id", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("id", tag0.getName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("id", element0.baseUri());
      assertEquals("id", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("id", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      String string0 = "S,~>~F/qs2.";
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~qPN'l");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertEquals("~qPN'l", tag0.getName());
      assertEquals("~qPN'l", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = new Attribute("`wozc'.o'~e", "! BWzW", attributes0);
      assertNotNull(attribute0);
      assertEquals(0, attributes0.size());
      assertEquals("! BWzW", attribute0.getValue());
      assertEquals("`wozc'.o'~e", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals("! BWzW", attribute0.getValue());
      assertEquals("`wozc'.o'~e", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "r559=", attributes1);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isData());
      assertEquals("~qPN'l", tag0.getName());
      assertEquals("~qPN'l", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, attributes0.size());
      assertEquals("! BWzW", attribute0.getValue());
      assertEquals("`wozc'.o'~e", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals("~qPN'l", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement0.nodeName());
      assertEquals("r559=", pseudoTextElement0.baseUri());
      
      String string0 = attributes0.getIgnoreCase("! BWzW");
      assertEquals("", string0);
      assertSame(attributes0, attributes1);
      assertNotNull(string0);
      assertEquals(1, attributes0.size());
      
      Document document0 = Parser.parse(" > ", "`wozc'.o'~e");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`wozc'.o'~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("`wozc'.o'~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      PseudoTextElement pseudoTextElement1 = (PseudoTextElement)pseudoTextElement0.appendTo(document0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertNotNull(pseudoTextElement1);
      assertFalse(tag0.isData());
      assertEquals("~qPN'l", tag0.getName());
      assertEquals("~qPN'l", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, attributes0.size());
      assertEquals("! BWzW", attribute0.getValue());
      assertEquals("`wozc'.o'~e", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals("~qPN'l", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement0.nodeName());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("r559=", pseudoTextElement0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`wozc'.o'~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("`wozc'.o'~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.tagName());
      assertEquals("r559=", pseudoTextElement1.baseUri());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.nodeName());
      assertFalse(pseudoTextElement1.isBlock());
      assertTrue(pseudoTextElement1.hasParent());
      assertEquals(1, pseudoTextElement1.siblingIndex());
      
      PseudoTextElement pseudoTextElement2 = (PseudoTextElement)pseudoTextElement1.attr(" > ", "f{mxZCPd8uqdk#sb");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertSame(pseudoTextElement2, pseudoTextElement1);
      assertSame(pseudoTextElement2, pseudoTextElement0);
      assertNotNull(pseudoTextElement2);
      assertFalse(tag0.isData());
      assertEquals("~qPN'l", tag0.getName());
      assertEquals("~qPN'l", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(2, attributes0.size());
      assertEquals("! BWzW", attribute0.getValue());
      assertEquals("`wozc'.o'~e", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals("~qPN'l", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement0.nodeName());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("r559=", pseudoTextElement0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`wozc'.o'~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("`wozc'.o'~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.tagName());
      assertEquals("r559=", pseudoTextElement1.baseUri());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.nodeName());
      assertFalse(pseudoTextElement1.isBlock());
      assertTrue(pseudoTextElement1.hasParent());
      assertEquals(1, pseudoTextElement1.siblingIndex());
      assertEquals(0, pseudoTextElement2.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement2.nodeName());
      assertEquals("r559=", pseudoTextElement2.baseUri());
      assertEquals("~qPN'l", pseudoTextElement2.tagName());
      assertEquals(1, pseudoTextElement2.siblingIndex());
      assertTrue(pseudoTextElement2.hasParent());
      assertFalse(pseudoTextElement2.isBlock());
      
      Document document1 = (Document)pseudoTextElement1.parent();
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(document0, document1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(tag0.isData());
      assertEquals("~qPN'l", tag0.getName());
      assertEquals("~qPN'l", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(2, attributes0.size());
      assertEquals("! BWzW", attribute0.getValue());
      assertEquals("`wozc'.o'~e", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals("~qPN'l", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement0.nodeName());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("r559=", pseudoTextElement0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`wozc'.o'~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("`wozc'.o'~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.tagName());
      assertEquals("r559=", pseudoTextElement1.baseUri());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.nodeName());
      assertFalse(pseudoTextElement1.isBlock());
      assertTrue(pseudoTextElement1.hasParent());
      assertEquals(1, pseudoTextElement1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("`wozc'.o'~e", document1.baseUri());
      assertEquals("`wozc'.o'~e", document1.location());
      
      List<Node> list0 = pseudoTextElement0.ensureChildNodes();
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertNotNull(list0);
      assertFalse(tag0.isData());
      assertEquals("~qPN'l", tag0.getName());
      assertEquals("~qPN'l", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(2, attributes0.size());
      assertEquals("! BWzW", attribute0.getValue());
      assertEquals("`wozc'.o'~e", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals("~qPN'l", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement0.nodeName());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("r559=", pseudoTextElement0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Elements elements0 = pseudoTextElement1.getElementsByAttributeValueContaining("details", "+xSJ0");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(document0, document1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertNotNull(elements0);
      assertFalse(tag0.isData());
      assertEquals("~qPN'l", tag0.getName());
      assertEquals("~qPN'l", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(2, attributes0.size());
      assertEquals("! BWzW", attribute0.getValue());
      assertEquals("`wozc'.o'~e", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals("~qPN'l", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement0.nodeName());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("r559=", pseudoTextElement0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`wozc'.o'~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("`wozc'.o'~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.tagName());
      assertEquals("r559=", pseudoTextElement1.baseUri());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.nodeName());
      assertFalse(pseudoTextElement1.isBlock());
      assertTrue(pseudoTextElement1.hasParent());
      assertEquals(1, pseudoTextElement1.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = document1.getElementsByIndexLessThan(1);
      assertFalse(elements1.equals((Object)elements0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(document0, document1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(tag0.isData());
      assertEquals("~qPN'l", tag0.getName());
      assertEquals("~qPN'l", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(2, attributes0.size());
      assertEquals("! BWzW", attribute0.getValue());
      assertEquals("`wozc'.o'~e", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals("~qPN'l", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement0.nodeName());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("r559=", pseudoTextElement0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`wozc'.o'~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("`wozc'.o'~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.tagName());
      assertEquals("r559=", pseudoTextElement1.baseUri());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.nodeName());
      assertFalse(pseudoTextElement1.isBlock());
      assertTrue(pseudoTextElement1.hasParent());
      assertEquals(1, pseudoTextElement1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("`wozc'.o'~e", document1.baseUri());
      assertEquals("`wozc'.o'~e", document1.location());
      assertEquals(2, elements1.size());
      assertFalse(elements1.isEmpty());
      
      PseudoTextElement pseudoTextElement3 = (PseudoTextElement)pseudoTextElement1.text("br");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement3);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(document0, document1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertSame(pseudoTextElement1, pseudoTextElement3);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertSame(pseudoTextElement3, pseudoTextElement0);
      assertSame(pseudoTextElement3, pseudoTextElement1);
      assertSame(pseudoTextElement3, pseudoTextElement2);
      assertNotNull(pseudoTextElement3);
      assertFalse(tag0.isData());
      assertEquals("~qPN'l", tag0.getName());
      assertEquals("~qPN'l", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(2, attributes0.size());
      assertEquals("! BWzW", attribute0.getValue());
      assertEquals("`wozc'.o'~e", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals("~qPN'l", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(1, pseudoTextElement0.siblingIndex());
      assertEquals("~qPN'l", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals("r559=", pseudoTextElement0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`wozc'.o'~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("`wozc'.o'~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.tagName());
      assertEquals("r559=", pseudoTextElement1.baseUri());
      assertEquals(1, pseudoTextElement1.childNodeSize());
      assertEquals("~qPN'l", pseudoTextElement1.nodeName());
      assertFalse(pseudoTextElement1.isBlock());
      assertTrue(pseudoTextElement1.hasParent());
      assertEquals(1, pseudoTextElement1.siblingIndex());
      assertEquals("~qPN'l", pseudoTextElement3.tagName());
      assertFalse(pseudoTextElement3.isBlock());
      assertTrue(pseudoTextElement3.hasParent());
      assertEquals("~qPN'l", pseudoTextElement3.nodeName());
      assertEquals(1, pseudoTextElement3.siblingIndex());
      assertEquals(1, pseudoTextElement3.childNodeSize());
      assertEquals("r559=", pseudoTextElement3.baseUri());
      
      Document document2 = (Document)document0.html("`wozc'.o'~e");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`wozc'.o'~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("`wozc'.o'~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("`wozc'.o'~e", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("`wozc'.o'~e", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      
      Tag tag1 = document2.tag();
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(tag1);
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.canContainBlock());
      assertEquals("#root", tag1.toString());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isSelfClosing());
      assertTrue(tag1.isInline());
      assertEquals("#root", tag1.getName());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`wozc'.o'~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("`wozc'.o'~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("`wozc'.o'~e", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("`wozc'.o'~e", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.title(";4M}2");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.reparentChild(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsMatchingOwnText(";wL/~e");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      String string0 = document0.text();
      assertEquals(";4M}2 ;wL/~e", string0);
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TJ07J3\"!b_9T#L", "TJ07J3\"!b_9T#L");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      
      Elements elements0 = document0.getElementsMatchingOwnText("TJ07J3\"!b_9T#L");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document1 = (Document)document0.tagName("TJ07J3\"!b_9T#L");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tj07j3\"!b_9t#l", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tj07j3\"!b_9t#l", document1.tagName());
      assertEquals("TJ07J3\"!b_9T#L", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("TJ07J3\"!b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      
      Element element0 = document0.child(0);
      assertSame(document0, document1);
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tj07j3\"!b_9t#l", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.nodeName());
      assertEquals("html", element0.tagName());
      assertEquals("TJ07J3\"!b_9T#L", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      String string0 = document0.data();
      assertEquals("", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tj07j3\"!b_9t#l", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07J3\"!b_9T#L\n </body>\n</html>", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertEquals("TJ07J3\"!b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tj07j3\"!b_9t#l", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("TJ07J3\"!b_9T#L", document0.location());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("#");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("#", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Document document1 = document0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      String string1 = document1.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = (Document)document0.toggleClass("<html>\n <head></head>\n <body></body>\n</html>");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#", document2.baseUri());
      
      Elements elements0 = document0.getElementsByClass("<html>\n <head></head>\n <body></body>\n</html>");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      // Undeclared exception!
      try { 
        Parser.parse((String) null, "Za+>0DH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document0 = parser1.parseInput("listing", "0");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("0", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document1.tagName("M");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.tagName());
      assertEquals("0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("m", document1.tagName());
      assertEquals("0", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("0", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("0", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("m", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      
      String string0 = document2.cssSelector();
      assertEquals("m", string0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.tagName());
      assertEquals("0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("m", document1.tagName());
      assertEquals("0", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("0", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("0", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("m", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Element element0 = document0.body();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.tagName());
      assertEquals("0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("0", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      
      String string2 = document1.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  listing \n </body>\n</html>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(string2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.tagName());
      assertEquals("0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("m", document1.tagName());
      assertEquals("0", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document3 = (Document)document1.toggleClass("LEgb+U<_c`;GE<1%");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.tagName());
      assertEquals("0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("m", document1.tagName());
      assertEquals("0", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("m", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("0", document3.baseUri());
      assertEquals("0", document3.location());
      assertFalse(document3.isBlock());
      
      Elements elements0 = document1.getElementsByClass(":containsData");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.tagName());
      assertEquals("0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("m", document1.tagName());
      assertEquals("0", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document4 = Parser.parse("yQ~m~:", "Za+>0DH");
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotNull(document4);
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Za+>0DH", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Za+>0DH", document4.baseUri());
      assertFalse(document4.isBlock());
      
      String string3 = document4.cssSelector();
      assertEquals("#root", string3);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotNull(string3);
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Za+>0DH", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Za+>0DH", document4.baseUri());
      assertFalse(document4.isBlock());
      
      boolean boolean1 = document1.hasClass("0");
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(boolean1 == boolean0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("m", document0.tagName());
      assertEquals("0", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("m", document1.tagName());
      assertEquals("0", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell("t ");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.appendTo(document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("t ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      
      Elements elements0 = element0.previousElementSiblings();
      assertSame(element0, element1);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Elements elements1 = element1.parents();
      assertFalse(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("t ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document0 = Document.createShell("iframe");
      assertNotNull(document0);
      assertEquals("iframe", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("iframe", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("iframe", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("iframe", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("iframe", element0.baseUri());
      assertTrue(element0.isBlock());
      
      String string1 = element0.toString();
      assertEquals("<body></body>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("iframe", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("iframe", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("iframe", element0.baseUri());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.toggleClass("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("iframe", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("iframe", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("iframe", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("iframe", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      
      String string2 = document0.cssSelector();
      assertEquals("#root", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("iframe", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("iframe", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = document0.parser(parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("iframe", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("iframe", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("iframe", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("iframe", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      Elements elements0 = document1.getElementsByAttributeValueEnding("t ", "AfterDoctypePublicKeyword");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertEquals("iframe", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("iframe", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("iframe", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("iframe", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000095': unexpected token at '@0000000095'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("uQq}I/[TPWfM!", " > ");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      DataNode dataNode0 = DataNode.createFromEncoded("uQq}I/[TPWfM!", (String) null);
      assertNotNull(dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      
      DataNode dataNode1 = dataNode0.setWholeData("uQq}I/[TPWfM!");
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertNotNull(dataNode1);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals(0, dataNode1.siblingIndex());
      assertFalse(dataNode1.hasParent());
      
      Document document1 = (Document)document0.prependChild(dataNode1);
      assertSame(document0, document1);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, dataNode0.siblingIndex());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("#data", dataNode1.nodeName());
      assertTrue(dataNode1.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" > ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(" > ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      Parser parser1 = Parser.htmlParser();
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser1, parser0);
      assertNotNull(parser1);
      assertFalse(parser1.isTrackErrors());
      
      Document document2 = document0.parser(parser1);
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser0, parser1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(parser1, parser0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(" > ", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals(" > ", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      
      Elements elements0 = document2.getElementsContainingOwnText("H>Ch=<bDKA:l~v)E");
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser1.equals((Object)parser0));
      assertNotSame(parser0, parser1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(parser1, parser0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(" > ", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals(" > ", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("TJ07D3\"]b_9T#L", "n3af,'s%6t/h7y{_|qh");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotNull(document_OutputSettings3);
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      
      Document document1 = document0.outputSettings(document_OutputSettings3);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.baseUri());
      
      Document document2 = (Document)document1.tagName("TJ07D3\"]b_9T#L");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tj07d3\"]b_9t#l", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals("tj07d3\"]b_9t#l", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tj07d3\"]b_9t#l", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("n3af,'s%6t/h7y{_|qh", document2.location());
      assertEquals(1, document2.childNodeSize());
      
      String string0 = document2.cssSelector();
      assertEquals("tj07d3\"]b_9t#l", string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tj07d3\"]b_9t#l", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals("tj07d3\"]b_9t#l", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("tj07d3\"]b_9t#l", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("n3af,'s%6t/h7y{_|qh", document2.location());
      assertEquals(1, document2.childNodeSize());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Element element0 = document0.body();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tj07d3\"]b_9t#l", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", element0.baseUri());
      
      String string2 = document0.toString();
      assertEquals("<html>\n<head></head>\n<body>\nTJ07D3\"]b_9T#L\n</body>\n</html>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(string2);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tj07d3\"]b_9t#l", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.location());
      assertFalse(document0.isBlock());
      
      Element element1 = element0.toggleClass("");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tj07d3\"]b_9t#l", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("n3af,'s%6t/h7y{_|qh", element1.baseUri());
      
      Elements elements0 = document0.getElementsByClass(")ws.z");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tj07d3\"]b_9t#l", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      String string3 = document1.cssSelector();
      assertEquals("tj07d3\"]b_9t#l", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(string3);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tj07d3\"]b_9t#l", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals("tj07d3\"]b_9t#l", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.baseUri());
      
      Elements elements1 = document1.getElementsByAttributeValueEnding("?^rd$oqbn%&vs){", "2KW");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tj07d3\"]b_9t#l", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals("tj07d3\"]b_9t#l", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      String string4 = document1.cssSelector();
      assertEquals("tj07d3\"]b_9t#l", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(string4);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tj07d3\"]b_9t#l", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals("tj07d3\"]b_9t#l", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("n3af,'s%6t/h7y{_|qh", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?^rd$oqbn%&vs){");
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      
      String string0 = document0.cssSelector();
      assertEquals("^tm|&u@", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Element element0 = document1.body();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^tm|&u@", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      String string2 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document1);
      assertNotNull(string2);
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document2 = (Document)document0.toggleClass(")ws.z");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals("^tm|&u@", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("^tm|&u@", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      
      Elements elements0 = document2.getElementsByClass(")ws.z");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(elements0);
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals("^tm|&u@", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("^tm|&u@", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      String string3 = document1.cssSelector();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(string3);
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      
      Elements elements1 = document2.getElementsByAttributeValueEnding("^tm|&u@", "AfterDoctypePublicKeyword");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals("^tm|&u@", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("^tm|&u@", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      String string4 = element0.cssSelector();
      assertEquals("html > body", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(string4);
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^tm|&u@", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2", "Fx>]rz}W5M'");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Fx>]rz}W5M'", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Fx>]rz}W5M'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("Fx>]rz}W5M'", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Fx>]rz}W5M'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Fx>]rz}W5M'", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.doClone(document0);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("Fx>]rz}W5M'", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Fx>]rz}W5M'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Fx>]rz}W5M'", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.tagName());
      assertEquals("Fx>]rz}W5M'", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element1);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("Fx>]rz}W5M'", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Fx>]rz}W5M'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Fx>]rz}W5M'", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("TJ07D3\"]b_9T#L");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document1.tagName("TJ07D3\"]b_9T#L");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document2.tagName());
      
      String string0 = document0.cssSelector();
      assertEquals("TJ07D3\"]b_9T#L", string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Element element0 = document0.body();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      
      String string2 = document1.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L \n </body>\n</html>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(string2);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Document document3 = (Document)document2.toggleClass("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L \n </body>\n</html>");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document2.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals("TJ07D3\"]b_9T#L", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      
      String string3 = document1.cssSelector();
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(string3);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("^tm|b&u@", "AfterDoctypePublicKeyword");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      List<Node> list0 = document2.childNodesCopy();
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document2.tagName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      String string4 = document1.cssSelector();
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(string4);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Element element1 = document3.wrap("TJ07D3\"]b_9T#L.java.lang.String@0000000170");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document2.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals("TJ07D3\"]b_9T#L", document3.tagName());
      assertEquals(1, document3.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = ")ws.Z";
      Element element0 = new Element(")ws.Z");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(")ws.Z", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(")ws.Z", element0.tagName());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      String string1 = ",WT-J b*]\"z#6";
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      
      try { 
        element0.outerHtmlTail(pipedWriter0, 66, document_OutputSettings3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      
      document0.reparentChild(document0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      // Undeclared exception!
      document0.appendElement("KV=]%GU;H-2('4${");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TJ07D3\"]b_9T#L", "TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = Document.createShell("`wozc'.o'~e");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("`wozc'.o'~e", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("`wozc'.o'~e", document1.baseUri());
      
      document1.childNodes = null;
      assertEquals("`wozc'.o'~e", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("`wozc'.o'~e", document1.baseUri());
      
      // Undeclared exception!
      try { 
        document1.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("t ", "t ");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("t ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.baseUri());
      
      Document document1 = (Document)document0.prependText("t ");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("t ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("t ", document1.location());
      assertFalse(document1.isBlock());
      
      String string0 = document0.text();
      assertEquals("t t", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("t ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.baseUri());
      
      String string1 = document1.data();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("t ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("t ", document1.location());
      assertFalse(document1.isBlock());
      
      Element element0 = document1.body();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("t ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("t ", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("t ", element0.baseUri());
      assertEquals("body", element0.tagName());
      
      Document document2 = (Document)document0.toggleClass("t t");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("t ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("t ", document2.baseUri());
      assertEquals("t ", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      
      Element element1 = document0.getElementById("[A/");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNull(element1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("t ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.baseUri());
      
      String string2 = document0.className();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(string2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("t ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TJ07D3\"]b_9T#L", "TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      document0.siblingIndex = (-515);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals((-515), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = document0.hasClass("head");
      assertFalse(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals((-515), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.html("Did not find balanced marker at '");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals((-515), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals((-515), document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      
      Elements elements0 = document0.getElementsMatchingText("               ");
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals((-515), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("tn", "tn");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tn", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      String string0 = document1.text();
      assertEquals("tn tn", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      String string1 = document0.data();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertSame(document0, document1);
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("tn", element0.baseUri());
      assertEquals("body", element0.nodeName());
      
      element0.setSiblingIndex((-3643));
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals((-3643), element0.siblingIndex());
      assertEquals("tn", element0.baseUri());
      assertEquals("body", element0.nodeName());
      
      // Undeclared exception!
      try { 
        document1.getElementById("tn tn");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.reparentChild(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document0.getElementsByAttribute("org.jsoup.internal.Normalizer");
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      String string0 = document0.text();
      assertEquals(";wL/~e", string0);
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.toggleClass(";wL/~e");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(";wL/~e", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(";wL/~e", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("`V*o+Ufe,]t[c");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("`V*o+Ufe,]t[c", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`V*o+Ufe,]t[c", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = document0.parser(parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("`V*o+Ufe,]t[c", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`V*o+Ufe,]t[c", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("`V*o+Ufe,]t[c", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("`V*o+Ufe,]t[c", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = Parser.parseBodyFragment("org.jsoup.nodes.DataNode", ", currentElement=");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(", currentElement=", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(", currentElement=", document2.location());
      assertEquals("#root", document2.tagName());
      
      Document document3 = (Document)document1.attr("#root", (String) null);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("`V*o+Ufe,]t[c", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`V*o+Ufe,]t[c", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("`V*o+Ufe,]t[c", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("`V*o+Ufe,]t[c", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("`V*o+Ufe,]t[c", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("`V*o+Ufe,]t[c", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      Elements elements0 = document1.getAllElements();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("`V*o+Ufe,]t[c", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`V*o+Ufe,]t[c", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("`V*o+Ufe,]t[c", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("`V*o+Ufe,]t[c", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document4 = Parser.parse("org.jsoup.nodes.DataNode", "%j6*,`~*/TZUnJ");
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      assertEquals("%j6*,`~*/TZUnJ", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("%j6*,`~*/TZUnJ", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("tn", "tn");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("tn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("tn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^Ttm|Bu@");
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("^Ttm|Bu@");
      assertNotNull(document0);
      assertEquals("^Ttm|Bu@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("^Ttm|Bu@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Document document1 = Parser.parseBodyFragment("^Ttm|Bu@", "^Ttm|Bu@");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^Ttm|Bu@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^Ttm|Bu@", document1.baseUri());
      
      Element element0 = document0.body();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(element0);
      assertEquals("^Ttm|Bu@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("^Ttm|Bu@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("^Ttm|Bu@", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      List<TextNode> list0 = element0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(list0);
      assertEquals("^Ttm|Bu@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("^Ttm|Bu@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("^Ttm|Bu@", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Element element1 = element0.prepend("^Ttm|Bu@");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("^Ttm|Bu@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("^Ttm|Bu@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("^Ttm|Bu@", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("^Ttm|Bu@", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      
      String string0 = document1.wholeText();
      assertEquals("^Ttm|Bu@", string0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(string0);
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^Ttm|Bu@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^Ttm|Bu@", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t ", "t ");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("t ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.tagName("J");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("j", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("t ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("j", element0.nodeName());
      assertEquals("t ", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("j", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("j", element1.tagName());
      assertFalse(element1.isBlock());
      
      Document document1 = document0.parser((Parser) null);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("t ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t ", document1.baseUri());
      
      boolean boolean0 = document1.hasText();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("t ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t ", document1.baseUri());
      
      Elements elements0 = document1.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("t ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("t ", document1.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Element element0 = new Element(")ws.Z");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(")ws.Z", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(")ws.Z", element0.nodeName());
      
      Elements elements0 = element0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(")ws.Z", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(")ws.Z", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput(")ws.Z", ",WT-J b*]\"z#6");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(",WT-J b*]\"z#6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.doSetBaseUri("jd0aC.");
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(")ws.Z", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(")ws.Z", element0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(",WT-J b*]\"z#6", document1.location());
      assertEquals("jd0aC.", document1.baseUri());
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("jd0aC.", "I{u!r|");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Document document2 = (Document)document0.val("jd0aC.");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(",WT-J b*]\"z#6", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("jd0aC.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      
      List<DataNode> list1 = document2.dataNodes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(list1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(",WT-J b*]\"z#6", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("jd0aC.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Elements elements2 = document0.getElementsByAttributeValueMatching(")ws.Z", "LN<&+?qdOtis");
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      boolean boolean0 = document2.hasText();
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(",WT-J b*]\"z#6", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("jd0aC.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      
      Elements elements3 = document2.previousElementSiblings();
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotNull(elements3);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(",WT-J b*]\"z#6", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("jd0aC.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      
      Element element1 = document2.lastElementSibling();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNull(element1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(",WT-J b*]\"z#6", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("jd0aC.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tn", "tn");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = Parser.parseBodyFragmentRelaxed("Y)1?", "tn");
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tn", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("tn", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      
      boolean boolean0 = document2.hasText();
      assertTrue(boolean0);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("tn", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("tn", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      
      Elements elements0 = document1.parents();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      MockFile mockFile0 = new MockFile("tn");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(19);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(19, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(19, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      
      Charset charset0 = document1.charset();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotNull(charset0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(19, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(19, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(19, document_OutputSettings2.indentAmount());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(19, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(19, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(19, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(19, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      
      // Undeclared exception!
      document1.outerHtmlHead(mockFileWriter0, 1080, document_OutputSettings3);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "TJ07D3\"]b_9T#L";
      Document document0 = Parser.parseBodyFragmentRelaxed("TJ07D3\"]b_9T#L", "TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t ", "t ");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("t ", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("t ", "I{u!r|");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document1 = (Document)document0.val("t ");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("t ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("t ", document1.location());
      
      Elements elements1 = document0.getElementsByAttributeValueMatching("<Hp=L+_q", "#WXZ~a2k ");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("t ", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("t ", document2.baseUri());
      
      Element element1 = document2.body();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("t ", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("t ", document2.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("t ", element1.baseUri());
      
      String string0 = element0.toString();
      assertEquals("<body>\n t \n</body>", string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element1);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("t ", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      
      String string1 = document2.cssSelector();
      assertEquals("#root", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("t ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("t ", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("t ", document2.baseUri());
      
      Document document3 = Parser.parseBodyFragment("t ", "<body>\n t \n</body>");
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("<body>\n t \n</body>", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("<body>\n t \n</body>", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      
      Element element2 = document3.head();
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("<body>\n t \n</body>", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("<body>\n t \n</body>", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("<body>\n t \n</body>", element2.baseUri());
      
      Element element3 = element2.nextElementSibling();
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element3);
      assertNotSame(element2, element1);
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotNull(element3);
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("<body>\n t \n</body>", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("<body>\n t \n</body>", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("<body>\n t \n</body>", element2.baseUri());
      assertTrue(element3.hasParent());
      assertEquals("body", element3.nodeName());
      assertEquals(1, element3.siblingIndex());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertEquals("<body>\n t \n</body>", element3.baseUri());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("tn", "tn");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("tn", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Element element1 = element0.appendText("org.jsoup.parser.Tag");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("tn", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("tn", element1.baseUri());
      assertEquals("body", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parse("EndT", "async");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("async", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("async", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsMatchingOwnText("async");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("async", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("async", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = Document.createShell("OC2;`q$^Y:d");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("OC2;`q$^Y:d", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("OC2;`q$^Y:d", document1.baseUri());
      
      String string0 = document1.data();
      assertEquals("", string0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(string0);
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("OC2;`q$^Y:d", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("OC2;`q$^Y:d", document1.baseUri());
      
      Element element0 = document1.body();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(element0);
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("OC2;`q$^Y:d", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("OC2;`q$^Y:d", document1.baseUri());
      assertEquals("OC2;`q$^Y:d", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.getElementById("async");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNull(element1);
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("OC2;`q$^Y:d", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("OC2;`q$^Y:d", document1.baseUri());
      assertEquals("OC2;`q$^Y:d", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      Element element2 = element0.parent();
      assertFalse(document1.equals((Object)document0));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("OC2;`q$^Y:d", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("OC2;`q$^Y:d", document1.baseUri());
      assertEquals("OC2;`q$^Y:d", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("OC2;`q$^Y:d", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("html", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("`wozc'.o'~e", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = document0.hasClass("");
      assertFalse(boolean0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.prependChild(document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("`wozc'.o'~e"));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = element1.childNodeSize();
      assertEquals(2, int0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      
      Tag tag0 = document0.tag();
      assertNotNull(tag0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      
      // Undeclared exception!
      try { 
        element0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tn", "tn");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      
      List<TextNode> list0 = document0.textNodes();
      assertSame(document0, document1);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = document0.text();
      assertEquals("tn tn", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      
      boolean boolean0 = document1.hasText();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)4;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)106, (byte) (-117), (byte) (-3), (byte)83, (byte) (-1), (byte)3, (byte)4}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      boolean boolean2 = document1.hasClass("h=WcqU#5$Qm");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      
      Elements elements0 = document1.getAllElements();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document2 = (Document)document0.prependChild(document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("tn", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("tn", document2.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals("tn", document1.location());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "2dsKlw>(6DNXw5z))g";
      Document document0 = Document.createShell("2dsKlw>(6DNXw5z))g");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("2dsKlw>(6DNXw5z))g", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("2dsKlw>(6DNXw5z))g", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      StringWriter stringWriter0 = new StringWriter(2737);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringWriter0, (-1985), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Element element0 = new Element(")ws.Z");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(")ws.Z", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(")ws.Z", element0.tagName());
      
      Elements elements0 = element0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(")ws.Z", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(")ws.Z", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput(")ws.Z", ",WT-J b*]\"z#6");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(",WT-J b*]\"z#6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      document0.doSetBaseUri("jd0aC.");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("jd0aC.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("jd0aC.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Element element1 = new Element(")ws.Z");
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertEquals(")ws.Z", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(")ws.Z", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(")ws.Z", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(")ws.Z", element0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(",WT-J b*]\"z#6", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("jd0aC.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("jd0aC.", "I{u!r|");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Document document2 = (Document)document0.val("jd0aC.");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("jd0aC.", document2.baseUri());
      assertEquals(",WT-J b*]\"z#6", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      
      Elements elements2 = document0.getElementsByAttributeValueMatching(")ws.Z", "LN<&+?qdOtis");
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element2 = document0.body();
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals(",WT-J b*]\"z#6", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  )ws.Z\n </body>\n</html>", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element3 = document1.nextElementSibling();
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNull(element3);
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(")ws.Z", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(")ws.Z", element0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(",WT-J b*]\"z#6", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("jd0aC.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document3 = (Document)document2.before("V]]G&9f[.b6!E");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("jd0aC.", document2.baseUri());
      assertEquals(",WT-J b*]\"z#6", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(",WT-J b*]\"z#6", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("jd0aC.", document3.baseUri());
      
      Element element4 = element1.clone();
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertNotSame(element4, element0);
      assertNotSame(element4, element2);
      assertNotSame(element4, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element4);
      assertNotSame(element1, element2);
      assertNotNull(element4);
      assertFalse(element4.isBlock());
      assertEquals("", element4.baseUri());
      assertFalse(element4.hasParent());
      assertEquals(")ws.Z", element4.tagName());
      assertEquals(0, element4.siblingIndex());
      assertEquals(")ws.Z", element4.nodeName());
      assertEquals(0, element4.childNodeSize());
      assertEquals(")ws.Z", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals(")ws.Z", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      
      element0.reparentChild(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = element0.getElementsByAttribute("Uk,Qn wCQIDRf/iB9g0");
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Comment comment0 = new Comment("Uk,Qn wCQIDRf/iB9g0", "->e2=;5");
      assertNotNull(comment0);
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNotNull(xmlDeclaration0);
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      Document document1 = (Document)document0.before((Node) xmlDeclaration0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      
      // Undeclared exception!
      document0.ownerDocument();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("T$vIs*k%-k");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("T$vIs*k%-k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("T$vIs*k%-k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.tagName("s?2U,wFkh\"4-l.Ic");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("s?2u,wfkh\"4-l.ic", document0.tagName());
      assertEquals("T$vIs*k%-k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("T$vIs*k%-k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("T$vIs*k%-k", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("T$vIs*k%-k", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("s?2u,wfkh\"4-l.ic", document1.tagName());
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document1.tagName("textarea");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("T$vIs*k%-k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("T$vIs*k%-k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("T$vIs*k%-k", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("T$vIs*k%-k", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("T$vIs*k%-k", document2.baseUri());
      assertEquals("T$vIs*k%-k", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("textarea", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      String string0 = document0.baseUri();
      assertEquals("T$vIs*k%-k", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("T$vIs*k%-k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("T$vIs*k%-k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      String string1 = document0.val();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(string1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("T$vIs*k%-k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("T$vIs*k%-k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      String string2 = document0.id();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(string2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("T$vIs*k%-k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("T$vIs*k%-k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Document document3 = (Document)document0.val("q9/vsy7y+f#&p\"+sbf");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotNull(document3);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("T$vIs*k%-k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("T$vIs*k%-k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document3.hasParent());
      assertEquals("T$vIs*k%-k", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("textarea", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("T$vIs*k%-k", document3.baseUri());
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("T$vIs*k%-k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("T$vIs*k%-k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("noframes", "TJ07D3\"]b_9T#L");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      
      Element element0 = document0.head();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(element0);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      
      Element element1 = document1.getElementById("Invalid character reference: %s");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNull(element1);
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      
      List<DataNode> list0 = document1.dataNodes();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(list0);
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Document document2 = (Document)document0.insertChildren((-1), (Collection<? extends Node>) list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      
      Document document3 = element0.ownerDocument();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      
      Node[] nodeArray0 = new Node[0];
      Document document4 = (Document)document3.insertChildren((-1), nodeArray0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertNotNull(document4);
      assertEquals(0, nodeArray0.length);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      
      Attributes attributes0 = document1.attributes();
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotNull(attributes0);
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, attributes0.size());
      
      Element element2 = element0.lastElementSibling();
      assertFalse(document0.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(element0, element2);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", element2.baseUri());
      
      CDataNode cDataNode0 = new CDataNode("declare");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      CDataNode cDataNode1 = (CDataNode)cDataNode0.shallowClone();
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      assertNotNull(cDataNode1);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertFalse(cDataNode1.hasParent());
      assertEquals(0, cDataNode1.siblingIndex());
      
      boolean boolean1 = Element.preserveWhitespace(cDataNode1);
      assertFalse(boolean1);
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(cDataNode0, cDataNode1);
      assertNotSame(cDataNode1, cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertFalse(cDataNode1.hasParent());
      assertEquals(0, cDataNode1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Element element0 = new Element(")ws.Z");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(")ws.Z", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(")ws.Z", element0.nodeName());
      
      Elements elements0 = element0.previousElementSiblings();
      assertNotNull(elements0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(")ws.Z", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(")ws.Z", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput(")ws.Z", ",WT-J b*]\"z#6");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(",WT-J b*]\"z#6", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      document0.doSetBaseUri("jd0aC.");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  )ws.Z\n </body>\n</html>", string0);
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Element element1 = new Element("LN<&+?qdOtis");
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertEquals("LN<&+?qdOtis", element1.tagName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("LN<&+?qdOtis", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      
      Document document1 = (Document)document0.appendTo(element1);
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("LN<&+?qdOtis", element1.tagName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("LN<&+?qdOtis", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("jd0aC.", document1.baseUri());
      assertEquals(",WT-J b*]\"z#6", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("jd0aC.", "J'jiJ+$!'!iRm4,");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Document document2 = (Document)document0.val(")ws.Z");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(",WT-J b*]\"z#6", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("jd0aC.", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      
      Elements elements2 = document0.getElementsByAttributeValueMatching(")ws.Z", ",WT-J b*]\"z#6");
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element2 = document0.body();
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(",WT-J b*]\"z#6", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      
      String string1 = document1.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  )ws.Z\n </body>\n</html>", string1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertTrue(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(string1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("LN<&+?qdOtis", element1.tagName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("LN<&+?qdOtis", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("jd0aC.", document1.baseUri());
      assertEquals(",WT-J b*]\"z#6", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      
      String string2 = document0.cssSelector();
      assertEquals("LN<&+?qdOtis > #root", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(string2);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("jd0aC.", document0.baseUri());
      assertEquals(",WT-J b*]\"z#6", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document3 = Parser.parseBodyFragment("<html>\n <head></head>\n <body>\n  )ws.Z\n </body>\n</html>", "org.jsoup.select.Evaluator$AttributeWithValueStarting");
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotNull(document3);
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      Element element3 = document3.nextElementSibling();
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNull(element3);
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      document0.reparentChild(document0);
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document0.siblingElements();
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = document0.ownText();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element1 = document0.body();
      assertNotNull(element1);
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      
      // Undeclared exception!
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      
      document0.doSetBaseUri("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document3 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("Ta29o", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("Ta29o", document3.baseUri());
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Document document4 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertEquals("Ta29o", document4.baseUri());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("Ta29o", document4.location());
      
      String string2 = document2.id();
      assertEquals("", string2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotNull(string2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      
      Document document5 = (Document)document0.val("CONTINUE");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotNull(document5);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document5.hasParent());
      assertEquals("Ta29o", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      
      int int0 = document2.childNodeSize();
      assertEquals(1, int0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document5));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document5);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      
      Document document6 = (Document)document2.after("w[");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document0));
      assertNotSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document6);
      assertNotSame(document2, document5);
      assertSame(document6, document2);
      assertSame(document6, document1);
      assertNotSame(document6, document5);
      assertNotSame(document6, document0);
      assertSame(document6, document3);
      assertSame(document6, document4);
      assertNotNull(document6);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Ta29o", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.siblingIndex());
      assertEquals("Ta29o", document6.baseUri());
      
      // Undeclared exception!
      try { 
        document5.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Element element1 = element0.html(";wL/~e");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      
      Elements elements0 = element0.previousElementSiblings();
      assertSame(element0, element1);
      assertNotNull(elements0);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element2 = element0.nextElementSibling();
      assertSame(element0, element1);
      assertNull(element2);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element3 = element0.clone();
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertNotSame(element0, element3);
      assertSame(element0, element1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotNull(element3);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertFalse(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertEquals(";wL/~e", element3.baseUri());
      assertEquals("body", element3.nodeName());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      
      document0.reparentChild(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = Parser.parse("6o(ZeYob8MB9", "Q]\"x^XP4[");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Q]\"x^XP4[", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Q]\"x^XP4[", document1.baseUri());
      
      Document document2 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Q]\"x^XP4[", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Q]\"x^XP4[", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Q]\"x^XP4[", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("Q]\"x^XP4[", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      
      Elements elements1 = document1.siblingElements();
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Q]\"x^XP4[", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Q]\"x^XP4[", document1.baseUri());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      
      List<TextNode> list0 = document1.textNodes();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(list0);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Q]\"x^XP4[", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Q]\"x^XP4[", document1.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Elements elements2 = document0.previousElementSiblings();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      boolean boolean0 = document1.hasText();
      assertTrue(boolean0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Q]\"x^XP4[", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Q]\"x^XP4[", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      
      document0.doSetBaseUri("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document3 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("Ta29o", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document4 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Ta29o", document4.location());
      
      Elements elements1 = document2.getElementsByAttributeValueMatching("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Element element0 = document2.body();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      String string2 = document2.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string2);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(string2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      
      Elements elements2 = document1.getElementsContainingOwnText("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      Element element1 = element0.attr("org.jsoup.select.Evaluator$AttributeWithValueEnding", "gp");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(element1, element0);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(element0, element1);
      assertNotNull(element1);
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("Ta29o", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      // Undeclared exception!
      try { 
        element0.outerHtmlHead((Appendable) null, (-1763), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      document0.doSetBaseUri("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document3 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("Ta29o", document3.baseUri());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Ta29o", document3.location());
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Document document4 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals("Ta29o", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      
      Elements elements2 = document2.getElementsByAttributeValueMatching("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Element element0 = document2.body();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      String string2 = document2.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertNotNull(string2);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      String string3 = document4.cssSelector();
      assertEquals("#root", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotNull(string3);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals("Ta29o", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      
      Element element1 = document4.nextElementSibling();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals("Ta29o", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      
      Document document1 = new Document(" > ");
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(" > ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" > ", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      document0.reparentChild(document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(" > ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" > ", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements0 = document0.parents();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document1.siblingElements();
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(" > ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" > ", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      
      String string0 = document0.val();
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      
      boolean boolean1 = document1.hasClass("#ej|![jj_8*");
      assertFalse(boolean1);
      assertFalse(document1.equals((Object)document0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(document1, document0);
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(" > ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(" > ", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements2 = document0.getAllElements();
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      
      document0.doSetBaseUri("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string1);
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(list0);
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document3 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("Ta29o", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Ta29o", document3.location());
      
      Document document4 = (Document)document3.insertChildren(0, (Collection<? extends Node>) list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotNull(document4);
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("Ta29o", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Ta29o", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("Ta29o", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("Ta29o", document4.location());
      assertFalse(document4.isBlock());
      
      boolean boolean1 = document4.hasText();
      assertTrue(boolean1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("Ta29o", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Ta29o", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("Ta29o", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("Ta29o", document4.location());
      assertFalse(document4.isBlock());
      
      Tag tag0 = Tag.valueOf("Z]lyW#MzEP=A0G");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("Z]lyW#MzEP=A0G", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("Z]lyW#MzEP=A0G", tag0.toString());
      
      Element element0 = new Element(tag0, "b&L0#$k$<K[nEH");
      assertNotNull(element0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("Z]lyW#MzEP=A0G", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("Z]lyW#MzEP=A0G", tag0.toString());
      assertEquals(0, element0.siblingIndex());
      assertEquals("b&L0#$k$<K[nEH", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z]lyW#MzEP=A0G", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("Z]lyW#MzEP=A0G", element0.nodeName());
      assertFalse(element0.isBlock());
      
      Document document5 = element0.ownerDocument();
      assertNull(document5);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("Z]lyW#MzEP=A0G", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("Z]lyW#MzEP=A0G", tag0.toString());
      assertEquals(0, element0.siblingIndex());
      assertEquals("b&L0#$k$<K[nEH", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Z]lyW#MzEP=A0G", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("Z]lyW#MzEP=A0G", element0.nodeName());
      assertFalse(element0.isBlock());
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[0] = (Node) document2;
      // Undeclared exception!
      try { 
        document1.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "head");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Ta29o", document4.location());
      
      Document document5 = (Document)document0.empty();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotNull(document5);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(0, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Ta29o", document5.location());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      Document document6 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document5));
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document6);
      assertSame(document6, document1);
      assertNotSame(document6, document0);
      assertNotSame(document6, document5);
      assertSame(document6, document2);
      assertSame(document6, document3);
      assertSame(document6, document4);
      assertNotNull(document6);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document6.location());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document6.childNodeSize());
      assertEquals(1, document6.siblingIndex());
      assertEquals("Ta29o", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      
      Elements elements3 = document6.previousElementSiblings();
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document5));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document6);
      assertSame(document6, document1);
      assertNotSame(document6, document0);
      assertNotSame(document6, document5);
      assertSame(document6, document2);
      assertSame(document6, document3);
      assertSame(document6, document4);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotNull(elements3);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document6.location());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document6.childNodeSize());
      assertEquals(1, document6.siblingIndex());
      assertEquals("Ta29o", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      
      boolean boolean2 = document2.hasText();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document6);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      Document document7 = (Document)document5.tagName("head");
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document7);
      assertNotSame(document7, document2);
      assertSame(document7, document0);
      assertNotSame(document7, document6);
      assertSame(document7, document5);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertNotSame(document7, document4);
      assertNotSame(document5, document4);
      assertNotSame(document5, document6);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document7);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotNull(document7);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("head", document0.tagName());
      assertTrue(document0.isBlock());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals("Ta29o", document7.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertTrue(document7.isBlock());
      assertEquals(0, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertFalse(document7.hasParent());
      assertEquals("Ta29o", document7.location());
      assertEquals("head", document7.tagName());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(0, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertTrue(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Ta29o", document5.location());
      assertEquals("head", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      
      Document document8 = (Document)document2.doClone(document5);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document7);
      assertNotSame(document0, document8);
      assertNotSame(document8, document2);
      assertNotSame(document8, document1);
      assertNotSame(document8, document5);
      assertNotSame(document8, document7);
      assertNotSame(document8, document0);
      assertNotSame(document8, document6);
      assertNotSame(document8, document4);
      assertNotSame(document8, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document1, document8);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document7);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document1);
      assertNotSame(document2, document8);
      assertNotSame(document2, document0);
      assertSame(document2, document6);
      assertNotSame(document5, document4);
      assertNotSame(document5, document6);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document7);
      assertNotSame(document5, document8);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotNull(document8);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("head", document0.tagName());
      assertTrue(document0.isBlock());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(1, document8.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals(1, document8.siblingIndex());
      assertEquals("#document", document8.nodeName());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.isBlock());
      assertEquals("Ta29o", document8.location());
      assertEquals("Ta29o", document8.baseUri());
      assertTrue(document8.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(0, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertTrue(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Ta29o", document5.location());
      assertEquals("head", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      
      String string1 = "&BAa'w_)08slwM?";
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("iframe", "&BAa'w_)08slwM?");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("/tmp/iframe0&BAa'w_)08slwM?", mockFile0.toString());
      assertEquals("iframe0&BAa'w_)08slwM?", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.format(locale0, "0", (Object[]) null);
      assertSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("/tmp/iframe0&BAa'w_)08slwM?", mockFile0.toString());
      assertEquals("iframe0&BAa'w_)08slwM?", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      Charset charset0 = document2.charset();
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document7);
      assertNotSame(document0, document8);
      assertSame(document1, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document4);
      assertNotSame(document1, document8);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document7);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertSame(document2, document1);
      assertNotSame(document2, document8);
      assertNotSame(document2, document0);
      assertSame(document2, document6);
      assertNotNull(charset0);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("head", document0.tagName());
      assertTrue(document0.isBlock());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream1, charset0);
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(outputStreamWriter0);
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("head", document0.tagName());
      assertTrue(document0.isBlock());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals("/tmp/iframe0&BAa'w_)08slwM?", mockFile0.toString());
      assertEquals("iframe0&BAa'w_)08slwM?", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(1L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      int int0 = 1666;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("head");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // head
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("noframes", "TJ07D3\"]b_9T#L");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      
      Element element0 = document0.head();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      
      Element element1 = document1.head();
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      
      element1.reparentChild(element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      
      Pattern pattern0 = Pattern.compile("noframes");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("noframes", pattern0.pattern());
      assertEquals("noframes", pattern0.toString());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("TJ07D3\"]b_9T#L", pattern0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, pattern0.flags());
      assertEquals("noframes", pattern0.pattern());
      assertEquals("noframes", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Elements elements1 = document1.parents();
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Elements elements2 = document0.siblingElements();
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      
      String string0 = element0.val();
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      
      boolean boolean1 = document0.hasClass("#");
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      
      // Undeclared exception!
      try { 
        element1.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "head");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document3.location());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotNull(document4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals("Ta29o", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertTrue(document4.hasParent());
      
      Document document5 = (Document)document0.empty();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotNull(document5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals(0, document5.childNodeSize());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Ta29o", document5.location());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      Document document6 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document6);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document6, document3);
      assertSame(document6, document1);
      assertNotSame(document6, document5);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertNotSame(document6, document0);
      assertNotNull(document6);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.siblingIndex());
      assertEquals(1, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("Ta29o", document6.location());
      assertEquals("Ta29o", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      
      Pattern pattern0 = Pattern.compile("78AW", 144);
      assertNotNull(pattern0);
      assertEquals(144, pattern0.flags());
      assertEquals("78AW", pattern0.pattern());
      assertEquals("78AW", pattern0.toString());
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertNotNull(predicate0);
      assertEquals(144, pattern0.flags());
      assertEquals("78AW", pattern0.pattern());
      assertEquals("78AW", pattern0.toString());
      
      Elements elements3 = document5.getElementsMatchingOwnText(pattern0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(document5, document6);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotNull(elements3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals(0, document5.childNodeSize());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Ta29o", document5.location());
      assertEquals(144, pattern0.flags());
      assertEquals("78AW", pattern0.pattern());
      assertEquals("78AW", pattern0.toString());
      
      Elements elements4 = document6.previousElementSiblings();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements3));
      assertFalse(elements4.equals((Object)elements0));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document6);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document6, document3);
      assertSame(document6, document1);
      assertNotSame(document6, document5);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertNotSame(document6, document0);
      assertNotNull(elements4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.siblingIndex());
      assertEquals(1, document6.childNodeSize());
      assertTrue(document6.hasParent());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("Ta29o", document6.location());
      assertEquals("Ta29o", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      
      boolean boolean2 = document2.hasText();
      assertTrue(boolean2);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document5));
      assertNotSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document6);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      
      Document document7 = (Document)document5.tagName("head");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document7);
      assertSame(document7, document5);
      assertNotSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertSame(document5, document7);
      assertNotSame(document5, document6);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotNull(document7);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertEquals("head", document0.tagName());
      assertTrue(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(0, document7.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.childNodeSize());
      assertEquals("Ta29o", document7.location());
      assertFalse(document7.hasParent());
      assertEquals("Ta29o", document7.baseUri());
      assertEquals("head", document7.tagName());
      assertTrue(document7.isBlock());
      assertEquals("head", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals(0, document5.childNodeSize());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Ta29o", document5.location());
      assertTrue(document5.isBlock());
      
      Document document8 = (Document)document5.appendText("V,cL>3*~O9,lGz");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document5.equals((Object)document6));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertSame(document0, document8);
      assertNotSame(document0, document4);
      assertNotSame(document0, document6);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document7);
      assertNotSame(document8, document4);
      assertSame(document8, document5);
      assertNotSame(document8, document6);
      assertNotSame(document8, document3);
      assertSame(document8, document7);
      assertSame(document8, document0);
      assertNotSame(document8, document2);
      assertNotSame(document8, document1);
      assertSame(document5, document7);
      assertNotSame(document5, document6);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertSame(document5, document8);
      assertNotSame(document5, document1);
      assertNotNull(document8);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertEquals("head", document0.tagName());
      assertTrue(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(1, document8.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("#document", document8.nodeName());
      assertEquals(0, document8.siblingIndex());
      assertEquals("Ta29o", document8.location());
      assertFalse(document8.hasParent());
      assertEquals("Ta29o", document8.baseUri());
      assertEquals("head", document8.tagName());
      assertTrue(document8.isBlock());
      assertEquals("head", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Ta29o", document5.location());
      assertTrue(document5.isBlock());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      
      document0.doSetBaseUri("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      
      String string2 = document1.wholeText();
      assertEquals("Ta29o", string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotNull(string2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("Ta29o", document3.baseUri());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Ta29o", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotNull(document4);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Ta29o", document4.location());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      
      Element element0 = document4.previousElementSibling();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Ta29o", document4.location());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.getElementById("ms{");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Ta29o", document4.location());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      
      Document document5 = (Document)element0.lastElementSibling();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertNotNull(document5);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document5.nodeName());
      assertEquals("Ta29o", document5.baseUri());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Ta29o", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Ta29o", document4.location());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      
      boolean boolean1 = Element.preserveWhitespace(document1);
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertTrue(boolean1 == boolean0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("2dsKlw>(6DNXw5z))g", "2dsKlw>(6DNXw5z))g");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("2dsKlw>(6DNXw5z))g", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("2dsKlw>(6DNXw5z))g", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(1, nodeArray0.length);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("2dsKlw>(6DNXw5z))g", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("2dsKlw>(6DNXw5z))g", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.nodelistChanged();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("2dsKlw>(6DNXw5z))g", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("2dsKlw>(6DNXw5z))g", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      document0.tagName("^tm|B&u@");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.removeClass("xmlns:");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      
      Element element2 = document0.nextElementSibling();
      assertNull(element2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.text();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1743);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1743, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1743, charBuffer0.limit());
      assertEquals(1743, charBuffer0.capacity());
      assertEquals(1743, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(98688);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(98688, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(98688, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(98688, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotNull(document_OutputSettings3);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(98688, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(98688, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(98688, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(98688, document_OutputSettings3.indentAmount());
      
      document0.outerHtmlHead(charBuffer0, (-1070), document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(7, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1736, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1743, charBuffer0.limit());
      assertEquals(1743, charBuffer0.capacity());
      assertEquals(1736, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(98688, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(98688, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(98688, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(98688, document_OutputSettings3.indentAmount());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.location());
      assertFalse(document1.hasParent());
      
      String string0 = document0.cssSelector();
      assertEquals("^tm|&u@", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Element element0 = document1.body();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("^tm|&u@", element0.baseUri());
      
      String string2 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document1);
      assertNotNull(string2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      Document document2 = (Document)document0.toggleClass(")ws.z");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("^tm|&u@", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("^tm|&u@", document2.tagName());
      
      String string3 = document1.cssSelector();
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(string3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.location());
      assertFalse(document1.hasParent());
      
      Elements elements0 = document2.getElementsByAttributeValueEnding("^tm|&u@", "AfterDoctypePublicKeyword");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("^tm|&u@", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("^tm|&u@", document2.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      
      Document document1 = element0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      
      Element element1 = document1.body();
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      
      Element element2 = element1.prependText(";wL/~e");
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(document1, document0);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = " > ";
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      
      Document document1 = (Document)document0.prependText(" > ");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      List<TextNode> list0 = document0.textNodes();
      assertSame(document0, document1);
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      String string1 = document1.text();
      assertEquals(">", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      Element element0 = document0.head();
      assertSame(document0, document1);
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(" > ", element0.baseUri());
      
      Element element1 = (Element)element0.nextSibling();
      assertFalse(element1.equals((Object)element0));
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(" > ", element0.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(" > ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      
      Element element2 = element0.after((Node) document0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertSame(document0, document1);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(" > ", element0.baseUri());
      assertEquals(" > ", element2.baseUri());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.is(">");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = new Document("tn");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.parser((Parser) null);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tn", document1.location());
      
      String string0 = document1.text();
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tn", document1.location());
      
      int int0 = document1.childNodeSize();
      assertEquals(0, int0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tn", document1.location());
      
      boolean boolean0 = document1.isBlock();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tn", document1.location());
      
      Elements elements0 = document1.getElementsByIndexLessThan(66);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tn", document1.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      
      document0.doSetBaseUri("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("Ta29o", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("Ta29o", document3.baseUri());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotNull(document4);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Ta29o", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("Ta29o", document4.baseUri());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      Document document5 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertNotNull(document5);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Ta29o", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals("Ta29o", document5.location());
      
      Elements elements3 = document2.getElementsByAttributeValueMatching("body", "CONTINUE");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotNull(elements3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Ta29o", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      
      boolean boolean1 = document1.hasText();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      Element element0 = document4.body();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Ta29o", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("Ta29o", document4.baseUri());
      
      String string2 = element0.toString();
      assertEquals("<body>\n Ta29o\n</body>", string2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotNull(string2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Ta29o", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("Ta29o", document4.baseUri());
      
      Document document6 = (Document)document0.toggleClass("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document6, document2);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotNull(document6);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(2, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.hasParent());
      assertEquals("Ta29o", document6.location());
      
      String string3 = document1.cssSelector();
      assertEquals("#root", string3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertNotNull(string3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      Elements elements4 = document6.getElementsByAttributeValueEnding("u!TZ", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements1));
      assertFalse(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements3));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document6, document2);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements1);
      assertNotNull(elements4);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals(2, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.hasParent());
      assertEquals("Ta29o", document6.location());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("^tm|&u@", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.location());
      
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document2 = (Document)document1.filter(nodeFilter0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("^tm|&u@", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^tm|&u@", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("^tm|&u@", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      
      String string0 = document0.cssSelector();
      assertEquals("^tm|&u@", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Elements elements0 = document1.getElementsByAttributeValueContaining("^tm|&u@", "^tm|&u@");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("^tm|&u@", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Elements elements1 = document1.getElementsContainingOwnText("PIgn>:rd`l.?pz3*x0F");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("^tm|&u@", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      boolean boolean0 = element0.hasSameValue(";wL/~e");
      assertFalse(boolean0);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.after((Node) document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      
      // Undeclared exception!
      try { 
        element1.is(";wL/~e");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ';wL/~e': unexpected token at ';wL/~e'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Uk,Qn wCQIDRf/iB9g0", "Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("<m0Pg6,QYevfv`", "<m0Pg6,QYevfv`");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("<m0Pg6,QYevfv`", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<m0Pg6,QYevfv`", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Element element0 = document0.head();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(element0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      
      Element element1 = element0.getElementById("<m0Pg6,QYevfv`");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNull(element1);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      
      List<DataNode> list0 = document1.dataNodes();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(list0);
      assertEquals("<m0Pg6,QYevfv`", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<m0Pg6,QYevfv`", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Document document2 = (Document)document0.insertChildren((-1), (Collection<? extends Node>) list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("<m0Pg6,QYevfv`", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<m0Pg6,QYevfv`", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      
      boolean boolean0 = document2.hasText();
      assertTrue(boolean0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("<m0Pg6,QYevfv`", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<m0Pg6,QYevfv`", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      
      Document document3 = document2.ownerDocument();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("<m0Pg6,QYevfv`", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<m0Pg6,QYevfv`", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      Document document4 = document1.normalise();
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      assertEquals("<m0Pg6,QYevfv`", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<m0Pg6,QYevfv`", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<m0Pg6,QYevfv`", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("<m0Pg6,QYevfv`", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      
      Document document5 = document4.clone();
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document5);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotNull(document5);
      assertEquals("<m0Pg6,QYevfv`", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<m0Pg6,QYevfv`", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<m0Pg6,QYevfv`", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("<m0Pg6,QYevfv`", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("<m0Pg6,QYevfv`", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals("<m0Pg6,QYevfv`", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      
      Element element2 = document5.createElement("Invalid character reference: %s");
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document5);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      assertEquals("<m0Pg6,QYevfv`", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<m0Pg6,QYevfv`", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<m0Pg6,QYevfv`", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("<m0Pg6,QYevfv`", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("<m0Pg6,QYevfv`", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals("<m0Pg6,QYevfv`", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("Invalid character reference: %s", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("<m0Pg6,QYevfv`", element2.baseUri());
      assertEquals("Invalid character reference: %s", element2.nodeName());
      assertFalse(element2.hasParent());
      
      nodeArray0[1] = (Node) element2;
      nodeArray0[2] = (Node) document3;
      nodeArray0[3] = (Node) document2;
      nodeArray0[4] = (Node) document3;
      nodeArray0[5] = (Node) document0;
      Document document6 = Parser.parseBodyFragment("<m0Pg6,QYevfv`", "<m0Pg6,QYevfv`");
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertNotSame(document6, document2);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document0);
      assertNotSame(document6, document3);
      assertNotNull(document6);
      assertEquals("<m0Pg6,QYevfv`", document6.location());
      assertFalse(document6.hasParent());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals("<m0Pg6,QYevfv`", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      
      nodeArray0[6] = (Node) document6;
      // Undeclared exception!
      try { 
        document1.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = new Document(";wL/~e");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      Element element0 = document0.prependElement("ta29o");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ta29o", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("ta29o", element0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "head");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      
      Document document3 = document0.outputSettings(document_OutputSettings2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("Ta29o", document3.location());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document4 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("Ta29o", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Document document5 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotNull(document5);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("Ta29o", document5.location());
      assertTrue(document5.hasParent());
      assertEquals(1, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document6 = (Document)document0.empty();
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document4);
      assertNotSame(document6, document2);
      assertNotSame(document6, document1);
      assertSame(document6, document0);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertSame(document6, document3);
      assertNotNull(document6);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertNull(document6.baseUri());
      assertFalse(document6.hasParent());
      assertEquals("Ta29o", document6.location());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals("#root", document6.tagName());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document4);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      Document document7 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertNotSame(document1, document6);
      assertNotSame(document1, document3);
      assertSame(document1, document7);
      assertSame(document1, document2);
      assertNotSame(document7, document0);
      assertSame(document7, document5);
      assertNotSame(document7, document3);
      assertSame(document7, document1);
      assertNotSame(document7, document6);
      assertSame(document7, document2);
      assertSame(document7, document4);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document7);
      assertSame(document2, document5);
      assertNotNull(document7);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document7.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals(1, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertEquals("#document", document7.nodeName());
      assertEquals("Ta29o", document7.baseUri());
      assertTrue(document7.hasParent());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("Ta29o", document7.location());
      assertFalse(document7.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      Elements elements3 = document7.previousElementSiblings();
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document6));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertNotSame(document1, document6);
      assertNotSame(document1, document3);
      assertSame(document1, document7);
      assertSame(document1, document2);
      assertNotSame(document7, document0);
      assertSame(document7, document5);
      assertNotSame(document7, document3);
      assertSame(document7, document1);
      assertNotSame(document7, document6);
      assertSame(document7, document2);
      assertSame(document7, document4);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document7);
      assertSame(document2, document5);
      assertNotNull(elements3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document7.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals(1, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertEquals("#document", document7.nodeName());
      assertEquals("Ta29o", document7.baseUri());
      assertTrue(document7.hasParent());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("Ta29o", document7.location());
      assertFalse(document7.isBlock());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      boolean boolean2 = document2.hasText();
      assertTrue(boolean2);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document2.equals((Object)document0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertNotSame(document1, document6);
      assertNotSame(document1, document3);
      assertSame(document1, document7);
      assertSame(document1, document2);
      assertNotSame(document2, document3);
      assertNotSame(document2, document6);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document7);
      assertSame(document2, document5);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      Document document8 = (Document)document6.tagName("head");
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document6.equals((Object)document7));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document1));
      assertSame(document0, document8);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document7);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document4);
      assertNotSame(document6, document7);
      assertNotSame(document6, document2);
      assertNotSame(document6, document1);
      assertSame(document6, document0);
      assertNotSame(document6, document5);
      assertNotSame(document6, document4);
      assertSame(document6, document8);
      assertSame(document6, document3);
      assertNotSame(document8, document7);
      assertSame(document8, document6);
      assertSame(document8, document3);
      assertNotSame(document8, document4);
      assertNotSame(document8, document5);
      assertSame(document8, document0);
      assertNotSame(document8, document2);
      assertNotSame(document8, document1);
      assertNotNull(document8);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertTrue(document0.isBlock());
      assertEquals("Ta29o", document0.location());
      assertEquals("head", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document6.isBlock());
      assertEquals(0, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("head", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertNull(document6.baseUri());
      assertFalse(document6.hasParent());
      assertEquals("Ta29o", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertFalse(document8.updateMetaCharsetElement());
      assertTrue(document8.isBlock());
      assertEquals(0, document8.siblingIndex());
      assertEquals("head", document8.tagName());
      assertEquals("#document", document8.nodeName());
      assertEquals(0, document8.childNodeSize());
      assertEquals("Ta29o", document8.location());
      assertNull(document8.baseUri());
      assertFalse(document8.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      
      // Undeclared exception!
      try { 
        document6.appendChild(document5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("^tm|B&u@");
      assertNotNull(document0);
      assertEquals("^tm|B&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("^tm|B&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      
      Document document1 = document0.outputSettings(document_OutputSettings1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("^tm|B&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("^tm|B&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|B&u@", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("^tm|B&u@", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      
      String string0 = document1.text();
      assertEquals("", string0);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotNull(string0);
      assertEquals("^tm|B&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("^tm|B&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|B&u@", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("^tm|B&u@", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      
      Elements elements0 = document1.children();
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertEquals("^tm|B&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("^tm|B&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|B&u@", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("^tm|B&u@", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element0 = document0.body();
      assertSame(document0, document1);
      assertNull(element0);
      assertEquals("^tm|B&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("^tm|B&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true, "cfTDse6Q");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // cfTDse6Q
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Element element0 = new Element("#");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertEquals("#", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      String string0 = element0.id();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", element0.baseUri());
      assertEquals("#", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
      assertEquals("", element0.baseUri());
      assertEquals("#", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      
      Attributes attributes0 = element0.attributes();
      assertNotNull(attributes0);
      assertEquals("", element0.baseUri());
      assertEquals("#", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, attributes0.size());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Elements elements0 = element0.getElementsByClass("#");
      assertNotNull(elements0);
      assertEquals("", element0.baseUri());
      assertEquals("#", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element1 = element0.removeClass("dx+m");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("", element0.baseUri());
      assertEquals("#", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      
      Pattern pattern0 = Pattern.compile("#");
      assertNotNull(pattern0);
      assertEquals("#", pattern0.pattern());
      assertEquals("#", pattern0.toString());
      assertEquals(0, pattern0.flags());
      
      Elements elements1 = element1.getElementsMatchingOwnText(pattern0);
      assertTrue(elements1.equals((Object)elements0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("", element0.baseUri());
      assertEquals("#", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("#", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#", pattern0.pattern());
      assertEquals("#", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Element element2 = element0.empty();
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      assertEquals("", element0.baseUri());
      assertEquals("#", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertEquals("#", element2.nodeName());
      assertEquals("#", element2.tagName());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = ";wL/~e";
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      
      Elements elements0 = document0.getElementsByAttributeValueEnding(";wL/~e", ";wL/~e");
      assertNotNull(elements0);
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      element0.addChildren(nodeArray0);
      assertEquals(5, nodeArray0.length);
      assertEquals(";wL/~e", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(3, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertEquals(";wL/~e", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      element0.html(";wL/~e");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      document0.nodelistChanged();
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotNull(document_OutputSettings3);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      
      Document document1 = document0.outputSettings(document_OutputSettings3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(charset0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotNull(document_OutputSettings4);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      
      Document document2 = (Document)document1.tagName("textarea");
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("textarea", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("textarea", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("textarea", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      Document document3 = document0.clone();
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("textarea", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("textarea", document3.tagName());
      
      String string0 = document3.baseUri();
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotNull(string0);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("textarea", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("textarea", document3.tagName());
      
      String string1 = document1.val();
      assertEquals("", string1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document1.equals((Object)document3));
      assertTrue(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotNull(string1);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("textarea", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("textarea", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      
      boolean boolean0 = document0.hasClass("textarea");
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document3));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("textarea", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      document0.doSetBaseUri("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals("Ta29o", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertNotNull(document4);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("Ta29o", document4.location());
      assertEquals("Ta29o", document4.baseUri());
      assertTrue(document4.hasParent());
      
      Document document5 = (Document)document2.after((Node) document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertNotNull(document5);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("Ta29o", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals(1, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      
      String string2 = document5.id();
      assertEquals("", string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertNotNull(string2);
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("Ta29o", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals(1, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      
      // Undeclared exception!
      try { 
        document2.is("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<html>
         //  <head></head>
         //  <body>
         //   Ta29o
         //  </body>
         // </html>': unexpected token at '<html>
         //  <head></head>
         //  <body>
         //   Ta29o
         //  </body>
         // </html>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("tn", "tn");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      
      Document document2 = (Document)document1.html("textarea");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("tn", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("tn", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      
      Document document3 = document1.ownerDocument();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("tn", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("tn", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Document document4 = (Document)document0.insertChildren(0, nodeArray0);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotNull(document4);
      assertEquals(1, nodeArray0.length);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("tn", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals("tn", document4.location());
      assertTrue(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      
      Attributes attributes0 = document2.attributes();
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotNull(attributes0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tn", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("tn", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, attributes0.size());
      
      Tag tag0 = Tag.valueOf("textarea");
      assertNotNull(tag0);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormSubmittable());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      
      FormElement formElement0 = new FormElement(tag0, "hDJ6bk]6-$!@+tD!w", attributes0);
      assertNotNull(formElement0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tn", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("tn", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, attributes0.size());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormSubmittable());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertEquals("textarea", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("textarea", formElement0.nodeName());
      assertEquals("hDJ6bk]6-$!@+tD!w", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      
      FormElement formElement1 = formElement0.addElement(document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("tn", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("tn", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, attributes0.size());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isFormSubmittable());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertEquals("textarea", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("textarea", formElement0.nodeName());
      assertEquals("hDJ6bk]6-$!@+tD!w", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertEquals("textarea", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("textarea", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("hDJ6bk]6-$!@+tD!w", formElement1.baseUri());
      
      // Undeclared exception!
      try { 
        formElement1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      element0.reparentChild(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Elements elements0 = element0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      document0.addChildren(nodeArray0);
      assertEquals(3, nodeArray0.length);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("noframes", "TJ07D3\"]b_9T#L");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Element element0 = document0.head();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(element0);
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals("head", element0.tagName());
      
      Element element1 = document1.getElementById("Invalid character reference: %s");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNull(element1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      List<DataNode> list0 = document1.dataNodes();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(list0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Document document2 = (Document)document0.insertChildren((-1), (Collection<? extends Node>) list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals("head", element0.tagName());
      
      Document document3 = element0.ownerDocument();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      
      Node[] nodeArray0 = new Node[0];
      Document document4 = (Document)document3.insertChildren((-1), nodeArray0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertNotNull(document4);
      assertEquals(0, nodeArray0.length);
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document4.baseUri());
      
      Attributes attributes0 = document1.attributes();
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotNull(attributes0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, attributes0.size());
      
      Element element2 = element0.lastElementSibling();
      assertFalse(document0.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(element0, element2);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", element2.baseUri());
      
      boolean boolean1 = Element.preserveWhitespace(document3);
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(document3.equals((Object)document1));
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(element0, element2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("Ta29o", document2.location());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("Ta29o", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document2);
      assertNotNull(document4);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("Ta29o", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      
      Document document5 = (Document)document0.empty();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotNull(document5);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Ta29o", document5.location());
      assertFalse(document5.hasParent());
      assertNull(document5.baseUri());
      assertFalse(document5.isBlock());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      Document document6 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document5));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document2, document6);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document6, document0);
      assertSame(document6, document1);
      assertSame(document6, document4);
      assertNotSame(document6, document5);
      assertSame(document6, document2);
      assertSame(document6, document3);
      assertNotNull(document6);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("Ta29o", document6.baseUri());
      assertEquals(1, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("Ta29o", document6.location());
      
      List<TextNode> list1 = document2.textNodes();
      assertTrue(list1.equals((Object)list0));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(list1, list0);
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document2, document6);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotNull(list1);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      
      Elements elements3 = document2.getElementsByAttributeValueMatching("body", "CONTINUE");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document2, document6);
      assertSame(document2, document4);
      assertNotSame(document2, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotNull(elements3);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      
      String string2 = document1.tagName();
      assertEquals("#root", string2);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotNull(string2);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements4 = document0.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements2));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      assertNotNull(elements4);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      
      List<Node> list2 = document1.ensureChildNodes();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotNull(list2);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      
      Elements elements5 = document1.nextElementSiblings();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertTrue(elements5.equals((Object)elements1));
      assertTrue(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements3));
      assertFalse(elements5.equals((Object)elements0));
      assertSame(document0, document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements3);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements2);
      assertNotNull(elements5);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, elements5.size());
      assertTrue(elements5.isEmpty());
      
      Document document7 = (Document)document3.parent();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document5));
      assertSame(document0, document5);
      assertSame(document0, document7);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document7);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertSame(document7, document0);
      assertNotSame(document7, document2);
      assertNotSame(document7, document4);
      assertSame(document7, document5);
      assertNotSame(document7, document6);
      assertNotSame(document3, document0);
      assertSame(document3, document6);
      assertSame(document3, document2);
      assertNotSame(document3, document5);
      assertSame(document3, document4);
      assertNotSame(document3, document7);
      assertSame(document3, document1);
      assertNotNull(document7);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("Ta29o", document7.location());
      assertFalse(document7.hasParent());
      assertNull(document7.baseUri());
      assertEquals(0, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("Ta29o", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      
      document0.doSetBaseUri("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Ta29o", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotNull(document4);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      Document document5 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertNotNull(document5);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("Ta29o", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      
      List<TextNode> list1 = document2.textNodes();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Elements elements3 = document2.getElementsByAttributeValueMatching("body", "CONTINUE");
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertNotNull(elements3);
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      
      Element element0 = document4.body();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      
      Element element1 = element0.getElementById("*=");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertNull(element1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      
      String string2 = element0.toString();
      assertEquals("<body>\n Ta29o\n</body>", string2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertNotNull(string2);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      
      Document document6 = (Document)document3.prepend("Ta29o");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document6);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document6, document1);
      assertSame(document6, document3);
      assertNotSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document3, document6);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document5);
      assertNotNull(document6);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document6.isBlock());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("Ta29o", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("Ta29o", document6.location());
      assertEquals(2, document6.childNodeSize());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Ta29o", document3.location());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = ";wL/~e";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g ^H)");
      assertFalse(boolean0);
      
      Document document0 = new Document("html");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.location());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      
      String string1 = document0.outerHtml();
      assertEquals("", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document1.getElementsMatchingOwnText(";wL/~e");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.location());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document2 = document0.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      
      document2.doSetBaseUri("html");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      
      Document document3 = Document.createShell("]>:,");
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotNull(document3);
      assertEquals("]>:,", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("]>:,", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      String string2 = document3.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string2);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotNull(string2);
      assertEquals("]>:,", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("]>:,", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document4 = document2.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertNotNull(document4);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("html", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("html", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("html", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("html", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      
      Elements elements1 = document1.nextElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("html", document1.location());
      assertEquals("html", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document5 = Parser.parseBodyFragmentRelaxed("body", "Rs;");
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotNull(document5);
      assertEquals("Rs;", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals("Rs;", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      
      Document document6 = (Document)document5.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document5, document0);
      assertSame(document5, document6);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertNotSame(document6, document0);
      assertNotNull(document6);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("Rs;", document5.location());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(1, document5.siblingIndex());
      assertEquals("Rs;", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertTrue(document5.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals("Rs;", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("Rs;", document6.location());
      assertTrue(document6.hasParent());
      assertEquals(1, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      
      Document document7 = (Document)document0.empty();
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertNotSame(document7, document3);
      assertNotSame(document7, document1);
      assertNotSame(document7, document6);
      assertNotSame(document7, document5);
      assertSame(document7, document0);
      assertSame(document7, document2);
      assertSame(document7, document4);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotNull(document7);
      assertEquals("html", document7.baseUri());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.childNodeSize());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.quirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertEquals("html", document7.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      document1.nodelistChanged();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      
      Document document2 = (Document)document1.tagName("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ta29o", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertFalse(document2.hasParent());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("ta29o", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      Document document3 = document0.clone();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("Ta29o", document3.baseUri());
      
      String string1 = document3.baseUri();
      assertEquals("Ta29o", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(string1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("Ta29o", document3.baseUri());
      
      String string2 = document2.val();
      assertEquals("", string2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotNull(string2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ta29o", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertFalse(document2.hasParent());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("ta29o", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document3;
      nodeArray0[1] = (Node) document3;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document2;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document1;
      document3.addChildren(nodeArray0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertEquals(7, nodeArray0.length);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(4, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("Ta29o", document3.baseUri());
      
      boolean boolean1 = document3.hasClass("as<6D#MW+");
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertTrue(boolean1 == boolean0);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("Ta29o", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(4, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("Ta29o", document3.baseUri());
      
      // Undeclared exception!
      document1.wrap("G;Ba\"E5]-!}");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Document.createShell("Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      element0.reparentChild(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      
      Element element1 = document0.getElementById("org.jsoup.nodes.Element");
      assertNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Document document1 = (Document)document0.insertChildren((-1), (Collection<? extends Node>) list0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      boolean boolean1 = document0.hasText();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document2 = new Document("Uk,Qn wCQIDRf/iB9g0");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      
      Document document3 = document2.ownerDocument();
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document3;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) null;
      Comment comment0 = new Comment("2", "org.jsoup.nodes.Element");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      nodeArray0[3] = (Node) comment0;
      nodeArray0[4] = (Node) document1;
      // Undeclared exception!
      try { 
        document3.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("Uk,Qn wCQIDRf/iB9g0", "org.jsoup.nodes.Document");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Document", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Document", document0.baseUri());
      
      Document document1 = (Document)document0.html("#root");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Document", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Document", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Document", document1.location());
      assertEquals("org.jsoup.nodes.Document", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      
      Elements elements0 = document0.previousElementSiblings();
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Document", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Document", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document2 = Parser.parseBodyFragmentRelaxed("#root", "org.jsoup.nodes.Document");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Document", document2.location());
      assertEquals("org.jsoup.nodes.Document", document2.baseUri());
      assertFalse(document2.hasParent());
      
      List<Node> list0 = document2.ensureChildNodes();
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(list0);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Document", document2.location());
      assertEquals("org.jsoup.nodes.Document", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Document document3 = new Document("org.jsoup.nodes.Document");
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("org.jsoup.nodes.Document", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.nodes.Document", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      Elements elements1 = document3.nextElementSiblings();
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("org.jsoup.nodes.Document", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.nodes.Document", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Elements elements2 = document2.getAllElements();
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Document", document2.location());
      assertEquals("org.jsoup.nodes.Document", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
      
      Tag tag0 = document3.tag();
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(tag0);
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("org.jsoup.nodes.Document", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.nodes.Document", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertEquals("#root", tag0.toString());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      
      Document document1 = (Document)document0.text("textarea");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.baseUri());
      
      Elements elements0 = document0.siblingElements();
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      
      Attributes attributes0 = document1.attributes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(attributes0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, attributes0.size());
      
      String string0 = document0.nodeName();
      assertEquals("#document", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotNull(document_OutputSettings3);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-1662), document_OutputSettings3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.text("textarea");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = (Document)document1.attr("textarea", true);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^tm|&u@", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("^tm|&u@", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      
      Elements elements0 = document0.siblingElements();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Attributes attributes0 = document1.attributes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(attributes0);
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, attributes0.size());
      
      String string0 = document0.nodeName();
      assertEquals("#document", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell("Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      
      element0.reparentChild(document0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      
      Elements elements0 = element0.parents();
      assertNotNull(elements0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Elements elements1 = document1.getElementsMatchingOwnText("q9/vsy7y+f#&p\"+sbf");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Document document2 = document0.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      
      document1.doSetBaseUri("textarea");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      
      String string1 = document2.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(string1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("textarea", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Ta29o", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      
      Elements elements2 = document2.nextElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      Document document4 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotNull(document4);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Ta29o", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      
      List<TextNode> list0 = document4.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Ta29o", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document5 = (Document)document4.appendTo(document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotNull(document5);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("Ta29o", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("Ta29o", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("Ta29o", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Ta29o", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertEquals(1, document5.siblingIndex());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document6 = (Document)document5.traverse(nodeVisitor0);
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document6);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document5, document6);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotNull(document6);
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertEquals("Ta29o", document6.location());
      assertEquals("Ta29o", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("Ta29o", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("Ta29o", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("Ta29o", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Ta29o", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertEquals(1, document5.siblingIndex());
      
      Elements elements3 = document4.getElementsByAttributeValueContaining("Ta29o", "s+");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document6);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotNull(elements3);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertTrue(document4.hasParent());
      assertEquals("Ta29o", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("Ta29o", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      
      Document document7 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document7, document1);
      assertNotSame(document7, document3);
      assertSame(document7, document0);
      assertSame(document7, document2);
      assertSame(document7, document5);
      assertSame(document7, document6);
      assertSame(document7, document4);
      assertSame(document2, document7);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotNull(document7);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document7.tagName());
      assertEquals("Ta29o", document7.location());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("#document", document7.nodeName());
      assertFalse(document7.isBlock());
      assertEquals(1, document7.siblingIndex());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(1, document7.childNodeSize());
      assertTrue(document7.hasParent());
      assertEquals("Ta29o", document7.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      List<TextNode> list1 = document1.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertTrue(list1.equals((Object)list0));
      assertSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Elements elements4 = document4.getElementsByAttributeValueMatching("body", "textarea");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements1);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document6);
      assertSame(document4, document7);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertNotNull(elements4);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      assertTrue(document4.hasParent());
      assertEquals("Ta29o", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.siblingIndex());
      assertEquals("Ta29o", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      
      Element element0 = document1.body();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals("body", element0.nodeName());
      
      String string2 = document3.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>\n<#root value=\"CONTINUE\">\n <html>\n  <head></head>\n  <body>\n   Ta29o\n  </body>\n </html>\n</#root>", string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document3.equals((Object)document7));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document7);
      assertNotSame(document3, document2);
      assertNotSame(document3, document6);
      assertNotSame(document3, document4);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(string2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("textarea", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Ta29o", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      
      Tag tag0 = element0.tag();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotNull(tag0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      
      List<TextNode> list2 = element0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document6));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertSame(document0, document7);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document7);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document6);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      String string0 = "";
      String string1 = "XVB!A\\S9$PG&#|]";
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("XVB!AS9$PG&#|]", parseSettings0);
      assertNotNull(tag0);
      assertEquals("xvb!as9$pg&#|]", tag0.toString());
      assertEquals("xvb!as9$pg&#|]", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "body", attributes0);
      assertNotNull(formElement0);
      assertEquals("xvb!as9$pg&#|]", tag0.toString());
      assertEquals("xvb!as9$pg&#|]", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals("body", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("xvb!as9$pg&#|]", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("xvb!as9$pg&#|]", formElement0.tagName());
      
      String string2 = parseSettings0.normalizeTag("XVB!AS9$PG&#|]");
      assertEquals("xvb!as9$pg&#|]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        formElement0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("#root");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      document0.title("~7YP~L#^':=gxQLOld");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsByAttributeValueNot("5'm-\"D<4", "5'm-\"D<4");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(5, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document1 = (Document)document0.toggleClass("=Z-`uoTWeno{4Ti'ed");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      Set<String> set0 = document1.classNames();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(set0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("#root"));
      
      Document document2 = (Document)document1.addClass("");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        document2.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Ta29o", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals("Ta29o", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      Document document5 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertNotNull(document5);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals(1, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertTrue(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("Ta29o", document5.location());
      
      List<TextNode> list1 = document2.textNodes();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      Elements elements3 = document2.getElementsByAttributeValueMatching("body", "CONTINUE");
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertNotNull(elements3);
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      
      String string2 = document1.tagName();
      assertEquals("#root", string2);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotNull(string2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      Elements elements4 = document0.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements1));
      assertFalse(elements4.equals((Object)elements0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements1);
      assertNotNull(elements4);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      
      List<Node> list2 = document1.ensureChildNodes();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotNull(list2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      
      Elements elements5 = document1.nextElementSiblings();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements5.equals((Object)elements0));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements3));
      assertTrue(elements5.equals((Object)elements1));
      assertTrue(elements5.equals((Object)elements2));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(elements5, elements3);
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements4);
      assertNotNull(elements5);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, elements5.size());
      assertTrue(elements5.isEmpty());
      
      Document document6 = (Document)document5.removeClass("D$GjGhgqGJ;U:\"UwJ");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document6);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document6);
      assertNotSame(document1, document0);
      assertNotSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document1);
      assertSame(document6, document4);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document6);
      assertNotSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertNotNull(document6);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.childNodeSize());
      assertEquals("Ta29o", document6.location());
      assertEquals("Ta29o", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("Ta29o", document2.location());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals(1, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertTrue(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("Ta29o", document5.location());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(";wL/~e", ";wL/~e");
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document1 = (Document)document0.text(";wL/~e");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(";wL/~e", document1.location());
      assertEquals(";wL/~e", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Document document2 = (Document)document0.appendTo(document1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(";wL/~e", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(";wL/~e", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(";wL/~e", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals(";wL/~e", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      
      Document document3 = (Document)document0.empty();
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(";wL/~e", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(";wL/~e", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining((String) null, "Mt1uj,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lass", "^tm|&u@");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("^tm|&u@", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("lass", "(y<T'PZJ{^VE~5y3Q");
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Element element1 = element0.html("ueBJ5WcZ9GAK");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("^tm|&u@", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("^tm|&u@", element1.baseUri());
      
      Elements elements2 = document0.previousElementSiblings();
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      Document document1 = (Document)document0.toggleClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      Element element2 = element1.attr("#root", "zDS`5-6LH");
      assertSame(document0, document1);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("^tm|&u@", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("^tm|&u@", element1.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.tagName());
      assertEquals("^tm|&u@", element2.baseUri());
      assertTrue(element2.isBlock());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertEquals("Ta29o", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Ta29o", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document3.location());
      assertEquals("Ta29o", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.html("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.location());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.location());
      assertFalse(document2.isBlock());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Ta29o", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("Ta29o", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotNull(document4);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Ta29o", document4.location());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      Document document5 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertNotNull(document5);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.siblingIndex());
      assertEquals("Ta29o", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals("Ta29o", document5.location());
      
      List<TextNode> list1 = document2.textNodes();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Elements elements3 = document2.getElementsByAttributeValueMatching("body", "CONTINUE");
      assertFalse(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(elements3);
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("Ta29o", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      
      String string2 = document1.tagName();
      assertEquals("#root", string2);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotNull(string2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.location());
      
      Elements elements4 = document0.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements1));
      assertFalse(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements3));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements3);
      assertNotNull(elements4);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      
      List<Node> list2 = document1.ensureChildNodes();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotNull(list2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.location());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      
      Elements elements5 = document1.nextElementSiblings();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements5.equals((Object)elements0));
      assertTrue(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements4));
      assertTrue(elements5.equals((Object)elements3));
      assertTrue(elements5.equals((Object)elements1));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements2);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements3);
      assertNotNull(elements5);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.location());
      assertTrue(elements5.isEmpty());
      assertEquals(0, elements5.size());
      
      String string3 = document1.ownText();
      assertEquals("", string3);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertNotNull(string3);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Ta29o", document1.location());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("noframes", "TJ07D3\"]b_9T#L");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      
      Element element0 = document0.head();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(element0);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      
      document0.doSetBaseUri("TJ07D3\"]b_9T#L");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = Parser.parseBodyFragmentRelaxed("v4%Y0U", "Invalid character reference: %s");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("Invalid character reference: %s", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Invalid character reference: %s", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.limitedQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode1);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertEquals("Invalid character reference: %s", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Invalid character reference: %s", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("Invalid character reference: %s", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Invalid character reference: %s", document3.location());
      
      Elements elements0 = document2.nextElementSiblings();
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotNull(elements0);
      assertEquals("Invalid character reference: %s", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Invalid character reference: %s", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      List<TextNode> list0 = document2.textNodes();
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotNull(list0);
      assertEquals("Invalid character reference: %s", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Invalid character reference: %s", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document4 = (Document)document1.appendTo(element0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotNull(document4);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      
      Elements elements1 = document0.getElementsByAttributeValueContaining("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Document document5 = document3.quirksMode(document_QuirksMode0);
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertNotNull(document5);
      assertEquals("Invalid character reference: %s", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Invalid character reference: %s", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("Invalid character reference: %s", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Invalid character reference: %s", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("Invalid character reference: %s", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("Invalid character reference: %s", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      
      Document document6 = (Document)document5.val("j[eBvZ8|Vs");
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document0));
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document0);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertNotSame(document6, document1);
      assertSame(document6, document5);
      assertSame(document6, document3);
      assertNotSame(document6, document4);
      assertNotSame(document6, document0);
      assertSame(document6, document2);
      assertNotNull(document6);
      assertEquals("Invalid character reference: %s", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Invalid character reference: %s", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("Invalid character reference: %s", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Invalid character reference: %s", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("Invalid character reference: %s", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("Invalid character reference: %s", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertEquals("Invalid character reference: %s", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("Invalid character reference: %s", document6.baseUri());
      assertFalse(document6.hasParent());
      
      Document document7 = document5.normalise();
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document7);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document0);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document7);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertSame(document5, document7);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertSame(document7, document5);
      assertNotSame(document7, document1);
      assertSame(document7, document2);
      assertSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotNull(document7);
      assertEquals("Invalid character reference: %s", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Invalid character reference: %s", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("Invalid character reference: %s", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Invalid character reference: %s", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("Invalid character reference: %s", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("Invalid character reference: %s", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.childNodeSize());
      assertEquals("Invalid character reference: %s", document7.location());
      assertFalse(document7.isBlock());
      assertFalse(document7.hasParent());
      assertEquals("Invalid character reference: %s", document7.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      
      List<TextNode> list1 = document7.textNodes();
      assertTrue(list1.equals((Object)list0));
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertNotSame(list1, list0);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document7);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document0);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document7);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertSame(document5, document7);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertSame(document7, document5);
      assertNotSame(document7, document1);
      assertSame(document7, document2);
      assertSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals("Invalid character reference: %s", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Invalid character reference: %s", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("Invalid character reference: %s", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Invalid character reference: %s", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("Invalid character reference: %s", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("Invalid character reference: %s", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.childNodeSize());
      assertEquals("Invalid character reference: %s", document7.location());
      assertFalse(document7.isBlock());
      assertFalse(document7.hasParent());
      assertEquals("Invalid character reference: %s", document7.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      
      Document document8 = document7.clone();
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertNotSame(document8, document0);
      assertNotSame(document8, document4);
      assertNotSame(document8, document2);
      assertNotSame(document8, document5);
      assertNotSame(document8, document6);
      assertNotSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotSame(document8, document3);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document8);
      assertNotSame(document2, document4);
      assertSame(document2, document7);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document0);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document8);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document7);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertSame(document5, document7);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertNotSame(document5, document8);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document8);
      assertSame(document7, document5);
      assertNotSame(document7, document1);
      assertSame(document7, document2);
      assertSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotNull(document8);
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(0, document8.siblingIndex());
      assertFalse(document8.isBlock());
      assertEquals("Invalid character reference: %s", document8.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("Invalid character reference: %s", document8.location());
      assertFalse(document8.hasParent());
      assertEquals("#root", document8.tagName());
      assertEquals("#document", document8.nodeName());
      assertEquals(1, document8.childNodeSize());
      assertEquals("Invalid character reference: %s", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Invalid character reference: %s", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("Invalid character reference: %s", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Invalid character reference: %s", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("Invalid character reference: %s", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("Invalid character reference: %s", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.childNodeSize());
      assertEquals("Invalid character reference: %s", document7.location());
      assertFalse(document7.isBlock());
      assertFalse(document7.hasParent());
      assertEquals("Invalid character reference: %s", document7.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      
      Elements elements2 = document8.getElementsByAttributeValueMatching("4<8!V``&kRZ&XXrI:LC", "2");
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document3));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document8));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document8));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertNotSame(document8, document0);
      assertNotSame(document8, document4);
      assertNotSame(document8, document2);
      assertNotSame(document8, document5);
      assertNotSame(document8, document6);
      assertNotSame(document8, document7);
      assertNotSame(document8, document1);
      assertNotSame(document8, document3);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document8);
      assertNotSame(document2, document4);
      assertSame(document2, document7);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document0);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document8);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document7);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertSame(document5, document7);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertNotSame(document5, document8);
      assertSame(document7, document3);
      assertNotSame(document7, document0);
      assertNotSame(document7, document8);
      assertSame(document7, document5);
      assertNotSame(document7, document1);
      assertSame(document7, document2);
      assertSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotNull(elements2);
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(0, document8.siblingIndex());
      assertFalse(document8.isBlock());
      assertEquals("Invalid character reference: %s", document8.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals("Invalid character reference: %s", document8.location());
      assertFalse(document8.hasParent());
      assertEquals("#root", document8.tagName());
      assertEquals("#document", document8.nodeName());
      assertEquals(1, document8.childNodeSize());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertEquals("Invalid character reference: %s", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Invalid character reference: %s", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("Invalid character reference: %s", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("Invalid character reference: %s", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("Invalid character reference: %s", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("Invalid character reference: %s", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#root", document7.tagName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#document", document7.nodeName());
      assertEquals(1, document7.childNodeSize());
      assertEquals("Invalid character reference: %s", document7.location());
      assertFalse(document7.isBlock());
      assertFalse(document7.hasParent());
      assertEquals("Invalid character reference: %s", document7.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      
      String string1 = document0.tagName();
      assertEquals("#root", string1);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document4));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document0, document4);
      assertNotNull(string1);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements3 = document2.getElementsByAttributeStarting("9O@,>)Mo");
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document8);
      assertNotSame(document2, document4);
      assertSame(document2, document7);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertNotSame(document2, document0);
      assertNotNull(elements3);
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals("Invalid character reference: %s", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Invalid character reference: %s", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      
      List<Node> list2 = document0.ensureChildNodes();
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document4));
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document8);
      assertNotSame(document0, document7);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document6);
      assertNotSame(document0, document4);
      assertNotNull(list2);
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      
      Elements elements4 = document1.nextElementSiblings();
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document8));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document6));
      assertTrue(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements2));
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document7);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document8);
      assertNotSame(document1, document3);
      assertNotSame(document1, document6);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements0);
      assertNotNull(elements4);
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("noframes", "TJ07D3\"]b_9T#L");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element0 = document0.head();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = document1.getElementById("Invalid character reference: %s");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNull(element1);
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      List<DataNode> list0 = document1.dataNodes();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(list0);
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Document document2 = (Document)document0.insertChildren((-1), (Collection<? extends Node>) list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      Document document3 = element0.ownerDocument();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      
      Node[] nodeArray0 = new Node[0];
      Document document4 = (Document)document3.insertChildren((-1), nodeArray0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertNotNull(document4);
      assertEquals(0, nodeArray0.length);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      assertEquals("TJ07D3\"]b_9T#L", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.child((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(";wL/~e", element0.baseUri());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(";wL/~e", ";wL/~e");
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = element0.textNodes();
      assertNotNull(list0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(";wL/~e", element0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Element element1 = element0.html("html");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals(";wL/~e", element1.baseUri());
      
      Elements elements2 = element1.previousElementSiblings();
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals(";wL/~e", element1.baseUri());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("html"));
      
      Element element2 = element0.classNames((Set<String>) linkedHashSet0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(";wL/~e", element0.baseUri());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(";wL/~e", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertFalse(linkedHashSet0.contains("html"));
      
      Element element3 = element1.toggleClass(";wL/~e");
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertNotNull(element3);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals(";wL/~e", element3.baseUri());
      assertTrue(element3.hasParent());
      assertEquals("body", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertEquals(1, element3.childNodeSize());
      assertEquals(1, element3.siblingIndex());
      
      Map<String, String> map0 = document0.dataset();
      assertNotNull(map0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "?IM5ku^h(a";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?IM5ku^h(a");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = "@:fq=Ht>|j8";
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@:fq=Ht>|j8");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Document document0 = Document.createShell("@:fq=Ht>|j8");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@:fq=Ht>|j8", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("@:fq=Ht>|j8", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@:fq=Ht>|j8", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("@:fq=Ht>|j8", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("@:fq=Ht>|j8", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.appendElement("Children collection to be inserted must not be null.");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@:fq=Ht>|j8", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("@:fq=Ht>|j8", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("@:fq=Ht>|j8", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("children collection to be inserted must not be null.", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("children collection to be inserted must not be null.", element1.tagName());
      assertEquals("@:fq=Ht>|j8", element1.baseUri());
      assertFalse(element1.isBlock());
      
      Element element2 = element0.val("@:fq=Ht>|j8");
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@:fq=Ht>|j8", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("@:fq=Ht>|j8", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("@:fq=Ht>|j8", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertEquals("@:fq=Ht>|j8", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.isBlock());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "@:fq=Ht>|j8");
      assertNotNull(stringBuilder0);
      assertEquals("@:fq=Ht>|j8", stringBuilder0.toString());
      
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Ta29o", document2.location());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      String string0 = document0.text();
      assertEquals(">", string0);
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.text("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document1.baseUri());
      assertEquals(" > ", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      
      Elements elements0 = document0.siblingElements();
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Attributes attributes0 = document1.attributes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document1.baseUri());
      assertEquals(" > ", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, attributes0.size());
      
      String string1 = document0.nodeName();
      assertEquals("#document", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(";wL/~e", element0.baseUri());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(";wL/~e", ";wL/~e");
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Document document1 = new Document("org.jsoup.select.Evaluator$Attribute");
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      Elements elements2 = document1.getElementsByAttributeValueContaining("CONTINUE", ";wL/~e");
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(95);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, uS_ASCII0);
      assertNotNull(outputStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      
      OutputStreamWriter outputStreamWriter1 = document1.html(outputStreamWriter0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(outputStreamWriter0, outputStreamWriter1);
      assertSame(outputStreamWriter1, outputStreamWriter0);
      assertNotNull(outputStreamWriter1);
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      
      Elements elements3 = document0.getElementsByAttributeValueNot("CONTINUE", "CONTINUE");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotNull(elements3);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(5, elements3.size());
      assertFalse(elements3.isEmpty());
      
      document1.doSetBaseUri("");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      
      Element element1 = document0.parent();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotNull(document3);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(";wL/~e", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(";wL/~e", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      
      int int0 = document3.elementSiblingIndex();
      assertEquals(0, int0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(";wL/~e", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(";wL/~e", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      
      Document document4 = (Document)document2.toggleClass(";wL/~e");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document4);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$Attribute", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("Ta29o", document3.location());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("Ta29o", document4.location());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      Document document5 = (Document)document2.val("CONTINUE");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertNotNull(document5);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("Ta29o", document5.location());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertTrue(document5.hasParent());
      assertEquals("Ta29o", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      
      List<TextNode> list1 = document2.textNodes();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Elements elements3 = document2.getElementsByAttributeValueMatching("body", "CONTINUE");
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotNull(elements3);
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("Ta29o", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Ta29o", document2.baseUri());
      
      String string2 = document1.tagName();
      assertEquals("#root", string2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(string2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      
      Elements elements4 = document0.getElementsByAttributeStarting("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertTrue(elements4.equals((Object)elements2));
      assertFalse(elements4.equals((Object)elements0));
      assertTrue(elements4.equals((Object)elements3));
      assertTrue(elements4.equals((Object)elements1));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements3);
      assertNotNull(elements4);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertTrue(elements4.isEmpty());
      assertEquals(0, elements4.size());
      
      List<Node> list2 = document1.ensureChildNodes();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(list2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      
      Elements elements5 = document3.getElementsByAttributeValueMatching((String) null, "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements5.equals((Object)elements4));
      assertFalse(elements5.equals((Object)elements0));
      assertTrue(elements5.equals((Object)elements3));
      assertTrue(elements5.equals((Object)elements2));
      assertTrue(elements5.equals((Object)elements1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements5, elements1);
      assertNotSame(elements5, elements3);
      assertNotSame(elements5, elements0);
      assertNotSame(elements5, elements4);
      assertNotSame(elements5, elements2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document5);
      assertNotNull(elements5);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(elements5.isEmpty());
      assertEquals(0, elements5.size());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("Ta29o", document3.location());
      
      Element element0 = document3.appendElement("body");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document5);
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNull(document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Ta29o", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Ta29o", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("Ta29o", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("Ta29o", document3.location());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      
      Elements elements0 = document1.nextElementSiblings();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      List<TextNode> list0 = document1.textNodes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta29o", "Ta29o");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ta29o");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingOwnText("Ta29o");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      List<Node> list0 = document1.ensureChildNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Ta29o", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Ta29o", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals("Ta29o", document1.location());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("Ta29o", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Ta29o", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list1 = document0.textNodes();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(list1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Ta29o", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("Ta29o", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      
      Element element0 = document2.previousElementSibling();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals("Ta29o", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("Ta29o", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Ta29o", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("Ta29o", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Ta29o", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = document0.body();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Ta29o", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("Ta29o", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) document_QuirksMode0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>";
      objectArray0[3] = (Object) document0;
      objectArray0[4] = (Object) elements0;
      objectArray0[5] = (Object) locale0;
      objectArray0[6] = (Object) document1;
      objectArray0[7] = (Object) "Ta29o";
      objectArray0[8] = (Object) list0;
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.format(locale0, "<html>\n <head></head>\n <body>\n  Ta29o\n </body>\n</html>", objectArray0);
      assertSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertNotNull(mockPrintStream1);
      assertEquals(9, objectArray0.length);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      int int0 = (-1504);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m)2Z", "m)2Z");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("m)2Z", document0.baseUri());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("m)2Z", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("m)2Z", document1.location());
      assertEquals("#root", document1.tagName());
      
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("m)2Z", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("m)2Z", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("m)2Z", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      Document document3 = new Document("m)2Z");
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("m)2Z", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("m)2Z", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      Document document4 = document3.ownerDocument();
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("m)2Z", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("m)2Z", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("m)2Z", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("m)2Z", document4.baseUri());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document5 = Parser.parseBodyFragmentRelaxed("c", "c");
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotNull(document5);
      assertEquals("#root", document5.tagName());
      assertEquals("c", document5.baseUri());
      assertEquals("c", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      
      Elements elements0 = document3.getElementsByAttributeValueMatching("?^rd$oqbn%&vs){", "");
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document3, document5);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotNull(elements0);
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("m)2Z", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("m)2Z", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document6 = (Document)document4.toggleClass("?^rd$oqbn%&vs){");
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertNotSame(document3, document5);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document6);
      assertNotSame(document4, document5);
      assertNotSame(document4, document1);
      assertSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document6);
      assertNotSame(document6, document0);
      assertSame(document6, document3);
      assertNotSame(document6, document2);
      assertSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document1);
      assertNotNull(document6);
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("m)2Z", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("m)2Z", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("m)2Z", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("m)2Z", document4.baseUri());
      assertFalse(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals("m)2Z", document6.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("m)2Z", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(";wL/~e", ";wL/~e");
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Element element1 = element0.html("h| tml");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(";wL/~e", element1.baseUri());
      
      Elements elements2 = element1.previousElementSiblings();
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(";wL/~e", element1.baseUri());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(";wL/~e"));
      
      boolean boolean0 = linkedHashSet0.add("{Yre'a}rz|?@Y/l3Iw");
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("{Yre'a}rz|?@Y/l3Iw"));
      assertFalse(linkedHashSet0.contains(";wL/~e"));
      
      Element element2 = element0.classNames((Set<String>) linkedHashSet0);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(";wL/~e", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertTrue(linkedHashSet0.contains("{Yre'a}rz|?@Y/l3Iw"));
      assertFalse(linkedHashSet0.contains(";wL/~e"));
      
      Element element3 = element1.toggleClass(";wL/~e");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element1, element3);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertNotNull(element3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals(";wL/~e", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertEquals("body", element3.nodeName());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals(1, element3.siblingIndex());
      
      Document document1 = (Document)document0.prependChild(element1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element1, element3);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(";wL/~e", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(";wL/~e", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("noframes", "<7x}W$b_6)");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document1.tagName());
      assertEquals("<7x}W$b_6)", document1.baseUri());
      assertEquals("<7x}W$b_6)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      
      Element element0 = document0.head();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Element element1 = document1.getElementById("Invalid character reference: %s");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNull(element1);
      assertEquals("#root", document1.tagName());
      assertEquals("<7x}W$b_6)", document1.baseUri());
      assertEquals("<7x}W$b_6)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      
      List<DataNode> list0 = document1.dataNodes();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(list0);
      assertEquals("#root", document1.tagName());
      assertEquals("<7x}W$b_6)", document1.baseUri());
      assertEquals("<7x}W$b_6)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Document document2 = (Document)document0.insertChildren((-1), (Collection<? extends Node>) list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("<7x}W$b_6)", document1.baseUri());
      assertEquals("<7x}W$b_6)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      
      Element element2 = document1.previousElementSibling();
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNull(element2);
      assertEquals("#root", document1.tagName());
      assertEquals("<7x}W$b_6)", document1.baseUri());
      assertEquals("<7x}W$b_6)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Invalid character reference: %s");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.append((CharSequence) "TJ07D3\"]b_9T#L");
      assertSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertNotNull(mockPrintStream1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      
      // Undeclared exception!
      try { 
        Charset.forName("Invalid character reference: %s");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Invalid character reference: %s
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m)2Z", "m)2Z");
      assertNotNull(document0);
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("m)2Z", document0.baseUri());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("m)2Z", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("m)2Z", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("m)2Z", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      
      Document document3 = new Document("m)2Z");
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("m)2Z", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("m)2Z", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      
      Element element0 = document1.selectFirst("br");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNull(element0);
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("m)2Z", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      Document document4 = document3.ownerDocument();
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertNotNull(document4);
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("m)2Z", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("m)2Z", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("m)2Z", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("m)2Z", document4.location());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document5 = Parser.parseBodyFragmentRelaxed("c", "c");
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotNull(document5);
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("c", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("c", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document1.insertChildren(4, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "!6)m-fz.M[&~]$`+!1=";
      Document document0 = Parser.parseBodyFragmentRelaxed("!6)m-fz.M[&~]$`+!1=", "!6)m-fz.M[&~]$`+!1=");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("!6)m-fz.M[&~]$`+!1=", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.getElementById("!6)m-fz.M[&~]$`+!1=");
      assertNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("!6)m-fz.M[&~]$`+!1=", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      List<DataNode> list0 = document0.dataNodes();
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.insertChildren(32, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      
      Elements elements0 = document1.getElementsContainingText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document2 = (Document)document1.prependText("");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TJ07D3\"]b_9T#L", "TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TJ07D3\"]b_9T#L");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsMatchingOwnText("TJ07D3\"]b_9T#L");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotNull(document4);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      Elements elements3 = document1.previousElementSiblings();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotNull(elements3);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(elements3.isEmpty());
      assertEquals(1, elements3.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("TJ07D3\"]b_9T#L"));
      
      Document document5 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertFalse(document5.equals((Object)document0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertSame(document5, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document5);
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("TJ07D3\"]b_9T#L", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertTrue(document5.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document5.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("TJ07D3\"]b_9T#L"));
      
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(";wL/~e", ";wL/~e");
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Element element1 = element0.html("html");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      
      Elements elements2 = element1.previousElementSiblings();
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(";wL/~e"));
      
      Element element2 = element1.append("#6NTT3}d8X8+c^yVt-");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotNull(element2);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(";wL/~e", element2.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.hasParent());
      
      Element element3 = element0.classNames((Set<String>) linkedHashSet0);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element0);
      assertNotNull(element3);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(element3.hasParent());
      assertEquals("body", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertEquals(1, element3.siblingIndex());
      assertEquals("body", element3.tagName());
      assertEquals(";wL/~e", element3.baseUri());
      assertFalse(linkedHashSet0.contains(";wL/~e"));
      
      Element element4 = element1.toggleClass(";wL/~e");
      assertSame(element0, element4);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element1, element4);
      assertSame(element1, element3);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element4, element3);
      assertSame(element4, element0);
      assertSame(element4, element1);
      assertSame(element4, element2);
      assertNotNull(element4);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element4.hasParent());
      assertEquals("body", element4.nodeName());
      assertEquals(2, element4.childNodeSize());
      assertEquals(1, element4.siblingIndex());
      assertEquals(";wL/~e", element4.baseUri());
      assertTrue(element4.isBlock());
      assertEquals("body", element4.tagName());
      
      Element element5 = element3.previousElementSibling();
      assertFalse(element5.equals((Object)element0));
      assertFalse(element5.equals((Object)element1));
      assertFalse(element5.equals((Object)element2));
      assertFalse(element5.equals((Object)element3));
      assertFalse(element5.equals((Object)element4));
      assertSame(element0, element4);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element5);
      assertSame(element0, element1);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertNotSame(element3, element5);
      assertSame(element3, element0);
      assertSame(element3, element4);
      assertNotSame(element5, element0);
      assertNotSame(element5, element1);
      assertNotSame(element5, element2);
      assertNotSame(element5, element3);
      assertNotSame(element5, element4);
      assertNotNull(element5);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(element3.hasParent());
      assertEquals("body", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      assertTrue(element3.isBlock());
      assertEquals(1, element3.siblingIndex());
      assertEquals("body", element3.tagName());
      assertEquals(";wL/~e", element3.baseUri());
      assertTrue(element5.hasParent());
      assertEquals(0, element5.siblingIndex());
      assertEquals(";wL/~e", element5.baseUri());
      assertEquals("head", element5.tagName());
      assertEquals(0, element5.childNodeSize());
      assertTrue(element5.isBlock());
      assertEquals("head", element5.nodeName());
      assertFalse(linkedHashSet0.contains(";wL/~e"));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!6)m-fz.M[&~]$`+!1=", "!6)m-fz.M[&~]$`+!1=");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("!6)m-fz.M[&~]$`+!1=", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.getElementById("!6)m-fz.M[&~]$`+!1=");
      assertNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("!6)m-fz.M[&~]$`+!1=", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Element element2 = document0.previousElementSibling();
      assertNull(element2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("!6)m-fz.M[&~]$`+!1=");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "!6)m-fz.M[&~]$`+!1=");
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertNotNull(printStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      Element element3 = element0.addClass(">");
      assertSame(element0, element3);
      assertSame(element3, element0);
      assertNotNull(element3);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("!6)m-fz.M[&~]$`+!1=", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.tagName());
      assertTrue(element3.isBlock());
      assertEquals(0, element3.childNodeSize());
      assertEquals("!6)m-fz.M[&~]$`+!1=", element3.baseUri());
      assertEquals("head", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      
      document0.nodelistChanged();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(1, document1.childNodeSize());
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'K';
      List<TextNode> list0 = document1.textNodes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(list0);
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document2 = (Document)document0.appendTo(document1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("^tm|&u@", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("^tm|&u@", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("^tm|&u@", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("^tm|&u@", document2.tagName());
      
      String string0 = "CONTINUE";
      Document document3 = Document.createShell("^tm|&u@");
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("^tm|&u@", document3.location());
      assertEquals(1, document3.childNodeSize());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertNotNull(document4);
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("^tm|&u@", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals("^tm|&u@", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      
      Elements elements0 = document4.getElementsByAttributeValueContaining("CSMn|l\"r", "U=U<q5G|1RArJ");
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertNotNull(elements0);
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("^tm|&u@", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals("^tm|&u@", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1192721831);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, uS_ASCII0);
      assertNotNull(outputStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      
      // Undeclared exception!
      document1.html(outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TJ07D3\"]b_9T#L", "TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TJ07D3\"]b_9T#L");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingOwnText("TJ07D3\"]b_9T#L");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotNull(list0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(95);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, uS_ASCII0);
      assertNotNull(outputStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      
      OutputStreamWriter outputStreamWriter1 = document4.html(outputStreamWriter0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertSame(outputStreamWriter0, outputStreamWriter1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(outputStreamWriter1, outputStreamWriter0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotNull(outputStreamWriter1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      
      Elements elements3 = document1.getElementsByAttributeValueNot("TJ07D3\"]b_9T#L", "TJ07D3\"]b_9T#L");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotNull(elements3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(elements3.isEmpty());
      assertEquals(4, elements3.size());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      document1.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Document document5 = (Document)document2.parent();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotNull(document5);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNull(document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document5.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNull(document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      
      int int0 = document4.elementSiblingIndex();
      assertEquals(1, int0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document5);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document5);
      assertNotSame(document4, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      assertFalse(document4.isBlock());
      assertNull(document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      
      Document document6 = (Document)document0.toggleClass(">");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document2));
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document6, document4);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertNotSame(document6, document1);
      assertNotSame(document6, document2);
      assertNotNull(document6);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(document0.baseUri());
      assertFalse(document6.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(2, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertEquals("#root", document6.tagName());
      assertNull(document6.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.hasParent());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "^tm|&u@";
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      
      document0.nodelistChanged();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      Elements elements0 = document0.children();
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Document document2 = (Document)document0.attr("}:V5I]9VSLY", false);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("^tm|&u@", document2.tagName());
      assertEquals("^tm|&u@", document2.location());
      assertEquals("^tm|&u@", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("}:V5I]9VSLY");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.append((CharSequence) "^tm|&u@");
      assertSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertNotNull(mockPrintStream1);
      
      String string1 = ":nth-child(%d)";
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, ":nth-child(%d)");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "Uk,Qn wCQIDRf/iB9g0";
      Document document0 = Document.createShell("Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      
      element0.reparentChild(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      
      Elements elements0 = element0.parents();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TJ07D3\"]b_9T#L", "TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TJ07D3\"]b_9T#L");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      
      Elements elements0 = document0.getElementsMatchingOwnText("TJ07D3\"]b_9T#L");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      String string1 = null;
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      
      String string2 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>", string2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      
      Document document3 = Parser.parse("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>", "TJ07D3\"]b_9T#L");
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertNull(document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      element0.reparentChild(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = element0.parents();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      String string0 = "#a\"^kwMg7+";
      Elements elements1 = element0.getElementsByAttribute("#a\"^kwMg7+");
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "y)#";
      Document document0 = Document.createShell("y)#");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("y)#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y)#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      String string1 = document0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("y)#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y)#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.getElementsByAttributeValue("<html>\n <head></head>\n <body></body>\n</html>", "<html>\n <head></head>\n <body></body>\n</html>");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("y)#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y)#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      String string2 = document0.wholeText();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("y)#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y)#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.tagName("iframe");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("y)#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y)#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("iframe", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("iframe", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("y)#", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("y)#", document1.baseUri());
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TJ07D3\"]b_9T#L", "TJ07D3\"]b_9T#L");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TJ07D3\"]b_9T#L");
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      
      String string0 = document0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsMatchingOwnText("TJ07D3\"]b_9T#L");
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document2 = document1.normalise();
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("TJ07D3\"]b_9T#L", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      document0.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string1 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("TJ07D3\"]b_9T#L", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document4 = (Document)document1.appendTo(document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotNull(document4);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      
      Elements elements2 = document0.getElementsByAttributeValueContaining("CONTINUE", "<html>\n <head></head>\n <body>\n  TJ07D3\"]b_9T#L\n </body>\n</html>");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(95);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertNotNull(uS_ASCII0);
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, uS_ASCII0);
      assertNotNull(outputStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      
      OutputStreamWriter outputStreamWriter1 = document4.html(outputStreamWriter0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertSame(outputStreamWriter0, outputStreamWriter1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(outputStreamWriter1, outputStreamWriter0);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotNull(outputStreamWriter1);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      
      Elements elements3 = document1.getElementsByAttributeValueNot("TJ07D3\"]b_9T#L", "TJ07D3\"]b_9T#L");
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotNull(elements3);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements3.isEmpty());
      assertEquals(4, elements3.size());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("TJ07D3\"]b_9T#L", document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      
      document1.doSetBaseUri((String) null);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      
      Document document5 = (Document)document2.parent();
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document5);
      assertNotNull(document5);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertNull(document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("TJ07D3\"]b_9T#L", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertNull(document2.baseUri());
      
      int int0 = document4.elementSiblingIndex();
      assertEquals(1, int0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document4, document5);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertFalse(document0.hasParent());
      assertNull(document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TJ07D3\"]b_9T#L", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(document1.baseUri());
      assertEquals("TJ07D3\"]b_9T#L", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("TJ07D3\"]b_9T#L", document4.location());
      assertNull(document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      
      // Undeclared exception!
      try { 
        document3.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parse("r%McXgk9/JRT7<", "\"ZhOIeOo");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"ZhOIeOo", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"ZhOIeOo", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"ZhOIeOo", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"ZhOIeOo", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("\"ZhOIeOo", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("\"ZhOIeOo", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements0 = document1.getElementsByIndexEquals((-1328));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"ZhOIeOo", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"ZhOIeOo", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("\"ZhOIeOo", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("\"ZhOIeOo", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string0 = "body";
      Elements elements1 = document1.getElementsByTag("body");
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"ZhOIeOo", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"ZhOIeOo", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("\"ZhOIeOo", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("\"ZhOIeOo", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      
      Document document2 = (Document)document0.addClass("r%McXgk9/JRT7<");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"ZhOIeOo", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"ZhOIeOo", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("\"ZhOIeOo", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("\"ZhOIeOo", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      
      String string1 = "\"d@WD/Wh05";
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Pattern pattern0 = Pattern.compile("\"d@WD/Wh05");
      assertNotNull(pattern0);
      assertEquals("\"d@WD/Wh05", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("\"d@WD/Wh05", pattern0.pattern());
      
      Stream<String> stream0 = pattern0.splitAsStream("r%McXgk9/JRT7<");
      assertNotNull(stream0);
      assertEquals("\"d@WD/Wh05", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("\"d@WD/Wh05", pattern0.pattern());
      
      String[] stringArray0 = pattern0.split((CharSequence) "\"ZhOIeOo", (-1328));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("\"d@WD/Wh05", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("\"d@WD/Wh05", pattern0.pattern());
      
      Stream<String> stream1 = pattern0.splitAsStream("r%McXgk9/JRT7<");
      assertFalse(stream1.equals((Object)stream0));
      assertNotSame(stream1, stream0);
      assertNotNull(stream1);
      assertEquals("\"d@WD/Wh05", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("\"d@WD/Wh05", pattern0.pattern());
      
      Elements elements2 = document1.getElementsMatchingText(pattern0);
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"ZhOIeOo", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"ZhOIeOo", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("\"ZhOIeOo", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("\"ZhOIeOo", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("\"d@WD/Wh05", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("\"d@WD/Wh05", pattern0.pattern());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      String string2 = "&#xa0;";
      // Undeclared exception!
      try { 
        document1.selectFirst("&#xa0;");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '&#xa0;': unexpected token at '&#xa0;'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      
      element0.reparentChild(document0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("checkbox", "checkbox");
      assertNotNull(elements0);
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string0 = "*L'.d!";
      // Undeclared exception!
      document0.val("*L'.d!");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!6)m-fz.M[&~]$`+!1=", "!6)m-fz.M[&~]$`+!1=");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.baseUri());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element0 = document1.head();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.baseUri());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("!6)m-fz.M[&~]$`+!1=", element0.baseUri());
      assertTrue(element0.isBlock());
      
      document1.nodelistChanged();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.baseUri());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = (Document)document1.tagName(":qEc[hF*95");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":qec[hf*95", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(":qec[hf*95", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.baseUri());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(":qec[hf*95", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document2.location());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("$uz", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("$uz", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("$uz", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      String string0 = parseSettings0.normalizeAttribute("VHPev>");
      assertEquals("VHPev>", string0);
      assertNotNull(string0);
      
      Document document3 = Document.createShell(":qEc[hF*95");
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(":qEc[hF*95", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(":qEc[hF*95", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      
      boolean boolean0 = document3.hasAttributes();
      assertFalse(boolean0);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(":qEc[hF*95", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(":qEc[hF*95", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      
      Document document4 = Parser.parseBodyFragment("!6)m-fz.M[&~]$`+!1=", "VHPev>");
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotNull(document4);
      assertEquals(0, document4.siblingIndex());
      assertEquals("VHPev>", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("VHPev>", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      
      String string1 = document4.baseUri();
      assertEquals("VHPev>", string1);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotNull(string1);
      assertEquals(0, document4.siblingIndex());
      assertEquals("VHPev>", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("VHPev>", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      
      Document document5 = (Document)document4.text(":qEc[hF*95");
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertSame(document5, document4);
      assertNotNull(document5);
      assertEquals(0, document4.siblingIndex());
      assertEquals("VHPev>", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("VHPev>", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("VHPev>", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals("VHPev>", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      
      String string2 = document5.val();
      assertEquals("", string2);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document3);
      assertSame(document5, document4);
      assertNotNull(string2);
      assertEquals(0, document4.siblingIndex());
      assertEquals("VHPev>", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("VHPev>", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("VHPev>", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals("VHPev>", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      
      Document document6 = Parser.parseBodyFragmentRelaxed("<IDXJd}", "$uz");
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertNotSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document2);
      assertNotSame(document6, document3);
      assertNotNull(document6);
      assertFalse(document6.hasParent());
      assertEquals("$uz", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertEquals(1, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("$uz", document6.location());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      
      // Undeclared exception!
      try { 
        document4.child((-1718));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(";wL/~e", ";wL/~e");
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Element element1 = element0.html("html");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(";wL/~e", element1.baseUri());
      
      Elements elements2 = element1.previousElementSiblings();
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(";wL/~e", element1.baseUri());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("html"));
      
      Element element2 = element0.classNames((Set<String>) linkedHashSet0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(";wL/~e", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.nodeName());
      assertFalse(linkedHashSet0.contains("html"));
      
      Element element3 = element1.toggleClass(";wL/~e");
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element1, element3);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertNotNull(element3);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals(1, element3.childNodeSize());
      assertEquals("body", element3.tagName());
      assertTrue(element3.isBlock());
      assertEquals(1, element3.siblingIndex());
      assertEquals("body", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals(";wL/~e", element3.baseUri());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.nodelistChanged();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      String string0 = Parser.unescapeEntities("[Z3# 56V", false);
      assertEquals("[Z3# 56V", string0);
      assertNotNull(string0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document1 = document0.parser(parser1);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.baseUri());
      
      Elements elements1 = document1.getElementsByAttributeValueEnding("I#J\"&1VR+6_.P-^,XYs", ":matchesOwn(");
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = element0.textNodes();
      assertSame(document0, document1);
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document2 = (Document)document1.text("^tm|&u@");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^tm|&u@", document2.location());
      assertFalse(document2.hasParent());
      
      Document document3 = (Document)document2.html("^tm|&u@");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^tm|&u@", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("^tm|&u@", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("[Z3# 56V"));
      
      Document document4 = (Document)document3.classNames((Set<String>) linkedHashSet0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotNull(document4);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^tm|&u@", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("^tm|&u@", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("#root", document4.tagName());
      assertEquals("^tm|&u@", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("^tm|&u@", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(linkedHashSet0.contains("[Z3# 56V"));
      
      String string1 = document1.ownText();
      assertEquals("^tm|&u@", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.baseUri());
      
      Elements elements2 = document1.getElementsMatchingOwnText("^tm|&u@");
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotNull(elements2);
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("^tm|&u@", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "&#x";
      Document document0 = Document.createShell("&#x");
      assertNotNull(document0);
      assertEquals("&#x", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("&#x", document0.location());
      
      Element element0 = document0.shallowClone();
      assertNotNull(element0);
      assertEquals("&#x", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("&#x", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals("&#x", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.isBlock());
      
      boolean boolean0 = element0.hasClass("&#x");
      assertFalse(boolean0);
      assertEquals("&#x", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("&#x", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals("&#x", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.isBlock());
      
      boolean boolean1 = Element.preserveWhitespace(document0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("&#x", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("&#x", document0.location());
      
      // Undeclared exception!
      try { 
        element0.is("&#x");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '&#x': unexpected token at '&#x'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = ":has(";
      Element element0 = new Element(":has(");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(":has(", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(":has(", element0.tagName());
      
      Element element1 = null;
      try {
        element1 = new Element((Tag) null, "head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("J", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("J", tag0.getName());
      assertEquals("J", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      String string1 = parseSettings0.normalizeAttribute("%s");
      assertEquals("%s", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("head", "J");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals("J", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      boolean boolean0 = element0.hasAttributes();
      assertTrue(boolean0);
      assertFalse(document0.hasParent());
      assertEquals("J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals("J", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      Document document1 = Parser.parseBodyFragment("iframe", "q;(k2%");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("q;(k2%", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("q;(k2%", document1.location());
      
      String string2 = document1.baseUri();
      assertEquals("q;(k2%", string2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document1, document0);
      assertNotNull(string2);
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("q;(k2%", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("q;(k2%", document1.location());
      
      Document document2 = Parser.parseBodyFragmentRelaxed("'vBSh/Q", "");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      CDataNode cDataNode0 = new CDataNode(" y");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "'vBSh/Q", attributes0);
      assertNotNull(pseudoTextElement0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("J", tag0.getName());
      assertEquals("J", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("J", pseudoTextElement0.tagName());
      assertEquals("'vBSh/Q", pseudoTextElement0.baseUri());
      assertEquals("J", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      
      boolean boolean1 = pseudoTextElement0.is((Evaluator) evaluator_IsRoot0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("J", tag0.getName());
      assertEquals("J", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("J", pseudoTextElement0.tagName());
      assertEquals("'vBSh/Q", pseudoTextElement0.baseUri());
      assertEquals("J", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      
      Elements elements0 = pseudoTextElement0.previousElementSiblings();
      assertNotNull(elements0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("J", tag0.getName());
      assertEquals("J", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("J", pseudoTextElement0.tagName());
      assertEquals("'vBSh/Q", pseudoTextElement0.baseUri());
      assertEquals("J", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Tag tag1 = Tag.valueOf("%s", parseSettings0);
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isEmpty());
      assertEquals("%s", tag1.getName());
      assertEquals("%s", tag1.toString());
      assertFalse(tag1.isKnownTag());
      assertTrue(tag1.isInline());
      assertFalse(tag1.preserveWhitespace());
      
      FormElement formElement0 = new FormElement(tag1, " y", attributes0);
      assertFalse(tag1.equals((Object)tag0));
      assertNotNull(formElement0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isEmpty());
      assertEquals("%s", tag1.getName());
      assertEquals("%s", tag1.toString());
      assertFalse(tag1.isKnownTag());
      assertTrue(tag1.isInline());
      assertFalse(tag1.preserveWhitespace());
      assertEquals(" y", formElement0.baseUri());
      assertEquals("%s", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("%s", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      
      FormElement formElement1 = formElement0.addElement(document2);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(tag1, tag0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(formElement1);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isEmpty());
      assertEquals("%s", tag1.getName());
      assertEquals("%s", tag1.toString());
      assertFalse(tag1.isKnownTag());
      assertTrue(tag1.isInline());
      assertFalse(tag1.preserveWhitespace());
      assertEquals(" y", formElement0.baseUri());
      assertEquals("%s", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("%s", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("%s", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(" y", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals("%s", formElement1.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      
      Set<String> set0 = formElement1.classNames();
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(tag1, tag0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(set0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isEmpty());
      assertEquals("%s", tag1.getName());
      assertEquals("%s", tag1.toString());
      assertFalse(tag1.isKnownTag());
      assertTrue(tag1.isInline());
      assertFalse(tag1.preserveWhitespace());
      assertEquals(" y", formElement0.baseUri());
      assertEquals("%s", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("%s", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("%s", formElement1.tagName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(" y", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals("%s", formElement1.nodeName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(set0.contains("q;(k2%"));
      
      Element element1 = pseudoTextElement0.appendChild(cDataNode0);
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(pseudoTextElement0, element1);
      assertSame(element1, pseudoTextElement0);
      assertNotNull(element1);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isKnownTag());
      assertEquals("J", tag0.getName());
      assertEquals("J", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("J", pseudoTextElement0.tagName());
      assertEquals("'vBSh/Q", pseudoTextElement0.baseUri());
      assertEquals("J", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("J", element1.tagName());
      assertEquals("'vBSh/Q", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("J", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      
      Document document3 = (Document)document0.clone();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals("J", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("J", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("J", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("J", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.text("textarea");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      
      Elements elements0 = document0.siblingElements();
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document1.insertChildren((-1074), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`q", "`q");
      assertNotNull(document0);
      assertEquals("`q", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("`q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("`q", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("`q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("`q", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("`q", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      
      Element element0 = document1.createElement("n3af,'s%6t/h7y{_|qh");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertEquals("`q", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("`q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("`q", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("`q", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("n3af,'s%6t/h7y{_|qh", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("`q", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Elements elements0 = element0.getElementsByAttributeValueEnding("`q", "n3af,'s%6t/h7y{_|qh");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertEquals("`q", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("`q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("`q", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("`q", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("n3af,'s%6t/h7y{_|qh", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("n3af,'s%6t/h7y{_|qh", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("`q", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = document0.getElementsContainingOwnText("`q");
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("`q", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("`q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(" > ");
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = new Attributes();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotNull(attributes1);
      assertEquals(0, attributes1.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "qxb", attributes0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(">", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("qxb", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      
      Element element0 = pseudoTextElement0.text(" > ");
      assertTrue(attributes0.equals((Object)attributes1));
      assertNotSame(attributes0, attributes1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertNotNull(element0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals(">", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("qxb", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("qxb", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.hasParent());
      
      Elements elements0 = element0.parents();
      assertTrue(attributes0.equals((Object)attributes1));
      assertNotSame(attributes0, attributes1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertNotNull(elements0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals(">", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("qxb", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("qxb", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = pseudoTextElement0.elementSiblingIndex();
      assertEquals(0, int0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertNotSame(attributes0, attributes1);
      assertSame(pseudoTextElement0, element0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals(">", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("qxb", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      
      PseudoTextElement pseudoTextElement1 = new PseudoTextElement(tag0, "head", attributes1);
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(pseudoTextElement1.equals((Object)pseudoTextElement0));
      assertFalse(pseudoTextElement1.equals((Object)element0));
      assertNotNull(pseudoTextElement1);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes1.size());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertFalse(pseudoTextElement1.hasParent());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals(">", pseudoTextElement1.nodeName());
      assertEquals("head", pseudoTextElement1.baseUri());
      assertEquals(">", pseudoTextElement1.tagName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      
      Elements elements1 = pseudoTextElement1.select("qxb");
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(pseudoTextElement1.equals((Object)pseudoTextElement0));
      assertFalse(pseudoTextElement1.equals((Object)element0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(attributes1, attributes0);
      assertNotSame(pseudoTextElement1, pseudoTextElement0);
      assertNotSame(pseudoTextElement1, element0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes1.size());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertFalse(pseudoTextElement1.hasParent());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals(">", pseudoTextElement1.nodeName());
      assertEquals("head", pseudoTextElement1.baseUri());
      assertEquals(">", pseudoTextElement1.tagName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Pattern pattern0 = Pattern.compile("qxb");
      assertNotNull(pattern0);
      assertEquals("qxb", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("qxb", pattern0.toString());
      
      Elements elements2 = element0.getElementsMatchingOwnText(pattern0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertFalse(pseudoTextElement0.equals((Object)pseudoTextElement1));
      assertFalse(element0.equals((Object)pseudoTextElement1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotSame(attributes0, attributes1);
      assertSame(pseudoTextElement0, element0);
      assertNotSame(pseudoTextElement0, pseudoTextElement1);
      assertNotSame(element0, pseudoTextElement1);
      assertSame(element0, pseudoTextElement0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertNotNull(elements2);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals(">", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("qxb", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("qxb", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("qxb", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("qxb", pattern0.toString());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      
      Elements elements3 = pseudoTextElement0.getElementsByAttributeValueMatching("html", "head");
      assertTrue(attributes0.equals((Object)attributes1));
      assertFalse(pseudoTextElement0.equals((Object)pseudoTextElement1));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertNotSame(attributes0, attributes1);
      assertSame(pseudoTextElement0, element0);
      assertNotSame(pseudoTextElement0, pseudoTextElement1);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotNull(elements3);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals(">", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("qxb", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = ".a0=:_na?TTcp_";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)122;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)20, (byte)62, (byte) (-1), (byte)72, (byte)1, (byte)122}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Document document0 = Parser.parseBodyFragment(".a0=:_na?TTcp_", "?^rd$oqbn%&vs){");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("?^rd$oqbn%&vs){", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("?^rd$oqbn%&vs){", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.text("#root");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("?^rd$oqbn%&vs){", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("?^rd$oqbn%&vs){", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("?^rd$oqbn%&vs){", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("?^rd$oqbn%&vs){", document1.baseUri());
      
      document0.updateMetaCharsetElement(true);
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("?^rd$oqbn%&vs){", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("?^rd$oqbn%&vs){", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Set<String> set0 = document1.classNames();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(set0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("?^rd$oqbn%&vs){", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("?^rd$oqbn%&vs){", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("?^rd$oqbn%&vs){", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals("?^rd$oqbn%&vs){", document1.baseUri());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(".a0=:_na?TTcp_"));
      
      Document document2 = (Document)document1.empty();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("?^rd$oqbn%&vs){", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("?^rd$oqbn%&vs){", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("?^rd$oqbn%&vs){", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals("?^rd$oqbn%&vs){", document1.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("?^rd$oqbn%&vs){", document2.baseUri());
      assertEquals("?^rd$oqbn%&vs){", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      
      Elements elements0 = document1.siblingElements();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("?^rd$oqbn%&vs){", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("?^rd$oqbn%&vs){", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("?^rd$oqbn%&vs){", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals("?^rd$oqbn%&vs){", document1.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string1 = document1.baseUri();
      assertEquals("?^rd$oqbn%&vs){", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(string1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("?^rd$oqbn%&vs){", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("?^rd$oqbn%&vs){", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("?^rd$oqbn%&vs){", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.updateMetaCharsetElement());
      assertEquals("?^rd$oqbn%&vs){", document1.baseUri());
      
      String string2 = document0.className();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(string2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("?^rd$oqbn%&vs){", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("?^rd$oqbn%&vs){", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document1.before((Node) document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "!6)m-fz.M[&~]$`+!1=";
      Document document0 = Parser.parseBodyFragmentRelaxed("!6)m-fz.M[&~]$`+!1=", "!6)m-fz.M[&~]$`+!1=");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.location());
      assertFalse(document1.hasParent());
      
      Element element0 = document1.head();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("!6)m-fz.M[&~]$`+!1=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      
      String string1 = "DoctypeSystemIdentifier_doubleQuoted";
      Element element1 = element0.getElementById("DoctypeSystemIdentifier_doubleQuoted");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("!6)m-fz.M[&~]$`+!1=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Element element2 = element0.empty();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotNull(element2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("!6)m-fz.M[&~]$`+!1=", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("!6)m-fz.M[&~]$`+!1=", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("!6)m-fz.M[&~]$`+!1=", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      
      int int0 = 32;
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        document0.insertChildren(32, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mxmn", "mxmn");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mxmn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mxmn", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Pattern pattern0 = Pattern.compile("org.jsoup.select.Evaluator$AttributeWithValue");
      assertNotNull(pattern0);
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValue", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValue", pattern0.pattern());
      
      Pattern pattern1 = Pattern.compile("mxmn");
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotSame(pattern1, pattern0);
      assertNotNull(pattern1);
      assertEquals("mxmn", pattern1.pattern());
      assertEquals(0, pattern1.flags());
      assertEquals("mxmn", pattern1.toString());
      
      Document document1 = (Document)document0.prepend("Hzof+");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mxmn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mxmn", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("mxmn", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("mxmn", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertFalse(pattern0.equals((Object)pattern1));
      assertNotSame(pattern0, pattern1);
      assertNotNull(predicate0);
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValue", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValue", pattern0.pattern());
      
      int int0 = 5102;
      Elements elements0 = document0.getElementsByIndexLessThan(5102);
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mxmn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mxmn", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      
      Predicate<String> predicate1 = pattern0.asPredicate();
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotSame(pattern0, pattern1);
      assertNotSame(predicate1, predicate0);
      assertNotNull(predicate1);
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValue", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValue", pattern0.pattern());
      
      Elements elements1 = document0.getElementsMatchingText(pattern0);
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(pattern0, pattern1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mxmn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mxmn", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValue", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValue", pattern0.pattern());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      int int1 = 1;
      Elements elements2 = document1.getElementsByIndexGreaterThan(1);
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mxmn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mxmn", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("mxmn", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("mxmn", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      
      String string0 = document1.html();
      assertEquals("Hzof+\n<html>\n <head></head>\n <body>\n  mxmn\n </body>\n</html>", string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mxmn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mxmn", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("mxmn", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("mxmn", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      
      String string1 = document0.nodeName();
      assertEquals("#document", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertNotNull(string1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mxmn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mxmn", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      String string2 = document0.val();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document1);
      assertNotNull(string2);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mxmn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mxmn", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hzof+");
      assertFalse(boolean0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0, "mzVgH2?<fq<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "tn";
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tn", document0.baseUri());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tn", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals("tn", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      
      List<TextNode> list0 = document1.textNodes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals("tn", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Elements elements1 = document1.getElementsByAttributeValueContaining("tn", ">lJ");
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals("tn", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      String string1 = document0.data();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertNotNull(string1);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tn", document0.baseUri());
      
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = new Document(" > ");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      
      String string0 = document0.text();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("html", "html");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document1 = (Document)document0.html("#root");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(" > ", document1.location());
      assertEquals(" > ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(" > "));
      
      Elements elements1 = document0.getElementsContainingText("}KUL,{f");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Document document2 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(" > ", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(" > ", document2.location());
      assertFalse(linkedHashSet0.contains(" > "));
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(" > ", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(" > ", document2.location());
      assertFalse(linkedHashSet0.contains(" > "));
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(";wL/~e", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(";wL/~e", ";wL/~e");
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Element element1 = element0.html("html");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(";wL/~e", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(";wL/~e"));
      
      Element element2 = element0.classNames((Set<String>) linkedHashSet0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotNull(element2);
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(";wL/~e", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(";wL/~e", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertFalse(linkedHashSet0.contains(";wL/~e"));
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.previousElementSibling();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      
      Element element2 = element1.before((Node) element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotNull(element2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(";wL/~e", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(";wL/~e", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(";wL/~e", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(";wL/~e", element2.baseUri());
      assertEquals("head", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueContaining(";wL/~e", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      document0.nodelistChanged();
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'K';
      charArray0[1] = '\"';
      Document document2 = (Document)document0.appendChild(document1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("^tm|&u@", document0.location());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("^tm|&u@", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals("^tm|&u@", document2.location());
      assertEquals("^tm|&u@", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      
      charArray0[2] = 't';
      // Undeclared exception!
      document1.html();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("Uk,Qn wCQIDRf/iB9g0");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      Elements elements0 = element0.parents();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      Elements elements1 = element0.getElementsByAttribute("#a\"^kwMg7+");
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Uk,Qn wCQIDRf/iB9g0", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertEquals("tn", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tn", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertEquals("tn", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tn", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document1 = Document.createShell("tn");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      
      String string0 = document0.data();
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertEquals("tn", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tn", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = new Element("tn");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("tn", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tn", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(" > ", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "VfbapKa%", attributes1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("VfbapKa%", pseudoTextElement0.baseUri());
      assertEquals(">", pseudoTextElement0.tagName());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      
      Element element0 = pseudoTextElement0.text(" > ");
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertNotNull(element0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("VfbapKa%", pseudoTextElement0.baseUri());
      assertEquals(">", pseudoTextElement0.tagName());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("VfbapKa%", element0.baseUri());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int0 = pseudoTextElement0.elementSiblingIndex();
      assertEquals(0, int0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, element0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("VfbapKa%", pseudoTextElement0.baseUri());
      assertEquals(">", pseudoTextElement0.tagName());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      
      Elements elements0 = pseudoTextElement0.select("class");
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, element0);
      assertNotNull(elements0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("VfbapKa%", pseudoTextElement0.baseUri());
      assertEquals(">", pseudoTextElement0.tagName());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("iframe", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      
      String string0 = "HA<Bnz-TVi";
      String string1 = parseSettings0.normalizeAttribute("HA<Bnz-TVi");
      assertEquals("ha<bnz-tvi", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string2 = parseSettings0.normalizeTag("iframe");
      assertEquals("iframe", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Element element0 = new Element(tag0, "", attributes0);
      assertNotNull(element0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("iframe", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("iframe", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HA<Bnz-TVi");
      assertFalse(boolean0);
      
      String string3 = element0.id();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("iframe", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("iframe", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      ParseSettings parseSettings1 = ParseSettings.preserveCase;
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotSame(parseSettings1, parseSettings0);
      assertNotNull(parseSettings1);
      
      Tag tag1 = Tag.valueOf("iframe", parseSettings1);
      assertFalse(parseSettings1.equals((Object)parseSettings0));
      assertNotSame(parseSettings1, parseSettings0);
      assertSame(tag1, tag0);
      assertNotNull(tag1);
      assertTrue(tag1.isKnownTag());
      assertFalse(tag1.formatAsBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isData());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isBlock());
      assertEquals("iframe", tag1.toString());
      assertEquals("iframe", tag1.getName());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.preserveWhitespace());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      String string4 = parseSettings0.normalizeAttribute("org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.element$nodelist", string4);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotSame(parseSettings0, parseSettings1);
      assertNotNull(string4);
      
      boolean boolean1 = element0.hasAttributes();
      assertTrue(boolean1);
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(parseSettings0, parseSettings1);
      assertSame(tag0, tag1);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("iframe", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("iframe", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Document document0 = Parser.parseBodyFragment("ha<bnz-tvi", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      String string5 = document0.baseUri();
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      String string6 = element0.val();
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(parseSettings0.equals((Object)parseSettings1));
      assertNotSame(parseSettings0, parseSettings1);
      assertSame(tag0, tag1);
      assertNotNull(string6);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("iframe", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("iframe", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("BeforeDoctypePublicIdentifier", "org.jsoup.nodes.Element");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      // Undeclared exception!
      try { 
        document1.child(5725);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5725, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^tm|&u@");
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      
      document0.nodelistChanged();
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'K';
      charArray0[1] = '\"';
      charArray0[2] = 't';
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document2 = (Document)document0.tagName("body");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.isBlock());
      assertEquals("body", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^tm|&u@", document2.location());
      assertTrue(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals("body", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("W^>", "+bZGK");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.isBlock());
      assertEquals("body", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document3 = document0.clone();
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.isBlock());
      assertEquals("body", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("^tm|&u@", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("^tm|&u@", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("body", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.isBlock());
      assertFalse(document3.hasParent());
      
      boolean boolean1 = document1.is("method");
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertTrue(boolean1 == boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.isBlock());
      assertEquals("body", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("body", document1.tagName());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertTrue(document1.isBlock());
      
      Tag tag0 = Tag.valueOf("del", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.canContainBlock());
      assertEquals("del", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertEquals("del", tag0.getName());
      assertFalse(tag0.isData());
      
      CDataNode cDataNode0 = new CDataNode("del");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes0, attributes1);
      assertNotNull(attributes1);
      assertEquals(1, attributes1.size());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Attributes attributes2 = attributes0.put("W^>", "go 1=&{");
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes1));
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotNull(attributes2);
      assertEquals(2, attributes2.size());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "n3af,'s%6t/h7y{_|qh", attributes2);
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes1));
      assertNotNull(pseudoTextElement0);
      assertEquals(2, attributes2.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("del", pseudoTextElement0.tagName());
      assertEquals("n3af,'s%6t/h7y{_|qh", pseudoTextElement0.baseUri());
      assertTrue(pseudoTextElement0.isBlock());
      assertEquals("del", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertTrue(tag0.canContainBlock());
      assertEquals("del", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertEquals("del", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      boolean boolean2 = pseudoTextElement0.is((Evaluator) evaluator_IsRoot0);
      assertTrue(boolean2);
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertEquals(2, attributes2.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("del", pseudoTextElement0.tagName());
      assertEquals("n3af,'s%6t/h7y{_|qh", pseudoTextElement0.baseUri());
      assertTrue(pseudoTextElement0.isBlock());
      assertEquals("del", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertTrue(tag0.canContainBlock());
      assertEquals("del", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertEquals("del", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      
      Elements elements1 = pseudoTextElement0.previousElementSiblings();
      assertFalse(attributes2.equals((Object)attributes1));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(attributes0.equals((Object)attributes1));
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertNotSame(elements1, elements0);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotNull(elements1);
      assertEquals(2, attributes2.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("del", pseudoTextElement0.tagName());
      assertEquals("n3af,'s%6t/h7y{_|qh", pseudoTextElement0.baseUri());
      assertTrue(pseudoTextElement0.isBlock());
      assertEquals("del", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(tag0.canContainBlock());
      assertEquals("del", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertEquals("del", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      
      String string0 = attributes2.get("del");
      assertEquals("", string0);
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes1));
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotNull(string0);
      assertEquals(2, attributes2.size());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      
      Set<String> set0 = document1.classNames();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotNull(set0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.isBlock());
      assertEquals("body", document0.tagName());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("body", document1.tagName());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertTrue(document1.isBlock());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("+bZGK"));
      
      PseudoTextElement pseudoTextElement1 = (PseudoTextElement)pseudoTextElement0.appendChild(cDataNode0);
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes1));
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotNull(pseudoTextElement1);
      assertEquals(2, attributes2.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("del", pseudoTextElement0.tagName());
      assertEquals("n3af,'s%6t/h7y{_|qh", pseudoTextElement0.baseUri());
      assertTrue(pseudoTextElement0.isBlock());
      assertEquals("del", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement1.childNodeSize());
      assertEquals("del", pseudoTextElement1.tagName());
      assertTrue(pseudoTextElement1.isBlock());
      assertFalse(pseudoTextElement1.hasParent());
      assertEquals("del", pseudoTextElement1.nodeName());
      assertEquals("n3af,'s%6t/h7y{_|qh", pseudoTextElement1.baseUri());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertTrue(tag0.canContainBlock());
      assertEquals("del", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.formatAsBlock());
      assertEquals("del", tag0.getName());
      assertFalse(tag0.isData());
      assertTrue(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("", "m)2Z");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("m)2Z", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      
      Element element0 = document2.head();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("m)2Z", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("m)2Z", element0.baseUri());
      
      Document document3 = element0.ownerDocument();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("m)2Z", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("m)2Z", element0.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("m)2Z", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("m)2Z", document3.baseUri());
      assertFalse(document3.hasParent());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Elements elements0 = document1.getElementsByAttributeValueEnding("\"[,2hq1peN,|ivFu", "m)2Z");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      List<TextNode> list0 = document1.textNodes();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document4 = document3.clone();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document3, document4);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("m)2Z", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("m)2Z", element0.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("m)2Z", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("m)2Z", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("m)2Z", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("m)2Z", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      
      Document document5 = (Document)document4.html("progress");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertNotSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document3, document5);
      assertNotSame(document3, document4);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document5);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotNull(document5);
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("m)2Z", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("m)2Z", element0.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("m)2Z", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("m)2Z", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("m)2Z", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("m)2Z", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("m)2Z", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("m)2Z", document5.location());
      assertEquals(1, document5.childNodeSize());
      
      String string1 = "L\",";
      Elements elements1 = document4.getElementsByClass("L\",");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertNotSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document3, document5);
      assertNotSame(document3, document4);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document5);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("m)2Z", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("m)2Z", element0.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("m)2Z", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("m)2Z", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("m)2Z", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("m)2Z", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("progress"));
      
      // Undeclared exception!
      try { 
        document4.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.nodelistChanged();
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'K';
      charArray0[1] = '\"';
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L<shg<L+1CzMy_s0G&");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document0.isBlock();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(document0, document1);
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsByIndexLessThan(38);
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document2 = (Document)document1.appendText("value");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^tm|&u@", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document2.location());
      assertFalse(document2.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("textarea", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      Document document1 = Document.createShell("tn");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("tn", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("#root", "#root");
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document1.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("P'9 ");
      assertNotNull(tag0);
      assertEquals("P'9", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("P'9", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      CDataNode cDataNode0 = new CDataNode("P'9 ");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      Tag tag1 = Tag.valueOf("<Lvyix(#}5e[&", parseSettings0);
      assertFalse(tag1.equals((Object)tag0));
      assertNotSame(tag1, tag0);
      assertNotNull(tag1);
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isFormListed());
      assertEquals("<lvyix(#}5e[&", tag1.toString());
      assertTrue(tag1.isInline());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.canContainBlock());
      assertEquals("<lvyix(#}5e[&", tag1.getName());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isBlock());
      
      String string0 = parseSettings0.normalizeTag("P'9 ");
      assertEquals("p'9", string0);
      assertNotNull(string0);
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "P'9 ", attributes0);
      assertFalse(tag0.equals((Object)tag1));
      assertNotNull(pseudoTextElement0);
      assertEquals("P'9", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("P'9", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("P'9 ", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("P'9", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("P'9", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      
      Elements elements0 = pseudoTextElement0.getElementsByAttributeValueContaining("<Lvyix(#}5e[&", "P'9 ");
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertNotNull(elements0);
      assertEquals("P'9", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("P'9", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("P'9 ", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("P'9", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("P'9", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element0 = pseudoTextElement0.addClass("N)pQ8#@");
      assertFalse(tag0.equals((Object)tag1));
      assertNotSame(tag0, tag1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertNotNull(element0);
      assertEquals("P'9", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("P'9", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes0.size());
      assertEquals("P'9 ", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("P'9", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("P'9", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("P'9", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("P'9 ", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("P'9", element0.nodeName());
      
      String string1 = pseudoTextElement0.html();
      assertEquals("", string1);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(tag0, tag1);
      assertSame(pseudoTextElement0, element0);
      assertNotNull(string1);
      assertEquals("P'9", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("P'9", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes0.size());
      assertEquals("P'9 ", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("P'9", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("P'9", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.doClone(pseudoTextElement0);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(tag0, tag1);
      assertSame(pseudoTextElement0, element0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("P'9", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("P'9", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(2, attributes0.size());
      assertEquals("P'9 ", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("P'9", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("P'9", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h2", "| )e-'H;=y*NI>Xs9P`");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.append("id");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.baseUri());
      assertFalse(document1.hasParent());
      
      String string0 = document0.wholeText();
      assertEquals("h2id", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Document document2 = (Document)document0.text("tmrnnj");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.baseUri());
      
      Elements elements0 = document2.siblingElements();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Element element0 = document1.appendElement("?^rD$OqbN%&vS){");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", element0.baseUri());
      assertEquals("?^rd$oqbn%&vs){", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("?^rd$oqbn%&vs){", element0.tagName());
      
      Element element1 = element0.before("id");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(4, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", element0.baseUri());
      assertEquals("?^rd$oqbn%&vs){", element0.nodeName());
      assertEquals(3, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("?^rd$oqbn%&vs){", element0.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("?^rd$oqbn%&vs){", element1.tagName());
      assertEquals(3, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("?^rd$oqbn%&vs){", element1.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", element1.baseUri());
      assertFalse(element1.isBlock());
      
      boolean boolean0 = document2.hasText();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(4, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.baseUri());
      
      String string1 = document2.data();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(4, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.baseUri());
      
      Elements elements1 = document1.getElementsMatchingOwnText("id");
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(4, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding("h2", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      
      String string0 = document0.text();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("org.jsoup.internal.StringUtil", "org.jsoup.internal.StringUtil");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = (Document)document0.val("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(" > ", document1.location());
      assertEquals(" > ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      List<TextNode> list0 = document0.textNodes();
      assertSame(document0, document1);
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(":only-child", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = Parser.parse("head", "head");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document1.isBlock());
      assertEquals("head", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("head", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Elements elements0 = document0.parents();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document2 = (Document)document0.text("tn");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("tn", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("tn", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("head", "*L'.d!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: *L'.d!
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.text();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "textarea");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = document0.isBlock();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(2, elements0.size());
      
      Document document1 = (Document)document0.appendText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(" > ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(" > ", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements1 = document0.getElementsByAttributeValue(" > ", "[)76b0*]bmXnYR<6s3");
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(" > ", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put(" > ", " > ");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " > ", attributes1);
      assertNotNull(pseudoTextElement0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(">", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertEquals(" > ", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      
      PseudoTextElement pseudoTextElement1 = new PseudoTextElement(tag0, " > ", attributes1);
      assertFalse(pseudoTextElement1.equals((Object)pseudoTextElement0));
      assertNotNull(pseudoTextElement1);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(" > ", pseudoTextElement1.baseUri());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals(">", pseudoTextElement1.tagName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertFalse(pseudoTextElement1.hasParent());
      assertEquals(">", pseudoTextElement1.nodeName());
      
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("Could not parse attribute query '%s': unexpected token at '%s'");
      assertNotNull(evaluator_ContainsData0);
      
      boolean boolean0 = pseudoTextElement1.is((Evaluator) evaluator_ContainsData0);
      assertFalse(boolean0);
      assertFalse(pseudoTextElement1.equals((Object)pseudoTextElement0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(pseudoTextElement1, pseudoTextElement0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(" > ", pseudoTextElement1.baseUri());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals(">", pseudoTextElement1.tagName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertFalse(pseudoTextElement1.hasParent());
      assertEquals(">", pseudoTextElement1.nodeName());
      
      Elements elements0 = pseudoTextElement0.previousElementSiblings();
      assertFalse(pseudoTextElement0.equals((Object)pseudoTextElement1));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(pseudoTextElement0, pseudoTextElement1);
      assertNotNull(elements0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(">", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertEquals(" > ", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      String string0 = attributes1.get("Could not parse attribute query '%s': unexpected token at '%s'");
      assertEquals("", string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotNull(string0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      Set<String> set0 = pseudoTextElement1.classNames();
      assertFalse(pseudoTextElement1.equals((Object)pseudoTextElement0));
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(pseudoTextElement1, pseudoTextElement0);
      assertNotNull(set0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(" > ", pseudoTextElement1.baseUri());
      assertEquals(0, pseudoTextElement1.childNodeSize());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals(">", pseudoTextElement1.tagName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertFalse(pseudoTextElement1.hasParent());
      assertEquals(">", pseudoTextElement1.nodeName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(" > "));
      
      Attributes attributes2 = new Attributes();
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertNotNull(attributes2);
      assertEquals(0, attributes2.size());
      
      PseudoTextElement pseudoTextElement2 = new PseudoTextElement(tag0, "#comment", attributes2);
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(pseudoTextElement2.equals((Object)pseudoTextElement1));
      assertFalse(pseudoTextElement2.equals((Object)pseudoTextElement0));
      assertNotNull(pseudoTextElement2);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes2.size());
      assertEquals(">", pseudoTextElement2.tagName());
      assertEquals(0, pseudoTextElement2.siblingIndex());
      assertEquals(0, pseudoTextElement2.childNodeSize());
      assertEquals("#comment", pseudoTextElement2.baseUri());
      assertFalse(pseudoTextElement2.hasParent());
      assertFalse(pseudoTextElement2.isBlock());
      assertEquals(">", pseudoTextElement2.nodeName());
      
      Element element0 = pseudoTextElement2.appendChild(pseudoTextElement0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(pseudoTextElement0.equals((Object)pseudoTextElement2));
      assertFalse(pseudoTextElement0.equals((Object)pseudoTextElement1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(pseudoTextElement2.equals((Object)pseudoTextElement1));
      assertFalse(pseudoTextElement2.equals((Object)pseudoTextElement0));
      assertFalse(element0.equals((Object)pseudoTextElement1));
      assertFalse(element0.equals((Object)pseudoTextElement0));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(pseudoTextElement0, pseudoTextElement2);
      assertNotSame(pseudoTextElement0, element0);
      assertNotSame(pseudoTextElement0, pseudoTextElement1);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertNotSame(pseudoTextElement2, pseudoTextElement1);
      assertSame(pseudoTextElement2, element0);
      assertNotSame(pseudoTextElement2, pseudoTextElement0);
      assertNotSame(element0, pseudoTextElement1);
      assertSame(element0, pseudoTextElement2);
      assertNotSame(element0, pseudoTextElement0);
      assertNotNull(element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(">", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertEquals(" > ", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals(0, attributes2.size());
      assertEquals(">", pseudoTextElement2.tagName());
      assertEquals(0, pseudoTextElement2.siblingIndex());
      assertEquals(1, pseudoTextElement2.childNodeSize());
      assertEquals("#comment", pseudoTextElement2.baseUri());
      assertFalse(pseudoTextElement2.hasParent());
      assertFalse(pseudoTextElement2.isBlock());
      assertEquals(">", pseudoTextElement2.nodeName());
      assertEquals(">", element0.nodeName());
      assertEquals("#comment", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("UkG)x^r", "M.\"CfaDO#|/");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("M.\"CfaDO#|/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M.\"CfaDO#|/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("M.\"CfaDO#|/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M.\"CfaDO#|/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("M.\"CfaDO#|/", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("M.\"CfaDO#|/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      
      Element element0 = document0.head();
      assertSame(document0, document1);
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("M.\"CfaDO#|/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M.\"CfaDO#|/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("M.\"CfaDO#|/", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Document document2 = document0.ownerDocument();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("M.\"CfaDO#|/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M.\"CfaDO#|/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("M.\"CfaDO#|/", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("M.\"CfaDO#|/", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Element element1 = element0.text("UkG)x^r");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals("M.\"CfaDO#|/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M.\"CfaDO#|/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("M.\"CfaDO#|/", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("M.\"CfaDO#|/", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      
      String string0 = document2.html();
      assertEquals("<html>\n <head>\n  UkG)x^r\n </head>\n <body>\n  UkG)x^r\n </body>\n</html>", string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals("M.\"CfaDO#|/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M.\"CfaDO#|/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("M.\"CfaDO#|/", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("M.\"CfaDO#|/", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      
      Tag tag0 = Tag.valueOf("M.\"CfaDO#|/");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertEquals("M.\"CfaDO#|/", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("M.\"CfaDO#|/", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      
      FormElement formElement0 = new FormElement(tag0, "M.\"CfaDO#|/", (Attributes) null);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertEquals("M.\"CfaDO#|/", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("M.\"CfaDO#|/", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("M.\"CfaDO#|/", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("M.\"CfaDO#|/", formElement0.nodeName());
      assertEquals("M.\"CfaDO#|/", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      
      FormElement formElement1 = formElement0.addElement(document1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertEquals("#root", document0.tagName());
      assertEquals("M.\"CfaDO#|/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M.\"CfaDO#|/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("M.\"CfaDO#|/", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("M.\"CfaDO#|/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(tag0.isData());
      assertEquals("M.\"CfaDO#|/", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("M.\"CfaDO#|/", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("M.\"CfaDO#|/", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("M.\"CfaDO#|/", formElement0.nodeName());
      assertEquals("M.\"CfaDO#|/", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("M.\"CfaDO#|/", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("M.\"CfaDO#|/", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("M.\"CfaDO#|/", formElement1.baseUri());
      
      boolean boolean0 = formElement1.hasClass("M.\"CfaDO#|/");
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertEquals("#root", document0.tagName());
      assertEquals("M.\"CfaDO#|/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M.\"CfaDO#|/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("M.\"CfaDO#|/", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("M.\"CfaDO#|/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(tag0.isData());
      assertEquals("M.\"CfaDO#|/", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals("M.\"CfaDO#|/", tag0.getName());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("M.\"CfaDO#|/", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("M.\"CfaDO#|/", formElement0.nodeName());
      assertEquals("M.\"CfaDO#|/", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("M.\"CfaDO#|/", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("M.\"CfaDO#|/", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("M.\"CfaDO#|/", formElement1.baseUri());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document3 = parser0.parseInput("n3af,'s%6t/h7y{_|qh", "n3af,'s%6t/h7y{_|qh");
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("n3af,'s%6t/h7y{_|qh", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("n3af,'s%6t/h7y{_|qh", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      
      Elements elements0 = document3.parents();
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("n3af,'s%6t/h7y{_|qh", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("n3af,'s%6t/h7y{_|qh", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.is("n3af,'s%6t/h7y{_|qh");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ''s%6t/h7y{_|qh': unexpected token at ''s%6t/h7y{_|qh'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(" > ", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertNotNull(attributes1);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " > ", attributes1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(" > ", pseudoTextElement0.baseUri());
      assertEquals(">", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(">", pseudoTextElement0.nodeName());
      
      Element element0 = pseudoTextElement0.text(" > ");
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      assertNotNull(element0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals(" > ", pseudoTextElement0.baseUri());
      assertEquals(">", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(">", pseudoTextElement0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(" > ", element0.baseUri());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      int int0 = pseudoTextElement0.elementSiblingIndex();
      assertEquals(0, int0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(pseudoTextElement0, element0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals(" > ", pseudoTextElement0.baseUri());
      assertEquals(">", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(">", pseudoTextElement0.nodeName());
      
      // Undeclared exception!
      try { 
        pseudoTextElement0.select("kqsU:\"*nPK0~Pq8Rf");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'kqsU:\"*nPK0~Pq8Rf': unexpected token at ':\"*nPK0~Pq8Rf'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pa+?+7; 8Pw", "s+");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s+", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Document document1 = document0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s+", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s+", document1.location());
      assertEquals("s+", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      Element element0 = document1.createElement("Pa+?+7; 8Pw");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s+", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s+", document1.location());
      assertEquals("s+", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Pa+?+7; 8Pw", element0.tagName());
      assertEquals("Pa+?+7; 8Pw", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("s+", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = element0.getElementsByAttributeValue("s+", "Pa+?+7; 8Pw");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s+", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("s+", document1.location());
      assertEquals("s+", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Pa+?+7; 8Pw", element0.tagName());
      assertEquals("Pa+?+7; 8Pw", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("s+", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("^m|&@");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("^m|&@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("^m|&@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^m|&@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals("^m|&@", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^m|&@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("^m|&@", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("^m|&@", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      Document document3 = Parser.parseBodyFragmentRelaxed("^m|&@", "^m|&@");
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertEquals(0, document3.siblingIndex());
      assertEquals("^m|&@", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("^m|&@", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      
      // Undeclared exception!
      try { 
        document3.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.nodelistChanged();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals("^tm|&u@", document1.location());
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'K';
      charArray0[1] = '\"';
      charArray0[2] = 'K';
      Elements elements0 = document1.getElementsByAttributeValueStarting("^tm|&u@", "^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Element element0 = document0.createElement("^tm|&u@");
      assertSame(document0, document1);
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", element0.nodeName());
      assertEquals("^tm|&u@", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^tm|&u@", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      boolean boolean0 = element0.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", element0.nodeName());
      assertEquals("^tm|&u@", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^tm|&u@", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Document document2 = (Document)document0.attr("^tm|&u@", "^tm|&u@");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^tm|&u@", document2.location());
      assertFalse(document2.hasParent());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("^m|&@");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals("^m|&@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals("^m|&@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^m|&@", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("^m|&@", document2.location());
      
      Document document3 = (Document)document0.addClass("org.jsoup.nodes.Element");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("^m|&@", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("^m|&@", document3.location());
      
      Element element0 = document0.head();
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^m|&@", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Document document4 = document1.ownerDocument();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertNotNull(document4);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals("^m|&@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^m|&@", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("^m|&@", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = document2.childNodeSize();
      assertEquals(1, int0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals("^m|&@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^m|&@", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("^m|&@", document2.location());
      
      boolean boolean0 = document4.isBlock();
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals("^m|&@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^m|&@", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("^m|&@", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      
      Elements elements0 = document1.getElementsByIndexLessThan(61);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals("^m|&@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      
      String string1 = document4.baseUri();
      assertEquals("^m|&@", string1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertNotNull(string1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals("^m|&@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^m|&@", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("^m|&@", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      
      Document document5 = (Document)document4.removeClass("XN`");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotNull(document5);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals("^m|&@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^m|&@", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals("^m|&@", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("^m|&@", document5.location());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("^m|&@", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      
      String string0 = document0.text();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('Q');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals("Q", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("Q", charArrayWriter1.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      
      Document document1 = (Document)document0.text("5:zQKrlG]*%&e6:");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" > ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" > ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      
      List<TextNode> list0 = document0.textNodes();
      assertSame(document0, document1);
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Document document2 = (Document)document0.html("5:zQKrlG]*%&e6:");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(" > ", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(" > ", document2.location());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(" > "));
      
      Document document3 = (Document)document2.classNames((Set<String>) linkedHashSet0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotNull(document3);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", document0.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(" > ", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(" > ", document2.location());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(" > ", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(" > ", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertFalse(linkedHashSet0.contains(" > "));
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tn", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("", charArrayWriter1.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotNull(document_OutputSettings2);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      
      document1.outerHtmlTail(charArrayWriter0, 6, document_OutputSettings0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("tn", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("\n      </#root>", charArrayWriter0.toString());
      assertEquals(16, charArrayWriter0.size());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      Document document2 = Parser.parseBodyFragment("vz7nKb,Wv)K", "h]K&R|_");
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertEquals("h]K&R|_", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("h]K&R|_", document2.location());
      assertFalse(document2.isBlock());
      
      String string0 = document2.tagName();
      assertEquals("#root", string0);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(string0);
      assertEquals("h]K&R|_", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("h]K&R|_", document2.location());
      assertFalse(document2.isBlock());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("ifram", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("ifram", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ifram", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      
      String string0 = parseSettings0.normalizeAttribute("HA<Bnz-TVi");
      assertEquals("ha<bnz-tvi", string0);
      assertNotNull(string0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string1 = "";
      String string2 = parseSettings0.normalizeTag("ifram");
      assertEquals("ifram", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Element element0 = new Element(tag0, "", attributes0);
      assertNotNull(element0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("ifram", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ifram", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertFalse(element0.hasParent());
      assertEquals("ifram", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("ifram", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HA<Bnz-TVi");
      assertFalse(boolean0);
      
      String string3 = element0.id();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("ifram", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ifram", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertFalse(element0.hasParent());
      assertEquals("ifram", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("ifram", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      String string4 = "";
      Element element1 = element0.text("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("ifram", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ifram", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("ifram", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("ifram", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("ifram", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("ifram", element1.tagName());
      
      String string5 = element0.html();
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertSame(element0, element1);
      assertNotNull(string5);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("ifram", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ifram", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("ifram", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("ifram", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      boolean boolean1 = element0.hasClass("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(element0, element1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("ifram", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ifram", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("ifram", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("ifram", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Element element2 = element0.nextElementSibling();
      assertSame(element0, element1);
      assertNull(element2);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("ifram", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ifram", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("ifram", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("ifram", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        element1.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = "tn";
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.baseUri());
      
      List<TextNode> list0 = document1.textNodes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      String string1 = ">lJ";
      Elements elements1 = document1.getElementsByAttributeValueContaining("tn", ">lJ");
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      // Undeclared exception!
      try { 
        document0.insertChildren(127, (Collection<? extends Node>) elements1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("footer", " V:t");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(" V:t", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" V:t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(" V:t", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" V:t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(" V:t", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(" V:t", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      Attributes attributes0 = document0.attributes();
      assertSame(document0, document1);
      assertNotNull(attributes0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(" V:t", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" V:t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, attributes0.size());
      
      List<Node> list0 = document1.childNodesCopy();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(" V:t", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" V:t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(" V:t", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(" V:t", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document1 = document0.parser(parser1);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(" > ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" > ", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      String string0 = document0.text();
      assertEquals(">", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string1 = document0.val();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan((-4274));
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Pattern pattern0 = Pattern.compile(">", 1);
      assertNotNull(pattern0);
      assertEquals(">", pattern0.toString());
      assertEquals(1, pattern0.flags());
      assertEquals(">", pattern0.pattern());
      
      Elements elements1 = document0.getElementsByAttributeValueMatching(">", pattern0);
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(">", pattern0.toString());
      assertEquals(1, pattern0.flags());
      assertEquals(">", pattern0.pattern());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Elements elements2 = document0.getElementsByIndexLessThan(1);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, elements2.size());
      assertFalse(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Element element0 = new Element("UkG)x^r");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("UkG)x^r", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("UkG)x^r", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = element0.siblingElements();
      assertNotNull(elements0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("UkG)x^r", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("UkG)x^r", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      boolean boolean0 = element0.isBlock();
      assertFalse(boolean0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("UkG)x^r", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("UkG)x^r", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        Pattern.compile("UkG)x^r", (-1436));
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 2
         // UkG)x^r
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.DocumentType");
      assertNotNull(document0);
      assertEquals("org.jsoup.nodes.DocumentType", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.DocumentType", document0.baseUri());
      assertFalse(document0.isBlock());
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertEquals("org.jsoup.nodes.DocumentType", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.DocumentType", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("M]w{", "RawtextEndTagOpen");
      assertNotNull(elements0);
      assertEquals("org.jsoup.nodes.DocumentType", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.DocumentType", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h2", "| )e-'H;=y*NI>Xs9P`");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.append("id");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.baseUri());
      
      String string0 = document0.wholeText();
      assertEquals("h2id", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document2 = (Document)document0.text("tmrnnj");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.location());
      
      Elements elements0 = document2.siblingElements();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Element element0 = document1.appendElement("?^rD$OqbN%&vS){");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document1.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("?^rd$oqbn%&vs){", element0.tagName());
      assertEquals("?^rd$oqbn%&vs){", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("| )e-'H;=y*NI>Xs9P`", element0.baseUri());
      
      boolean boolean0 = document2.hasText();
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.location());
      
      String string1 = document2.data();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(string1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("| )e-'H;=y*NI>Xs9P`", document2.location());
      
      // Undeclared exception!
      try { 
        document2.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = "UkG\\)x^r";
      Element element0 = new Element("UkG)x^r");
      assertNotNull(element0);
      assertEquals("UkG)x^r", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("UkG)x^r", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      
      String string1 = "head";
      Document document0 = Parser.parse("head", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tn", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("tn", document1.baseUri());
      
      // Undeclared exception!
      try { 
        document0.html((MockPrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("^m|&@");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^m|&@", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("^m|&@", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^m|&@", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("^m|&@", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^m|&@", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("^m|&@", document2.location());
      
      Element element0 = document0.head();
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("^m|&@", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Document document3 = document1.ownerDocument();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotNull(document3);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^m|&@", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("^m|&@", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("^m|&@", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("^m|&@", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('O');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals("O", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("O", charArrayWriter1.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      
      Document document4 = (Document)document1.text("^m|&@");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertNotNull(document4);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^m|&@", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("^m|&@", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("^m|&@", document4.baseUri());
      assertEquals("^m|&@", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      
      List<TextNode> list0 = element0.textNodes();
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("^m|&@", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Document document5 = (Document)document4.html("^m|&@");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document5, document1);
      assertSame(document5, document0);
      assertNotSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertNotNull(document5);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^m|&@", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("^m|&@", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("^m|&@", document4.baseUri());
      assertEquals("^m|&@", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("^m|&@", document5.baseUri());
      assertEquals("^m|&@", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("^m|&@"));
      
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("^m|&@", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("^m|&@", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertFalse(linkedHashSet0.contains("^m|&@"));
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = "^m|&@";
      Document document0 = Parser.parseBodyFragment("^m|&@", "^m|&@");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^m|&@", document0.location());
      assertEquals("^m|&@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      document0.nodelistChanged();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^m|&@", document0.location());
      assertEquals("^m|&@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "^m|&@", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Element element0 = new Element("UkG)x^r");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("UkG)x^r", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("UkG)x^r", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      
      Elements elements0 = element0.siblingElements();
      assertNotNull(elements0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("UkG)x^r", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("UkG)x^r", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = element0.getElementsByAttributeValueContaining("#root", "RawtextEndTagOpen");
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("UkG)x^r", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("UkG)x^r", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      
      Element element1 = element0.addClass("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("UkG)x^r", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("UkG)x^r", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("UkG)x^r", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("UkG)x^r", element1.tagName());
      
      String string0 = element1.html();
      assertEquals("", string0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(string0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("UkG)x^r", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("UkG)x^r", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("UkG)x^r", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("UkG)x^r", element1.tagName());
      
      Element element2 = element0.doClone(element1);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotNull(element2);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("UkG)x^r", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("UkG)x^r", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("UkG)x^r", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("UkG)x^r", element1.tagName());
      assertEquals("UkG)x^r", element2.tagName());
      assertEquals("UkG)x^r", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = "m)2Z";
      String string1 = "";
      Document document0 = Parser.parse("", "m)2Z");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m)2Z", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m)2Z", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m)2Z", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("m)2Z", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("m)2Z", document2.baseUri());
      
      Element element0 = document2.head();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m)2Z", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("m)2Z", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("m)2Z", element0.baseUri());
      
      Document document3 = element0.ownerDocument();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotNull(document3);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m)2Z", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("m)2Z", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("m)2Z", element0.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("m)2Z", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("m)2Z", document3.baseUri());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      assertNotNull(parseSettings0);
      
      Document document4 = (Document)document1.text("");
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotNull(document4);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m)2Z", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("m)2Z", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("m)2Z", document4.location());
      
      String string2 = document4.html();
      assertEquals("<html>\n <head></head>\n <body>\n </body>\n</html>", string2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotNull(string2);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m)2Z", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("m)2Z", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("m)2Z", document4.location());
      
      boolean boolean0 = document1.hasClass("");
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m)2Z", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      
      Elements elements0 = element0.parents();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m)2Z", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("m)2Z", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("m)2Z", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("m)2Z", element0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      // Undeclared exception!
      try { 
        element0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      List<TextNode> list0 = document1.textNodes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(list0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("tn", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      String string0 = document0.text();
      assertEquals("tn", string0);
      assertSame(document0, document1);
      assertNotNull(string0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("iframe", parseSettings0);
      assertNotNull(tag0);
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      
      String string0 = parseSettings0.normalizeAttribute("HA<Bnz-TVi");
      assertEquals("ha<bnz-tvi", string0);
      assertNotNull(string0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      String string1 = parseSettings0.normalizeTag("iframe");
      assertEquals("iframe", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Element element0 = new Element(tag0, "", attributes0);
      assertNotNull(element0);
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("iframe", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("iframe", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HA<Bnz-TVi");
      assertFalse(boolean0);
      
      String string2 = element0.id();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("iframe", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("iframe", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.text("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("iframe", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("iframe", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("iframe", element1.tagName());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("iframe", element1.nodeName());
      assertEquals("", element1.baseUri());
      
      String string3 = element0.html();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertSame(element0, element1);
      assertNotNull(string3);
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("iframe", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("iframe", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      boolean boolean1 = element0.hasClass("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(element0, element1);
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("iframe", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("iframe", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Element element2 = element0.nextElementSibling();
      assertSame(element0, element1);
      assertNull(element2);
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("iframe", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("iframe", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = element0.parents();
      assertSame(element0, element1);
      assertNotNull(elements0);
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals("iframe", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals("iframe", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("iframe", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      // Undeclared exception!
      try { 
        element0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      document0.nodelistChanged();
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("^tm|&u@", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'K';
      charArray0[1] = '\"';
      charArray0[2] = 't';
      CDataNode cDataNode0 = new CDataNode("^tm|&u@");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("V_n\"uqu[BeG5~9dJ0", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.getName());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      assertNotNull(pseudoTextElement0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.getName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.tagName());
      
      Elements elements0 = pseudoTextElement0.getAllElements();
      assertNotNull(elements0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.getName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      String string0 = pseudoTextElement0.cssSelector();
      assertEquals("V_n\"uqu[BeG5~9dJ0", string0);
      assertNotNull(string0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.getName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.tagName());
      
      Element element0 = pseudoTextElement0.parent();
      assertNull(element0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.getName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.tagName());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      String string1 = parseSettings0.normalizeAttribute("V_n\"uqu[BeG5~9dJ0");
      assertEquals("V_n\"uqu[BeG5~9dJ0", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Document document2 = Parser.parseBodyFragment("V_n\"uqu[BeG5~9dJ0", "q;(k2%");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("q;(k2%", document2.baseUri());
      assertEquals("q;(k2%", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      
      String string2 = document2.baseUri();
      assertEquals("q;(k2%", string2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(string2);
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("q;(k2%", document2.baseUri());
      assertEquals("q;(k2%", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      
      String string3 = document0.val();
      assertEquals("", string3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string3);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Document document3 = Parser.parseBodyFragmentRelaxed("^tm|&u@", "^tm|&u@");
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertEquals("^tm|&u@", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("^tm|&u@", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      
      // Undeclared exception!
      try { 
        document1.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Element element0 = new Element("UkG)x^r");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("UkG)x^r", element0.tagName());
      assertEquals("UkG)x^r", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      
      Elements elements0 = element0.siblingElements();
      assertNotNull(elements0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("UkG)x^r", element0.tagName());
      assertEquals("UkG)x^r", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = element0.getElementsByAttributeValueContaining("UkG)x^r", "org.jsoup.nodes.Element$1");
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(0, element0.siblingIndex());
      assertEquals("UkG)x^r", element0.tagName());
      assertEquals("UkG)x^r", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Element element1 = element0.addClass("\"49wD'l%n");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertEquals(0, element0.siblingIndex());
      assertEquals("UkG)x^r", element0.tagName());
      assertEquals("UkG)x^r", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("UkG)x^r", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("UkG)x^r", element1.tagName());
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mb)2Z", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("", "mb)2Z");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("mb)2Z", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("mb)2Z", document1.baseUri());
      
      Document document2 = document1.clone();
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("mb)2Z", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("mb)2Z", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("mb)2Z", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("mb)2Z", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      
      Element element0 = document2.head();
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(element0);
      assertEquals("mb)2Z", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("mb)2Z", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("mb)2Z", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("mb)2Z", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("mb)2Z", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      Document document3 = element0.ownerDocument();
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertEquals("mb)2Z", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("mb)2Z", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("mb)2Z", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("mb)2Z", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("mb)2Z", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("mb)2Z", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("mb)2Z", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      
      String string0 = document0.text();
      assertEquals("mb)2Z", string0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      boolean boolean0 = element0.isBlock();
      assertTrue(boolean0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("mb)2Z", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("mb)2Z", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("mb)2Z", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("mb)2Z", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("mb)2Z", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      element0.nodelistChanged();
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertEquals("mb)2Z", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("mb)2Z", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("mb)2Z", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("mb)2Z", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("mb)2Z", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      // Undeclared exception!
      try { 
        document3.getElementsMatchingText("mb)2Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: mb)2Z
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = "^m|&@";
      Document document0 = Document.createShell("^m|&@");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.nodelistChanged();
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.tagName("^m|&@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^m|&@", document0.tagName());
      assertEquals("^m|&@", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^m|&@", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^m|&@", document0.tagName());
      
      Document document2 = (Document)document1.attr("^m|&@", "^m|&@");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("^m|&@", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^m|&@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^m|&@", document0.tagName());
      assertEquals("^m|&@", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^m|&@", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^m|&@", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^m|&@", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("^m|&@", document2.location());
      assertEquals("^m|&@", document2.tagName());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      
      // Undeclared exception!
      try { 
        document1.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mb)2Z", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      document0.nodelistChanged();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parse("", "m)2Z");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("m)2Z", document1.location());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("m)2Z", document1.location());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      
      Element element0 = document2.head();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("m)2Z", document1.location());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("m)2Z", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Document document3 = element0.ownerDocument();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotNull(document3);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("m)2Z", document1.location());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("m)2Z", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("m)2Z", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("m)2Z", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      
      char[] charArray0 = new char[1];
      Elements elements0 = document2.nextElementSiblings();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("m)2Z", document1.location());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      
      // Undeclared exception!
      try { 
        document2.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Document.createShell("oWAk+D wM");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("oWAk+D wM", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("oWAk+D wM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("mb)2Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: mb)2Z
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = "";
      String string1 = "head";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "head");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("head", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("head", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("head", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("head", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      
      Element element0 = document1.head();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("head", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.baseUri());
      assertEquals("head", element0.tagName());
      
      Elements elements0 = element0.getElementsByClass("ZckbMNE+ >|9<e");
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("head", document0.location());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("head", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      // Undeclared exception!
      try { 
        document1.insertChildren((-1890), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "|n");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|n", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("|n", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|n", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("|n", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document1 = (Document)document0.val("*L'.d!");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|n", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("|n", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("|n", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("|n", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueEnding("", "*L'.d!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertEquals(0, document1.siblingIndex());
      
      List<TextNode> list0 = document1.textNodes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(list0);
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Elements elements1 = document1.getElementsByAttributeValueMatching("K@S|Z[-AJ>et", "Queue did not match expected sequence");
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("tn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("tn", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = ";wL/~e";
      Document document0 = Parser.parseBodyFragment(";wL/~e", ";wL/~e");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      Document document1 = Parser.parseBodyFragment("", "");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(";wL/~e", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(";wL/~e", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(";wL/~e", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "^tm|&u@";
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      
      document0.nodelistChanged();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("^tm|&u@", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.tagName());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      Element element0 = document0.previousElementSibling();
      assertSame(document0, document1);
      assertNull(element0);
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Document document2 = Parser.parseBodyFragmentRelaxed("fwq", "fwq");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#document", document2.nodeName());
      assertEquals("fwq", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("fwq", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueContaining((String) null, "head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("tn", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertEquals(0, document1.siblingIndex());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("#root", "#root");
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Element element0 = document1.getElementById("=C?");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNull(element0);
      assertEquals("tn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("tn", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("tn", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("tn", document1.location());
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("", "m)2Z");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      
      Element element0 = document2.head();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("m)2Z", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Document document3 = element0.ownerDocument();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("m)2Z", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("m)2Z", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("m)2Z", document3.location());
      assertEquals("#root", document3.tagName());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('O');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals("O", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals(1, charArrayWriter1.size());
      assertEquals("O", charArrayWriter1.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nP}8%");
      assertFalse(boolean0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeAttribute("&dtB8:kOzac");
      assertEquals("&dtb8:kozac", string0);
      assertNotNull(string0);
      
      Tag tag0 = Tag.valueOf("&dtB8:kOzac");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("&dtB8:kOzac", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("&dtB8:kOzac", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "html", attributes0);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("&dtB8:kOzac", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("&dtB8:kOzac", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("&dtB8:kOzac", pseudoTextElement0.nodeName());
      assertEquals("&dtB8:kOzac", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("html", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      boolean boolean1 = pseudoTextElement0.is((Evaluator) evaluator_IsRoot0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("&dtB8:kOzac", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("&dtB8:kOzac", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("&dtB8:kOzac", pseudoTextElement0.nodeName());
      assertEquals("&dtB8:kOzac", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("html", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotNull(elements0);
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("m)2Z", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      String string1 = attributes0.get(" ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, attributes0.size());
      
      Set<String> set0 = element0.classNames();
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotNull(set0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("m)2Z", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m)2Z", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("m)2Z", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("m)2Z", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(set0.contains("&dtB8:kOzac"));
      
      Element element1 = pseudoTextElement0.appendChild(document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(element1, pseudoTextElement0);
      assertSame(pseudoTextElement0, element1);
      assertNotNull(element1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("m)2Z", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("m)2Z", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("&dtB8:kOzac", element1.nodeName());
      assertEquals("html", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("&dtB8:kOzac", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("&dtB8:kOzac", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("&dtB8:kOzac", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("&dtB8:kOzac", pseudoTextElement0.nodeName());
      assertEquals("&dtB8:kOzac", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("html", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      
      List<Node> list0 = pseudoTextElement0.ensureChildNodes();
      assertSame(pseudoTextElement0, element1);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("&dtB8:kOzac", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("&dtB8:kOzac", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("&dtB8:kOzac", pseudoTextElement0.nodeName());
      assertEquals("&dtB8:kOzac", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("html", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("mb)2Z", "");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = document1.clone();
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      
      Element element0 = document2.head();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      Document document3 = element0.ownerDocument();
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("mb)2Z", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("mb)2Z", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("mb)2Z", tag0.getName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      String string1 = parseSettings0.normalizeAttribute("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = document3.hasAttributes();
      assertFalse(boolean0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      
      String string2 = document3.baseUri();
      assertEquals("", string2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotNull(string2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      
      String string3 = document2.val();
      assertEquals("", string3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotNull(string3);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      
      Document document4 = Parser.parseBodyFragmentRelaxed("", "q;(k2%");
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotNull(document4);
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("q;(k2%", document4.baseUri());
      assertEquals("q;(k2%", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      
      // Undeclared exception!
      try { 
        document0.child(2036);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2036, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      
      document0.nodelistChanged();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("^tm|&u@", document1.baseUri());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '\"';
      charArray0[2] = 't';
      CDataNode cDataNode0 = new CDataNode("^tm|&u@");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(191);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('>');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals(1, charArrayWriter0.size());
      assertEquals(">", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter1.size());
      assertEquals(">", charArrayWriter1.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotNull(document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotNull(document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.prettyPrint(true);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotNull(document_OutputSettings3);
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      
      document0.outerHtmlTail(charArrayWriter0, 191, document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(203, charArrayWriter0.size());
      assertEquals(">\n                                                                                                                                                                                               </^tm|&u@>", charArrayWriter0.toString());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("", "m)2Z");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = Parser.parse(" ", "html");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("html", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.location());
      
      Elements elements0 = document0.parents();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document2 = (Document)document0.val("m)2Z");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("m)2Z", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("m)2Z", document2.location());
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Elements elements1 = document0.getElementsByAttributeValueMatching(" ", "");
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("m)2Z", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("m)2Z", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      
      String string0 = document0.text();
      assertEquals("", string0);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(string0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.siblingElements();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Document document2 = parser0.parseInput("", "");
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      
      document1.reparentChild(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      
      Elements elements1 = document1.getElementsByAttributeStarting("([p<tsT:A%$#:Y3");
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      int int0 = stringReader0.read(charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Document document3 = Parser.parse("acronym", "");
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotNull(document3);
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.location());
      assertEquals(1, document3.childNodeSize());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = document1.is("acronym");
      assertFalse(boolean1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertTrue(boolean1 == boolean0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      
      String string1 = document0.className();
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      
      String string2 = document0.nodeName();
      assertEquals("#document", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotNull(string2);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Element element0 = new Element("j':>N9zc`cZ6i;pR");
      assertNotNull(element0);
      assertEquals("j':>N9zc`cZ6i;pR", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("j':>N9zc`cZ6i;pR", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      
      // Undeclared exception!
      try { 
        element0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.text();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Pattern pattern0 = Pattern.compile("", 1);
      assertNotNull(pattern0);
      assertEquals("", pattern0.pattern());
      assertEquals(1, pattern0.flags());
      assertEquals("", pattern0.toString());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", pattern0.pattern());
      assertEquals(1, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = document0.getElementsByIndexLessThan(1);
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements1.isEmpty());
      assertEquals(2, elements1.size());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("", ";i='");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(";i='", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";i='", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.val("X)y");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(";i='", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";i='", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(";i='", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(";i='", document1.baseUri());
      
      List<TextNode> list0 = document0.textNodes();
      assertSame(document0, document1);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(";i='", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(";i='", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("|n", "|n");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("|n", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("|n", document0.baseUri());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("|n", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("|n", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("|n", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("|n", document0.baseUri());
      assertEquals("|n", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("|n", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document0.val("|n");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("|n", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("|n", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("|n", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|n", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      
      List<TextNode> list0 = document0.textNodes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(list0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("|n", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("|n", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Elements elements1 = document2.getElementsByTag("|n");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("|n", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("|n", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("|n", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("|n", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "|n");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|n", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("|n", document0.location());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|n", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("|n", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      
      Document document1 = (Document)document0.val("*L'.d!");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|n", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("|n", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("|n", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("|n", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      List<TextNode> list0 = document0.textNodes();
      assertSame(document0, document1);
      assertNotNull(list0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|n", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("|n", document0.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Elements elements1 = document0.getElementsByAttributeValueMatching("textarea", "textarea");
      assertTrue(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("|n", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("|n", document0.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = ',';
      charArray0[3] = 'i';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'J', 'J', ',', 'i'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("JJ,i", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.length());
      
      Document document0 = new Document("#root");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharBuffer charBuffer1 = document0.html(charBuffer0);
      assertArrayEquals(new char[] {'J', 'J', ',', 'i'}, charArray0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("JJ,i", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.length());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals("JJ,i", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(4, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(4, charBuffer1.remaining());
      assertEquals(4, charBuffer1.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals(4, charBuffer1.limit());
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      Element element0 = document1.createElement("HhyYB[)}cJ!2|QqS2k");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertEquals("HhyYB[)}cJ!2|QqS2k", element0.nodeName());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("HhyYB[)}cJ!2|QqS2k", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      
      document0.parentNode = (Node) element0;
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertEquals("HhyYB[)}cJ!2|QqS2k", element0.nodeName());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("HhyYB[)}cJ!2|QqS2k", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.text("Ba~LA$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.nodelistChanged();
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^tm|&u@", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^tm|&u@", document1.baseUri());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '\"';
      charArray0[2] = 't';
      CDataNode cDataNode0 = new CDataNode("^tm|&u@");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("V_n\"uqu[BeG5~9dJ0", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.getName());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      assertNotNull(pseudoTextElement0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isEmpty());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.getName());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.nodeName());
      
      Elements elements0 = pseudoTextElement0.getAllElements();
      assertNotNull(elements0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isEmpty());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.getName());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      
      String string0 = pseudoTextElement0.cssSelector();
      assertEquals("V_n\"uqu[BeG5~9dJ0", string0);
      assertNotNull(string0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isEmpty());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.getName());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.nodeName());
      
      Element element0 = pseudoTextElement0.parent();
      assertNull(element0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isEmpty());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.getName());
      assertEquals("V_n\"uqu[BeG5~9dJ0", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("V_n\"uqu[BeG5~9dJ0", pseudoTextElement0.nodeName());
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertNotNull(evaluator_AllElements0);
      assertEquals("*", evaluator_AllElements0.toString());
      
      String string1 = parseSettings0.normalizeAttribute("V_n\"uqu[BeG5~9dJ0");
      assertEquals("V_n\"uqu[BeG5~9dJ0", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document2 = Parser.parseBodyFragment("V_n\"uqu[BeG5~9dJ0", "q;(k2%");
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(document2);
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("q;(k2%", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("q;(k2%", document2.location());
      
      String string2 = document2.baseUri();
      assertEquals("q;(k2%", string2);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotNull(string2);
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("q;(k2%", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("q;(k2%", document2.location());
      
      String string3 = document0.val();
      assertEquals("", string3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotNull(string3);
      assertEquals("^tm|&u@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document3 = Parser.parseBodyFragmentRelaxed("^tm|&u@", "^tm|&u@");
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotNull(document3);
      assertEquals("^tm|&u@", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("^tm|&u@", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      
      // Undeclared exception!
      try { 
        document3.child(2036);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2036, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.text();
      assertEquals(">", string0);
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string1 = document0.val();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Pattern pattern0 = Pattern.compile(">", 1);
      assertNotNull(pattern0);
      assertEquals(">", pattern0.pattern());
      assertEquals(">", pattern0.toString());
      assertEquals(1, pattern0.flags());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching(">", pattern0);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(">", pattern0.pattern());
      assertEquals(">", pattern0.toString());
      assertEquals(1, pattern0.flags());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Elements elements1 = document0.getElementsByIndexLessThan(1);
      assertFalse(elements1.equals((Object)elements0));
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(" > ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(elements1.isEmpty());
      assertEquals(2, elements1.size());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Document.createShell("tn");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      
      Document document1 = (Document)document0.prependText("tn");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals("tn", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tn", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("#root", "#root");
      assertFalse(elements1.equals((Object)elements0));
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      Elements elements2 = document0.getElementsByIndexLessThan(554);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotNull(elements2);
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tn", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tn", document0.baseUri());
      assertEquals(3, elements2.size());
      assertFalse(elements2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "|n");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("|n", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|n", document0.baseUri());
      
      Elements elements0 = document0.getElementsMatchingText(".");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals("|n", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|n", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = "^tm|&u@";
      Document document0 = Document.createShell("^tm|&u@");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      document0.nodelistChanged();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.tagName("^tm|&u@");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("^tm|&u@", document0.location());
      assertEquals("^tm|&u@", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^tm|&u@", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("^tm|&u@", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^tm|&u@", document1.baseUri());
      assertEquals("^tm|&u@", document1.tagName());
      assertEquals("#document", document1.nodeName());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '\"';
      Document document2 = Parser.parseBodyFragment("^tm|&u@", "^tm|&u@");
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotNull(document2);
      assertEquals("^tm|&u@", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals("#root", document2.tagName());
      
      boolean boolean0 = document2.hasText();
      assertTrue(boolean0);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals("^tm|&u@", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^tm|&u@", document2.baseUri());
      assertEquals("#root", document2.tagName());
      
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader(">sU'/w%@b+@=");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "V @Y");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("V @Y", document0.baseUri());
      assertEquals("V @Y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("V @Y", document0.baseUri());
      assertEquals("V @Y", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("V @Y", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("V @Y", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(8205, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("Y% B\"j!R'~O$i/kO", "Y% B\"j!R'~O$i/kO");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Y% B\"j!R'~O$i/kO", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("Y% B\"j!R'~O$i/kO", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Y% B\"j!R'~O$i/kO", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("Y% B\"j!R'~O$i/kO", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Y% B\"j!R'~O$i/kO", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("Y% B\"j!R'~O$i/kO", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y% B\"j!R'~O$i/kO", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      
      List<TextNode> list0 = document0.textNodes();
      assertNotNull(list0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Y% B\"j!R'~O$i/kO", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("Y% B\"j!R'~O$i/kO", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Element element1 = element0.html("Unexpected token [%s] when in state [%s]");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Y% B\"j!R'~O$i/kO", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("Y% B\"j!R'~O$i/kO", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Y% B\"j!R'~O$i/kO", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("Y% B\"j!R'~O$i/kO", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parse("", "m)2Z");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Element element0 = document2.head();
      Document document3 = element0.ownerDocument();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      charArrayWriter0.append('O');
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      parseSettings0.normalizeAttribute("&dtB8:kOzac");
      Tag tag0 = Tag.valueOf("&dtB8:kOzac");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "html", attributes0);
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      pseudoTextElement0.is((Evaluator) evaluator_IsRoot0);
      Elements elements0 = element0.previousElementSiblings();
      assertEquals(0, elements0.size());
      
      attributes0.get(" ");
      element0.classNames();
      assertEquals("m)2Z", element0.baseUri());
      
      pseudoTextElement0.appendChild(document0);
      assertNotSame(document0, document3);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mb)2Z", "");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Element element0 = document2.head();
      Document document3 = element0.ownerDocument();
      String string0 = document0.text();
      assertEquals("mb)2Z", string0);
      
      document0.childNodeSize();
      element0.isBlock();
      element0.nodelistChanged();
      assertNotSame(document1, document3);
      assertEquals(1, document1.childNodeSize());
      assertNotSame(document0, document3);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/n-H", "#root");
      Element element0 = document0.head();
      element0.tagName("/n-H");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "/n-H");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(charBuffer0, (-1791), document_OutputSettings4);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      Document document1 = Parser.parseBodyFragmentRelaxed("[(6kMH$", "[(6kMH$");
      Document document2 = document1.clone();
      document2.nodelistChanged();
      assertEquals("[(6kMH$", document2.baseUri());
      
      document1.tagName("head");
      Element element0 = document0.text("");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, list0.size());
      
      Element element1 = document1.val("I9#B");
      assertNotSame(element1, document2);
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader(">sU'/w%@b+@=");
      Document document0 = parser0.parseInput((Reader) stringReader0, "V @Y");
      Document document1 = document0.clone();
      document1.hasAttr("JZI-7;iS0T&PtJ");
      Element element0 = document0.appendTo(document1);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      // Undeclared exception!
      try { 
        element0.after((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      String string0 = document0.text();
      String string1 = document0.val();
      assertFalse(string1.equals((Object)string0));
      
      document0.childNodeSize();
      document0.isBlock();
      document0.nodelistChanged();
      assertEquals(" > ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("iframe", parseSettings0);
      parseSettings0.normalizeAttribute("HA<Bnz-TVi");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "");
      parseSettings0.normalizeTag("iframe");
      Element element0 = new Element(tag0, "", attributes1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HA<Bnz-TVi");
      element0.id();
      element0.text("");
      element0.html();
      element0.hasClass("");
      element0.parents();
      // Undeclared exception!
      try { 
        element0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Document.createShell("8");
      document0.getElementsContainingText("8");
      document0.append("6@ Ge|8<m[hIn\"$w&gL");
      document0.is("8");
      document0.getElementsMatchingOwnText("");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Element element0 = new Element("`]\"G=u^n");
      Pattern pattern0 = Pattern.compile("body");
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.getElementsContainingText("8!l+KqLr1Z");
      document1.getElementsMatchingOwnText("");
      document1.prependText("");
      assertEquals(2, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Parser.parse("", "#root");
      Document document1 = document0.clone();
      Elements elements0 = document1.getElementsMatchingText("#root");
      Elements elements1 = document1.getElementsMatchingOwnText("#root");
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("#root", document1.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "        ";
      Document document0 = Parser.parseBodyFragment(";wL/~e", "        ");
      document0.children();
      Element element0 = document0.body();
      String string1 = null;
      element0.previousElementSibling();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueStarting((String) null, ";wL/~e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      document0.nodelistChanged();
      Element element0 = document0.tagName("^tm|&u@");
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '\"';
      charArray0[2] = 't';
      CDataNode cDataNode0 = new CDataNode("^tm|&u@");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.spliterator();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("V_n\"uqu[BeG5~9dJ0", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      pseudoTextElement0.getAllElements();
      pseudoTextElement0.cssSelector();
      pseudoTextElement0.parent();
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      parseSettings0.normalizeAttribute("V_n\"uqu[BeG5~9dJ0");
      pseudoTextElement0.is((Evaluator) evaluator_AllElements0);
      document0.previousElementSiblings();
      attributes0.get("^,*9$l(VbEH. --~");
      pseudoTextElement0.classNames();
      pseudoTextElement0.appendChild(element0);
      assertEquals(1, pseudoTextElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h2", "| )e-'H;=y*NI>Xs9P`");
      Document document1 = (Document)document0.text("tQmrnjf");
      document1.data();
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "MlzVUkFB~bw?Q,\"y";
      Document document0 = Document.createShell("MlzVUkFB~bw?Q,\"y");
      document0.html("MlzVUkFB~bw?Q,\"y");
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 1250;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1250, (CharSequence) "MlzVUkFB~bw?Q,\"y");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1250
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("iframe", parseSettings0);
      parseSettings0.normalizeAttribute("HA<Bnz-TVi");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "");
      Element element0 = new Element(tag0, "", attributes1);
      element0.id();
      element0.hasClass("");
      element0.parents();
      // Undeclared exception!
      try { 
        element0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("P'9 ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("P'9 ");
      Attributes attributes0 = cDataNode0.attributes();
      Tag.valueOf("<Lvyix(#}5e[&", parseSettings0);
      parseSettings0.normalizeTag("P'9 ");
      attributes0.spliterator();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "P'9 ", attributes0);
      pseudoTextElement0.getAllElements();
      pseudoTextElement0.cssSelector();
      pseudoTextElement0.parent();
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      // Undeclared exception!
      try { 
        parseSettings0.normalizeAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = "meZ";
      Document document0 = Parser.parseBodyFragment("meZ", "meZ");
      Document document1 = document0.normalise();
      Document document2 = document1.ownerDocument();
      int int0 = 624;
      document2.siblingIndex = 624;
      document2.text();
      Pattern.compile("meZ");
      String string1 = null;
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = "yO";
      Document document0 = Parser.parseBodyFragmentRelaxed("yO", "yO");
      document0.setBaseUri("yO");
      document0.children();
      document0.getElementsByAttributeStarting("yO");
      document0.val("*~@a)@IgqJ$/jdG[");
      document0.getElementsByAttributeValueNot("yO", "yO");
      document0.setSiblingIndex(1920);
      // Undeclared exception!
      try { 
        document0.wrap("yO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Entities", "org.jsoup.nodes.Entities");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.getElementsByAttributeValueNot("org.jsoup.nodes.Entities", "org.jsoup.nodes.Entities");
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Entities", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Document document0 = new Document("5");
      String string0 = "Pattern syntax error: ";
      Element element0 = document0.createElement("Pattern syntax error: ");
      element0.parents();
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = "X";
      Document document0 = new Document("X");
      document0.body();
      String string1 = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("X", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "\\k9>B+KVZ";
      Document document0 = parser0.parseInput("k9>B+KVZ", "k9>B+KVZ");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      boolean boolean0 = false;
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      parser0.settings(parseSettings0);
      Element element0 = document2.text("");
      element0.getElementsByClass(";e<&e");
      String string1 = "";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = "nav";
      Element element0 = new Element("nav");
      element0.empty();
      String string1 = "details";
      // Undeclared exception!
      try { 
        element0.before("details");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      String string2 = "";
      int int0 = 59;
      document0.getElementsByIndexEquals(59);
      // Undeclared exception!
      try { 
        document1.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      CDataNode cDataNode0 = new CDataNode("");
      // Undeclared exception!
      try { 
        document0.after((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = ";wL/~e";
      String string1 = "        ";
      Document document0 = Parser.parseBodyFragment(";wL/~e", "        ");
      document0.children();
      Element element0 = document0.body();
      String string2 = null;
      Element element1 = element0.previousElementSibling();
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueContaining("        ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Document document0 = Parser.parse("", "#root");
      Document document1 = document0.clone();
      Elements elements0 = document1.getElementsMatchingText("#root");
      assertEquals("#root", document1.baseUri());
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = "O1V<&39.y~";
      Element element0 = new Element("O1V<&39.y~");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "O1V<&39.y~");
      StringWriter stringWriter1 = element0.html(stringWriter0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'N';
      charArray0[1] = 'X';
      charArray0[2] = 'B';
      charArray0[3] = 'A';
      charArray0[4] = 'd';
      charArray0[5] = ',';
      // Undeclared exception!
      try { 
        stringWriter1.write(charArray0, (-1028), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = "Pattern syntax error: ";
      Element element0 = new Element("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        element0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "on";
      Document document0 = parser0.parseInput("on", "");
      Element element0 = document0.body();
      document0.prepend("id");
      Document document1 = element0.ownerDocument();
      int int0 = 62;
      // Undeclared exception!
      try { 
        document1.child(62);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Document document0 = Document.createShell("^tm|&u@");
      document0.nodelistChanged();
      document0.tagName("^tm|&u@");
      char[] charArray0 = new char[9];
      charArray0[0] = 'K';
      charArray0[1] = '\"';
      charArray0[2] = 't';
      charArray0[3] = 'U';
      charArray0[4] = ',';
      charArray0[5] = 'J';
      charArray0[6] = '$';
      charArray0[7] = '=';
      charArray0[8] = '\'';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Document document0 = Parser.parse("", "org.jsoup.nodes.Element$1");
      Element element0 = document0.val("org.jsoup.nodes.Element");
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader(">sU'/w%@b+@=");
      Document document0 = parser0.parseInput((Reader) stringReader0, "V @Y");
      Document document1 = document0.clone();
      document1.hasAttr("JZI-7;iS0T&PtJ");
      Element element0 = document0.appendTo(document1);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) element0;
      // Undeclared exception!
      try { 
        element0.insertChildren(8205, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mb)2Z", "");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Element element0 = document2.head();
      Document document3 = element0.ownerDocument();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('O');
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        document3.outerHtmlTail(charArrayWriter1, (-3789), document_OutputSettings2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("footer", " V:t");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = "</";
      Document document0 = new Document("</");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      document0.outputSettings(document_OutputSettings2);
      // Undeclared exception!
      try { 
        document0.child(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?RT-IF+A(0JAK)A1)");
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
      try { 
        element0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Document document0 = Document.createShell("tn");
      document0.getElementsContainingText("");
      document0.getElementsMatchingOwnText("");
      document0.prependText("_|XM");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Parser parser1 = parser0.settings(parseSettings0);
      Parser.htmlParser();
      String string0 = "";
      parseSettings0.normalizeAttribute("");
      String string1 = "UTF-";
      parser1.parseInput("UTF-", "UTF-");
      PipedReader pipedReader0 = new PipedReader();
      String string2 = "spm{+^95Gt\\Mm&";
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) pipedReader0, "spm{+^95GtMm&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document2 = document1.outputSettings(document_OutputSettings1);
      Document document3 = document2.clone();
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Parser parser1 = parser0.settings(parseSettings0);
      Document document4 = document3.parser(parser1);
      Elements elements0 = document4.children();
      assertEquals(1, elements0.size());
      assertEquals(1, document2.childNodeSize());
      assertNotSame(document4, document1);
  }
}
