/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:49:34 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document("%_kk2igI,|c>,r8+{{z4");
      Document document1 = (Document)document0.addClass("%_kk2igI,|c>,r8+{{z4");
      document0.toggleClass("%_kk2igI,|c>,r8+{{z4");
      document1.setSiblingIndex(22);
      document1.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", " D(!CPLktkyOxp 3");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("html", " D(!CPLktkyOxp 3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error:  D(!CPLktkyOxp 3
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document(";`");
      document0.reparentChild(document0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document(",v");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringWriter stringWriter0 = new StringWriter(6);
      document0.outerHtmlTail(stringWriter0, 6, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Element element0 = new Element("CsjP2Fn");
      element0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">Nz?AiHu0 4u{Y,", "Children collection to be inserted must not be null.");
      document0.doSetBaseUri("org.jsoup.nodes.DocumentType");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      Element element0 = document0.appendElement("Ztbz?D$)I<pOq");
      element0.wrap("Q*oi/]");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("p1c;GpK:@=T~0pamFuU", "[%s!=%s]");
      Element element0 = document0.head();
      element0.wrap("8T9'wM@");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("reatondy", "org.jsoup.nodes.FormElement");
      Element element0 = document0.body();
      element0.wrap("reatondy");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("k:U?}XS`5-!5~:B");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("@(y+0u~");
      FormElement formElement0 = new FormElement(tag0, "`JeUb+y}", attributes0);
      formElement0.setSiblingIndex((-2));
      formElement0.val("@(y+0u~");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      Element element0 = document0.appendElement("br");
      element0.val("S%`FW]`0Y");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Tag tag0 = Tag.valueOf("colgroup");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "colgroup", attributes0);
      formElement0.val("1bh/}K");
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("id");
      document0.siblingIndex = 56;
      document0.toggleClass("id");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      document0.setSiblingIndex((-5159));
      document0.toggleClass("-Yub};[pMMO[C=~@");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse(":not(", ":has(el) subselect must not be empty");
      Element element0 = document0.head();
      element0.toggleClass(":has(el) subselect must not be empty");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k:U?}XS`5-!5~:B", "k:U?}XS`5-!5~:B");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.insertChildren(0, nodeArray0);
      element0.toggleClass("k:U?}XS`5-!5~:B");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("1Iv[~Wc0fVW8qh");
      Element element0 = document0.body();
      element0.text("1Iv[~Wc0fVW8qh");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document(":contains(%s)");
      Element element0 = document0.appendElement(":contains(%s)");
      element0.text(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("V{nagkxWCgNZv", "V{nagkxWCgNZv");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("CsjP2Fn");
      Element element0 = document0.createElement("CsjP2Fn");
      document0.appendChild(element0);
      element0.tagName("[L&^fEUO)");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("`");
      Document document1 = Parser.parse("`", "`");
      document0.prependChild(document1);
      Element element0 = document1.appendText("`");
      element0.tagName("1qi[2fvuozj8");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("CsjP2Fn");
      Element element0 = document0.createElement("CsjP2Fn");
      element0.tagName("[L&^fEUO)");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document("`");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("sortable", "sortable");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "value", (Attributes) null);
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@3ogB");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.selectFirst(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.head();
      element0.select(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      Element element0 = document0.appendElement("*=");
      element0.removeClass("SKIP_ENTIRELY");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R_y1g", "");
      Element element0 = document0.head();
      element0.removeClass("s+");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = new Document(" ");
      document0.removeClass("#root");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.appendElement(":contains(%s)");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q2{XH8", "Q2{XH8");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      Element.preserveWhitespace(formElement0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ij", "ij");
      Element element0 = document0.head();
      element0.prependText("u0R%j");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.appendElement(":contains(%s)");
      element0.prependText(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FGYw]sUV8@bN~", "FGYw]sUV8@bN~");
      document0.prependElement("#root");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      Element element0 = document0.body();
      DocumentType documentType0 = new DocumentType("-Yub};[pMMO[C=~@", "c1_&2lu54Nt.j", "x^yd9lck#", "<z;O");
      element0.prependChild(documentType0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "`");
      Element element0 = document0.body();
      element0.prepend("`");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Tag tag0 = Tag.valueOf("5jV:5X-R'");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "5jV:5X-R'", attributes0);
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=", "");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("id");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("a!,g<zn\ni$", "a!,g<zn\ni$");
      Element element0 = document0.body();
      element0.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000046");
      Document document0 = Parser.parseBodyFragmentRelaxed("J4^5CS+S", "J4^5CS+S");
      element0.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J4^5CS+S", "J4^5CS+S");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&o4A3&BGvly7}A", "L. Bis,RL3-#0");
      Element element0 = document0.body();
      element0.after("_B6~B92");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.prependChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rb", "udruwlRb)ho");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.is(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("`rg|%4,!%YhH# +", "~]w[o");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("572", "572");
      Element element0 = document0.body();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", " D(!CPLktkyOxp 3");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.body();
      Elements elements0 = document0.siblingElements();
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      Elements elements0 = document0.siblingElements();
      document0.appendTo(document0);
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("V{nagkxWCgNZv");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("}|m,U}&Upmk", "}|m,U}&Upmk");
      Element element0 = document0.body();
      element0.html("TO;CE=Ee%Ef`v");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R_y1g", "");
      Element element0 = document0.head();
      element0.html("[%s$=%s]");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("BT[;H@<ogB");
      Element element0 = new Element(tag0, "BT[;H@<ogB", attributes0);
      element0.html((MockPrintWriter) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FGYw]sUV8@bN~", "FGYw]sUV8@bN~");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document(",v");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      Pattern pattern0 = Pattern.compile("id");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      Pattern pattern0 = Pattern.compile("yUJ6Q*PMN}4zQ*8k#yf", (-5159));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ptiyon", "ptiyon");
      document0.getElementsContainingOwnText("ptiyon");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      document0.html("-Yub};[pMMO[C=~@");
      document0.getElementsByIndexLessThan(566);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", " D(!CPLktkyOxp 3");
      document0.getElementsByIndexGreaterThan((-3556));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = new Document("id");
      document0.toggleClass("id");
      document0.getElementsByClass("java.lang.String@0000000008");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@3ogB");
      document0.getElementsByAttributeValueNot("BT[;H@3ogB", "~]w[o");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("textarea", "textarea", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$TagEndsWith", attributes1);
      Pattern pattern0 = Pattern.compile("textarea", 46);
      formElement0.getElementsByAttributeValueMatching("textarea", pattern0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rb", "udruwlRb)ho");
      Element element0 = document0.attr("rb", true);
      element0.getElementsByAttributeStarting("rb");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.getElementsByAttribute("(`7lpg");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      Element element0 = document0.val((String) null);
      element0.getElementsByAttribute("value");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~2", "~2");
      Element element0 = document0.appendTo(document0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("wL7NZLk4oe");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("ij", "ij");
      Element element0 = document0.appendElement("ij");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Tag tag0 = Tag.valueOf("colgroup");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000056", attributes0);
      Comment comment0 = new Comment("");
      formElement0.doClone(comment0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse(":co'tains(%s)", ":co'tains(%s)");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("colgroup", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "colgroup", attributes0);
      formElement0.clone();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("FGYw]sUV8@bN~");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "`");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k:U?}XS`5-!5~:B", "k:U?}XS`5-!5~:B");
      Element element0 = document0.toggleClass("k:U?}XS`5-!5~:B");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.toggleClass("Children collection to be inserted must not be null.");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document(",v");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("FGYw]sUV8@bN~");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("rb", "udruwlRb)ho");
      Element element0 = document0.html("2o(HNnG\"l");
      document0.appendElement("rb");
      element0.child(0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@3ogB");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Os\"G&>G2za|[q", "Os\"G&>G2za|[q");
      Element element0 = document0.head();
      element0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Element element0 = new Element(".");
      Document document0 = Parser.parse(".", ".");
      element0.reparentChild(document0);
      document0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Tag tag0 = Tag.valueOf("colgroup");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "colgroup", attributes0);
      Element element0 = formElement0.prependElement("colgroup");
      element0.before("US-ASCII");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("id");
      Element element0 = document0.appendElement("id");
      element0.before("id");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FGYw]sUV8@bN~", "FGYw]sUV8@bN~");
      Document document1 = Parser.parse("Children collection to be inserted must not be null.", "");
      document0.reparentChild(document1);
      document1.before("body");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Element element0 = new Element("PC'sjXP2Fn");
      element0.val("org.jsoup.nodes.Element$NodeList");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.reparentChild(document0);
      document0.attr("M#~xUg=|_Lu-a+oK", true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("id");
      document0.attr("id", false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Element element0 = new Element("%FV0T--pFW!6 #%82:");
      element0.text(".y8>Mm@y9W2|Z%");
      Element element1 = element0.appendElement("id");
      element1.attr("^'F", ".y8>Mm@y9W2|Z%");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("PC'sjXP2Fn");
      Element element0 = document0.head();
      element0.attr("PC'sjXP2Fn", "J,O <3jM0VGA;aA}<");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("PC'sjXP2Fn");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      document0.appendTo(document0);
      document0.appendText("org.jsoup.parser.ParseError");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BT[;H@3ogB", "BT[;H@3ogB");
      Element element0 = document0.head();
      element0.appendText("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document(",v");
      document0.appendElement("body");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q2{XH8", "Q2{XH8");
      Element element0 = document0.body();
      element0.append("col_roup");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@3ogB");
      Element element0 = document0.head();
      element0.append("7p");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.body();
      element0.after((Node) document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.appendElement(":contains(%s)");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("`", "`");
      document0.reparentChild(document0);
      DocumentType documentType0 = new DocumentType(":nth-child(%d)", "", "`", "Tag name must not be empty.");
      document0.after((Node) documentType0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Element element0 = new Element("rb");
      Element element1 = element0.text("rb");
      Element element2 = element1.appendElement("4");
      element2.after("4");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("`");
      Element element0 = document0.head();
      element0.after("sortable");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Element element0 = new Element("`");
      element0.text("`");
      Element element1 = element0.appendElement("-x");
      element1.addClass("-x");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("noresize", "noresize");
      document0.siblingIndex = (-937);
      document0.addClass("n");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Os\"G&>G2za|[q", "Os\"G&>G2za|[q");
      Element element0 = document0.head();
      element0.addClass(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "`");
      Document document1 = (Document)document0.prependChild(document0);
      // Undeclared exception!
      document1.wrap("(yWZ");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("8l4$qfzxwv");
      Element element0 = document0.selectFirst("body");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.wholeText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.val(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Tag tag0 = Tag.valueOf("reatondy");
      Attributes attributes0 = new Attributes();
      attributes0.vals = null;
      FormElement formElement0 = new FormElement(tag0, "reatondy", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val("reatondy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("colgroup", parseSettings0);
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[8];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "colgroup", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val("colgroup");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document(",v");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = new Document(",v");
      // Undeclared exception!
      try { 
        document0.text("s0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("a!,g<zn\ni$", "a!,g<zn\ni$");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("a!,g<zn\ni$");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document(",v");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("`");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      // Undeclared exception!
      try { 
        document0.selectFirst("-Yub};[pMMO[C=~@");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '-Yub};[pMMO[C=~@': unexpected token at '-Yub};[pMMO[C=~@'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.selectFirst("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("html");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      // Undeclared exception!
      try { 
        document0.select("BT[;H@<ogB");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ';H@<ogB'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("`");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Tag tag0 = Tag.valueOf("em");
      Element element0 = new Element(tag0, "hL8dZSvDA");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Document", "", false);
      Element element1 = element0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element1.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~2", "~2");
      TextNode textNode0 = new TextNode("#>a<7bjD");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$Id", "java.lang.string@0000000068");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prependElement("org.jsoup.nodes.Document");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      Element element0 = document0.appendElement("Yp=?bser~u%");
      document0.reparentChild(element0);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FGYw]sUV8@bN~", "FGYw]sUV8@bN~");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rb", "udruwlRb)ho");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.prepend("rb");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("nab@t1?sbam", "nab@t1?sbam");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("clK1eicS(jB", "w(Q'G(|/k_;H2");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(97692013);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlTail(charArrayWriter0, 97692013, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charArrayWriter0, 23, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "`");
      MockFile mockFile0 = new MockFile("`", "`");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, (-3126), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("ij", "ij");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 255, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("br");
      MockFileWriter mockFileWriter0 = new MockFileWriter("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(8226);
      // Undeclared exception!
      document0.outerHtmlHead(mockFileWriter0, 31, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 71, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BT[;H@3ogB", "BT[;H@3ogB");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" />");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-1816), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      TextNode textNode0 = TextNode.createFromEncoded("-yub};[pmmo[c=~@", "M#~xUg=|_Lu-a+oK");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", " D(!CPLktkyOxp 3");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      document0.prependChild(document0);
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsOnlyOfType0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("ij", "ij");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BT[;H@3ogB", "BT[;H@3ogB");
      // Undeclared exception!
      try { 
        document0.is("<html>\n <head></head>\n <body>\n  BT[;H@3ogB\n </body>\n</html>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<html>
         //  <head></head>
         //  <body>
         //   BT[;H@3ogB
         //  </body>
         // </html>': unexpected token at '<html>
         //  <head></head>
         //  <body>
         //   BT[;H@3ogB
         //  </body>
         // </html>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ij", "ij");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("html > head > #root");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Tag tag0 = Tag.valueOf("reatondy");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "reatondy", attributes0);
      // Undeclared exception!
      try { 
        formElement0.is("i[2 9%Ky");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'K'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", " D(!CPLktkyOxp 3");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html("invalid named referenece '%s'");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FGYw]sUV8@bN~", "FGYw]sUV8@bN~");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", " D(!CPLktkyOxp 3");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.prependChild(document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      // Undeclared exception!
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k:U?}XS`5-!5~:B", "k:U?}XS`5-!5~:B");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("`", "`");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell("PC'sjXP2Fn");
      Attributes attributes0 = document0.attributes();
      Tag tag0 = Tag.valueOf("*");
      FormElement formElement0 = new FormElement(tag0, "*", attributes0);
      // Undeclared exception!
      try { 
        formElement0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k:U?}XS`5-!5~:B", "k:U?}XS`5-!5~:B");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BT[;H@3ogB", "BT[;H@3ogB");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("~]w[o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ~]w[o
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("-Yub};[pMMO[C=~@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: -Yub};[pMMO[C=~@
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ij", "ij");
      TextNode textNode0 = TextNode.createFromEncoded("java.lang.string@0000000076");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("ij");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n!y;to,si$#&,", "n!y;to,si$#&,");
      document0.setSiblingIndex((-3752));
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("n!y;to,si$#&,");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = new Document("FGYw]sUV8@bN~");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("figure");
      Document document0 = Document.createShell("2z");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan((-1911));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Tag tag0 = Tag.valueOf("3");
      CDataNode cDataNode0 = new CDataNode("'Wk{}{Wj-&o<K");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "'Wk{}{Wj-&o<K", attributes0);
      Element element0 = formElement0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexEquals(124);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("xk");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "G.~]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.attr("", true);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", " D(!CPLktkyOxp 3");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("G?Vro", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("<U;W '<v", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Document.createShell("`");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "&nbsp;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.attr("", true);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeStarting("head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("bTBuGAGh9^hu }'C`.X");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("k:U?}XS`5-!5~:B");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ij", "ij");
      Element element0 = document0.head();
      document0.addClass("ij");
      element0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000050': unexpected token at '@0000000050'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("af<<@x3FOjDG'V@v^j}", "L}}1cT26RQs0");
      CDataNode cDataNode0 = new CDataNode("af<<@x3FOjDG'V@v^j}");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("udruwlRb)ho", "udruwlRb)ho");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("9Gw?DIMN", "qBQGg]}2nDzV");
      // Undeclared exception!
      try { 
        document0.child(906);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 906, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q2{XH8", "Q2{XH8");
      // Undeclared exception!
      try { 
        document0.child((-1381));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.before("u32");
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Element element0 = new Element("PC'sjXP2Fn");
      // Undeclared exception!
      try { 
        element0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Tag tag0 = Tag.valueOf("reatondy");
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[8];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "reatondy", attributes0);
      // Undeclared exception!
      try { 
        formElement0.attr("reatondy", true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("6|!R~7pynD6ee(+7A+", "6|!R~7pynD6ee(+7A+");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Element element0 = new Element("&&P?0]]OcAdGx)");
      // Undeclared exception!
      try { 
        element0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = new Document("n!y;to,s/!i$#&,");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("", "0");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FGYw]sUV8@bN~", "FGYw]sUV8@bN~");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("M-< +,'(F>%-KC<TDP");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.appendElement("z^yd9lck#");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = new Document("id");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("id");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("V{nagkxWCgNZv", "V{nagkxWCgNZv");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.appendElement("title");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("PC'sjXP2Fn");
      Tag tag0 = Tag.valueOf("PC'sjXP2Fn");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "PC'sjXP2Fn", attributes0);
      Element element0 = document0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("ij", "ij");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.append("~]w[o");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("JUOzkn0cz:^IlUA@/=", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "JUOzkn0cz:^IlUA@/=", attributes0);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-2021847434));
      List<Node> list0 = Parser.parseFragment("", (Element) pseudoTextElement0, "", parseErrorList0);
      pseudoTextElement0.childNodes = list0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.append(", URL=");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~]w[o");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "~]w[o", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = new Document("`");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("^{");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("V{nagkxWCgNZv", "V{nagkxWCgNZv");
      Element element0 = document0.appendElement("br");
      element0.setSiblingIndex((-1110026255));
      // Undeclared exception!
      try { 
        element0.after("org.jsoup.nodes.Element$NodeList");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1110026254, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "2]_s|,TbG<E");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "Doctype", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.after("*");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = new Document("`");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "C,wK]net", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "4_~h8w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = new Document(",v");
      PipedWriter pipedWriter0 = new PipedWriter();
      document0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("PC'sjXP2Fn");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("?1'&[\"#N\"p#{{T!", "?1'&[\"#N\"p#{{T!");
      Element element0 = document0.addClass("?1'&[\"#N\"p#{{T!");
      element0.toggleClass("");
      document0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      document0.hasClass("#root");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k:U?}XSa`5-!5~:B", "k:U?}XSa`5-!5~:B");
      document0.toggleClass("k:U?}XSa`5-!5~:B");
      document0.hasClass("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document(",v");
      Element element0 = document0.html("canvas");
      element0.data();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      document0.appendText("#root");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.prependChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("IxV6]r+kPSkpI?h=");
      document0.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.prependChild(document0);
      Element element0 = document0.nextElementSibling();
      element0.attr("M#~xUg=|_Lu-a+oK", true);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ij", "ij");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Element element0 = new Element("CsjP2Fn");
      Element element1 = element0.appendElement("-X");
      element1.parents();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      Pattern pattern0 = Pattern.compile("-Yub};[pMMO[C=~@", (-5159));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.attr("`", "#");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Element element0 = new Element("title");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = new Document("id");
      Pattern pattern0 = Pattern.compile("id");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Element element0 = new Element("%FV0T--pFW!6 #%82:");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Element element0 = new Element("`");
      element0.id();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k:U?}XS`5-!5~:B", "k:U?}XS`5-!5~:B");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("k:U?}XS`5-!5~:B");
      document0.title("Queue did not match expected sequence");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000047 xk", ".");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("V{nagkxWCgNZv", "V{nagkxWCgNZv");
      Element element0 = document0.appendElement("br");
      MockPrintStream mockPrintStream0 = new MockPrintStream("qsa%VA^D4r07");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(mockPrintStream0, 2147483645, document_OutputSettings2);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "`");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "`");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-921), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k^`&hC_J", "-Hv8d?|Qs");
      document0.appendElement("br");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("k:U?}XS`5-!5~:B");
      Element element0 = document0.toggleClass("k:U?}XS`5-!5~:B");
      document0.addClass("wL7NZLk4oe");
      element0.toggleClass("wL7NZLk4oe");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("k:U?}XS`5-!5~:B");
      document0.toggleClass("k:U?}XS`5-!5~:B");
      Element element0 = document0.addClass("wL7NZLk4oe");
      element0.hasClass("PC'sjXP2Fn");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      document0.toggleClass("");
      document0.toggleClass("");
      document0.getElementsByClass("@7f#[Nhp76UE");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = new Document("%_kk2igI,|c>,r8+{{z4");
      document0.setBaseUri("}");
      Parser.parseXmlFragment("%_kk2igI,|c>,r8+{{z4", "%_kk2igI,|c>,r8+{{z4");
      Element element0 = document0.addClass("%_kk2igI,|c>,r8+{{z4");
      document0.toggleClass("%_kk2igI,|c>,r8+{{z4");
      element0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = new Document(" />");
      Element element0 = document0.addClass(" />");
      document0.toggleClass(" />");
      element0.hasClass(" />");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Document.createShell("k:U?}XS`5-!5~:B");
      Element element0 = document0.toggleClass("k:U?}XS`5-!5~:B");
      element0.toggleClass("VJWw C-nwb>RSy4gk");
      document0.getElementsByClass("k:U?}XS`5-!5~:B");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Document.createShell("k:U?}XS`5-!5~:B");
      document0.toggleClass("k:U?}XS`5-!5~:B");
      document0.getElementsByClass("k:U?}XS`5-!5~:B");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n!y;to,s/!i$w#&,", "n!y;to,s/!i$w#&,");
      CDataNode cDataNode0 = new CDataNode("n!y;to,s/!i$w#&,");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "`");
      DataNode dataNode0 = new DataNode("textarea", "`");
      Element element0 = document0.appendChild(dataNode0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendText("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000026", "*];zl<g");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("n!y;to,si$#&,", "n!y;to,si$#&,");
      document0.reparentChild(document0);
      document0.getElementsMatchingOwnText("n!y;to,si$#&,");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k^`&hC_J", "-qHv8d?|QsT");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("-qHv8d?|QsT");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("BT[;H@<ogB", "k:U?}XS`5-!5~:B");
      CDataNode cDataNode0 = new CDataNode("BT[;H@<ogB");
      document0.prependChild(cDataNode0);
      document0.getElementsMatchingText("k:U?}XS`5-!5~:B");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ij", "ij");
      document0.title("ij");
      document0.getElementsMatchingOwnText("ij");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("colproup", "org.jsoup.nodes.Element$NodeList");
      document0.append("<!");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("`");
      Document document1 = Parser.parse("`", "`");
      Element element0 = document0.prependChild(document1);
      element0.appendText("`");
      element0.getElementsMatchingText("`");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      document0.appendElement("-X");
      document0.getElementsMatchingText("Smry$");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("V{nagkxWCgNZv", "V{nagkxWCgNZv");
      document0.appendElement("br");
      document0.getElementsContainingText("V{nagkxWCgNZv");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("k:U?}XS`5-!5~:B");
      DataNode dataNode0 = new DataNode("k:U?}XS`5-!5~:B");
      Element element0 = document0.prependChild(dataNode0);
      element0.getElementsMatchingText("k:U?}XS`5-!5~:B");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      attributes0.put("id", "id");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ".9b@2FI yl", attributes0);
      pseudoTextElement0.getElementById("id");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("ij", "ij");
      Element element0 = document0.appendElement("ij");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("PC'sjXP2Fn");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BT[;H@3ogB", "BT[;H@3ogB");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = new Document("n!y;to,s/!i$#&,");
      document0.reparentChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@3ogB");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@3ogB");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "`");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("BT[;H@<ogB", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ij", "ij");
      document0.addClass("ij");
      document0.cssSelector();
      assertEquals("ij", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = new Document(",v");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        document0.insertChildren(137, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1169), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parse("nobr", "nobr");
      Pattern pattern0 = Pattern.compile("</", (-796));
      Elements elements0 = document0.getElementsByAttributeValueMatching("nobr", pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-3293), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      assertEquals("-Yub};[pMMO[C=~@", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        document0.insertChildren(643, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Document.createShell("k:U?}XS`5-!5~:B");
      DataNode dataNode0 = new DataNode("k:U?}XS`5-!5~:B");
      Element element0 = document0.prependChild(dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertEquals(2, document0.childNodeSize());
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.FormElement", "org.jsoup.nodes.FormElement");
      document0.appendText("id");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("org.jsoup.nodes.FormElement", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.reparentChild(document0);
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("`", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", " D(!CPLktkyOxp 3");
      Elements elements0 = document0.getElementsByIndexGreaterThan(6);
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" D(!CPLktkyOxp 3", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("~id");
      document0.selectFirst("~id");
      assertEquals(1, document0.childNodeSize());
      assertEquals("~id", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.getElementsByTag("-o;.2`6GyUyH|@|");
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ij", "ij");
      document0.is("html > head > #root");
      assertEquals("ij", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      document0.getAllElements();
      assertEquals("BT[;H@<ogB", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.removeClass("");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = new Document("id");
      // Undeclared exception!
      try { 
        document0.before("id");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@3ogB");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("nQ\"^CkN.(");
      Elements elements0 = document0.getElementsByAttributeValueNot("nQ\"^CkN.(", "       ");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("nQ\"^CkN.(", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = new Document("n!y;to,s/!i$#&,");
      Element element0 = document0.appendTo(document0);
      assertEquals("n!y;to,s/!i$#&,", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@3ogB");
      document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parse("2Z", "2Z");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("Ar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      document0.getElementsByAttributeValueContaining("Ztbz?D$)I<pOq", "UTF-");
      assertEquals("-Yub};[pMMO[C=~@", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Os\"G&>G2za|[q", "Os\"G&>G2za|[q");
      document0.getElementsByAttributeValueMatching("Os\"G&>G2za|[q", ":nth-child(%d)");
      assertEquals("Os\"G&>G2za|[q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("2Z", "2Z");
      Elements elements0 = document0.getElementsContainingText("Ar");
      assertTrue(elements0.isEmpty());
      assertEquals("2Z", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("ij", "ij");
      document0.getElementsByAttributeValueEnding("ij", "XN0h_");
      assertEquals("ij", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("   ");
      boolean boolean0 = document0.is((Evaluator) evaluator_TagEndsWith0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Tag tag0 = Tag.valueOf("readonly");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "readonly", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueMatching("org.jsoup.select.Evaluator$IsOnlyOfType", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      // Undeclared exception!
      try { 
        document0.wrap("Q*oi/]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Elements elements0 = document0.getElementsByIndexEquals(2169);
      assertEquals(":contains(%s)", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rb", "udruwlRb)ho");
      document0.getElementsByAttributeStarting("rb");
      assertEquals(1, document0.childNodeSize());
      assertEquals("udruwlRb)ho", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        element0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("-Yub};[pMMO[C=~@", "-Yub};[pMMO[C=~@");
      Elements elements0 = document0.getElementsByIndexLessThan(566);
      assertEquals(3, elements0.size());
      assertEquals("-Yub};[pMMO[C=~@", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parse("V{nagkxWCgNZv", "V{nagkxWCgNZv");
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.nodes.Element$NodeList");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`", "`");
      document0.prepend("`");
      Element element0 = document0.appendElement("ZFi*-C'-Sts]");
      int int0 = element0.elementSiblingIndex();
      assertEquals(3, document0.childNodeSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Elements elements0 = document0.select(":contains(%s)");
      assertEquals(3, elements0.size());
      assertEquals(":contains(%s)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Document.createShell("k:U?}XS`5-!5~:B");
      document0.getElementsByAttributeValueStarting("LpMX [dn", "k:U?}XS`5-!5~:B");
      assertEquals("k:U?}XS`5-!5~:B", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = new Document(",v");
      document0.getElementsByAttributeValue("noshade", "noshade");
      assertEquals(",v", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@3ogB");
      Element element0 = document0.html("");
      assertEquals("#document", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`", "`");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Element element0 = new Element(".");
      Document document0 = Parser.parse(".", ".");
      // Undeclared exception!
      try { 
        document0.before((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      Elements elements0 = element0.getElementsContainingOwnText("Pattern syntax error: ");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parse(":co'tains(%s)", ":co'tains(%s)");
      document0.dataset();
      assertEquals(":co'tains(%s)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Element element0 = new Element("PC'sjXP2Fn");
      element0.text("PC'sjXP2Fn");
      String string0 = element0.ownText();
      assertEquals("PC'sjXP2Fn", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      Element element0 = document0.tagName("body");
      assertEquals("body", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.prependText("o");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.child(0);
      assertEquals("#root", element0.baseUri());
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Document.createShell("BT[;H@<ogB");
      document0.previousElementSiblings();
      assertEquals("BT[;H@<ogB", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Document.createShell("`");
      document0.prependChild(document0);
      document0.cssSelector();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Document.createShell("`");
      Element element0 = document0.toggleClass("&Lh4X_jR?X-QA%F");
      boolean boolean0 = element0.hasClass("java.lang.string@0000000051");
      assertEquals("`", element0.baseUri());
      assertFalse(boolean0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<?", "<?");
      boolean boolean0 = document0.hasText();
      assertEquals("<?", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Document.createShell("PC'sjXP2Fn");
      Elements elements0 = document0.children();
      assertEquals(1, elements0.size());
      assertEquals("PC'sjXP2Fn", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Document.createShell("`");
      Element element0 = document0.getElementById("&Lh4X_jR?X-QA%F");
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("`", document0.baseUri());
  }
}
