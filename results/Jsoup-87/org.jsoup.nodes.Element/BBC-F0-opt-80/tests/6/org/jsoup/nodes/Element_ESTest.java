/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:18:48 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("))cp.qx", "))cp.qx");
      Element element0 = document0.toggleClass("))cp.qx");
      element0.toggleClass("TMg name must not be empty.");
      document0.hasClass("TMg name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("))cp.qx");
      Element element0 = document0.toggleClass("))cp.qx");
      element0.toggleClass("TMg name must not be empty.");
      document0.hasClass(";I*e");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":u<js-s4", ":u<js-s4");
      document0.appendElement("br");
      Element element0 = document0.appendElement(":u<js-s4");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.body();
      element0.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      StringBuilder stringBuilder0 = new StringBuilder(2638);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuilder0, 2638, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(stringBuffer0, 150, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.appendElement("p$");
      element0.wrap("p$");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      Element element0 = document0.head();
      element0.wrap("S3Qql");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TreeBuilder{currentToken=", "TreeBuilder{currentToken=");
      Element element0 = document0.body();
      element0.wrap("TreeBuilder{currentToken=");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      Element element0 = document0.body();
      element0.val("org.jsoup.select.Evaluator$MatchText");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("required", "required");
      document0.siblingIndex = (-1285);
      document0.val("required");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      Element element0 = document0.head();
      element0.val("org.jsoup.select.Evaluator$MatchText");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.empty();
      document0.val("#document");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[o,/&(%ick", "[o,/&(%ick");
      document0.siblingIndex = (-3372);
      document0.toggleClass("[o,/&(%ick");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("ha@l", "0`^'L[=(mN");
      Element element0 = document0.body();
      element0.toggleClass("0`^'L[=(mN");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.body();
      element0.text("hka hka");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("^4szPEHppt;;", "!");
      Element element0 = document0.head();
      element0.text("i1wVg,0}|\"+C!43");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("^4szPEHppt;;", "!");
      document0.text("i1wVg,0}|\"+C!43");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bt", "bt");
      Element element0 = document0.body();
      Element element1 = element0.tagName("_v>V))CN~/STPu}(U");
      element1.wrap("_v>V))CN~/STPu}(U");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("required", "required");
      document0.siblingIndex = (-1285);
      document0.tagName("required");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("required");
      document0.tagName("html");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Tag tag0 = Tag.valueOf("UF");
      Element element0 = new Element(tag0, "UF");
      element0.tagName();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TreeBuilder{currentToken=", "[`*=d6.)");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("V'@cPd[-!U9&cX", "V'@cPd[-!U9&cX");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TreeBuilder{currentToken=", "[`*=d6.)");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("= VJ<5}4TmmB", "= VJ<5}4TmmB");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell("'");
      document0.selectFirst("html > head");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element element0 = new Element("8xcam");
      element0.selectFirst("8xcam");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = new Document("required");
      document0.appendElement("required");
      document0.selectFirst("required");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("))p.qmE", "))p.qmE");
      Element element0 = document0.appendElement("br");
      element0.appendElement("br");
      document0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("figure", "figure");
      document0.select("Wyu5en");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      document0.select("head");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("require_", "require_");
      document0.setSiblingIndex((-3280));
      document0.removeClass("3uXVq?lJKH65gl");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Element element0 = document0.body();
      element0.removeClass("aS*AK_JU>n>dQ]dH_d");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.body();
      element0.prependText("hka<ml");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.prependElement("title");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szpehppt;;", "^4szpehppt;;");
      Element element0 = document0.body();
      element0.prepend("$'EPn^q");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("_MceNQE$J'l>zyQO4", "_MceNQE$J'l>zyQO4");
      document0.empty();
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("`tM+@uvPb<@2r(N.;j");
      Element element0 = document0.appendElement("`tM+@uvPb<@2r(N.;j");
      element0.after((Node) document0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TreeBuilder{currentToken=", "TreeBuilder{currentToken=");
      Element element0 = document0.appendElement("bt");
      document0.siblingIndex = (-72);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("hka=ml", "hka=ml");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IsFirstOfType", "required");
      Document document1 = new Document("org.jsoup.select.Evaluator$IsFirstOfType");
      document1.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.html("org.jsoup.nodes.Element$NodeList");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      Element element0 = document0.createElement("^4szPEHppt;;");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      element0.insertChildren((-1), (Collection<? extends Node>) elements0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      document0.prependChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hka<ml", "org.jsoup.nodes.Attribute");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Pattern pattern0 = Pattern.compile("|FGJ $FK93A+'Gluc");
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%uCj", "1fZe_f=@b");
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(124, 124);
      document0.is((Evaluator) evaluator_IsNthChild0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Tag tag0 = Tag.valueOf("UF");
      Element element0 = new Element(tag0, "UF");
      element0.is("UF");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      document0.is("#document");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("'");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("tex*tara", "tex*tara");
      Element element0 = document0.body();
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      Element element0 = document0.body();
      element0.html("@:");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      Element element0 = document0.createElement("^uib*7TJS'z.-2");
      element0.siblingIndex = (-1110026255);
      element0.html("<^uib*7TJS'z.-2></^uib*7TJS'z.-2>");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.html("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      MockPrintStream mockPrintStream0 = new MockPrintStream("!FS[mh~r#+y$)c5<");
      document0.html(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TreeBuilder{currentToken=", "[`*=d6.)");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.parser.Tag");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.parser.Tag", attributes0);
      formElement0.html();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("da=}d");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Pattern pattern0 = Pattern.compile("head", 24);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      Pattern pattern0 = Pattern.compile("", 0);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      Pattern pattern0 = Pattern.compile("", 0);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("br", "br");
      document0.getElementsContainingText("#root");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hka<m9", "hka<m9");
      document0.getElementsContainingOwnText("type");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      document0.getElementsByTag(".T&5\"ZWLD%=N>Pi_");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("SzYAko5_L%CYv? ");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      document0.getElementsByIndexLessThan(765);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      document0.getElementsByIndexGreaterThan(60);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&#x", "&#x");
      document0.getElementsByAttributeValueNot(" ", " ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      document0.getElementsByAttributeValueNot("0vixidA)=_S", "0vixidA)=_S");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("tex*tara", "tex*tara");
      document0.getElementsByAttributeValueEnding("<html>\n <head></head>\n <body>\n  tex*tara\n </body>\n</html>", "tex*tara");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("_+:Z1Y");
      document0.getElementsByAttributeValueContaining("Q]rn)AERu,sS4", "_+:Z1Y");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("figure", "value");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      document0.childNodes = (List<Node>) linkedList0;
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TreeBuilder{currentToken=", "TreeBuilder{currentToken=");
      Element element0 = document0.body();
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("'l03");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = new Document("head");
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.head();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("tex*tara", "tex*tara");
      document0.toggleClass("html");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s'`O1jD%", "s'`O1jD%");
      Element element0 = document0.addClass("Qp7~kV!");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("head");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'", "'");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("i", "i");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("hka<ml");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      Element element0 = document0.body();
      element0.empty();
      element0.before("S3Qql");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      Element element0 = document0.createElement("<html>\n <head></head>\n <body></body>\n</html>");
      element0.reparentChild(document0);
      document0.before("(");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Tag tag0 = Tag.valueOf("-]%t)p]8gNd4uGk");
      FormElement formElement0 = new FormElement(tag0, "-]%t)p]8gNd4uGk", (Attributes) null);
      formElement0.baseUri();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      Element element0 = document0.val("^4szPEHppt;;");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      Element element0 = document0.body();
      element0.attr("org.jsoup.select.Evaluator$MatchText", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      Element element0 = document0.head();
      element0.attr("org.jsoup.select.Evaluator$MatchText", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("'");
      Element element0 = document0.body();
      element0.attr("html > body", "</");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      document0.setSiblingIndex((-1165));
      document0.attr("sNTbe&=PHJ", "ScriptDataDoubleEscapeEnd");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.attr("h", "h");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("tex*tara");
      document0.attr("img", "mi*lr5E\fDM%HL");
      document0.getElementsByAttribute("img");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("d!ZR", "hka<ml");
      document0.attr("d!ZR", (String) null);
      document0.getElementsByAttributeStarting("d!ZR");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("*;Q=");
      Tag tag0 = Tag.valueOf("#!Au+<");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#!Au+<", attributes0);
      document0.appendTo(pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[o,/&(%ick", "[o,/&(%ick");
      document0.siblingIndex = (-3372);
      document0.appendText("[o,/&(%ick");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.appendText("");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[o,/&(%ick", "[o,/&(%ick");
      document0.appendText("[o,/&(%ick");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TreeBuilder{currentToken=", "TreeBuilder{currentToken=");
      Element element0 = document0.head();
      TextNode textNode0 = new TextNode("[%s~=%s]");
      element0.appendChild(textNode0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("))p.qmE", "))p.qmE");
      document0.siblingIndex = (-1683);
      document0.append("marquee");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("tex*tara", "tex*tara");
      Element element0 = document0.prependElement(" />");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("V'@cPd[-!U9&cm", "V'@cPd[-!U9&cm");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("hka<mvZl", "hka<mvZl");
      Element element0 = document0.head();
      Element element1 = element0.tagName("&7wGn2`77_\"5");
      element1.after("&7wGn2`77_\"5");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      linkedList0.offerFirst(document0);
      document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
      // Undeclared exception!
      document0.wrap("}wj8MpsBCL>cJ");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}", "}");
      Element element0 = document0.appendElement("}");
      // Undeclared exception!
      try { 
        element0.wrap("<KjuE[Cd");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Element element0 = new Element("'");
      // Undeclared exception!
      try { 
        element0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("org.jsoup.internal.Normalizer");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("'", "'");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("figure", "value");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      document0.childNodes = (List<Node>) linkedList0;
      // Undeclared exception!
      try { 
        document0.text("Insert position out of bounds.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("'");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("required", "required");
      Comment comment0 = new Comment("required");
      comment0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("org.jsoup.select.Evaluator");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("br", "br");
      // Undeclared exception!
      try { 
        document0.tagName(":u<js-s4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("))p.qmE", "))p.qmE");
      // Undeclared exception!
      try { 
        document0.selectFirst("%AuBloyey\"");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '%AuBloyey\"': unexpected token at '%AuBloyey\"'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[o,/&(%ick", "[o,/&(%ick");
      // Undeclared exception!
      try { 
        document0.selectFirst("[o,/&(%ick");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'i'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "Q");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("p3D>*", "~4yn)Bmym(jW");
      // Undeclared exception!
      try { 
        document0.select("~4yn)Bmym(jW");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'jW'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[o,&(%ick", "[o,&(%ick");
      // Undeclared exception!
      try { 
        document0.select("[o,&(%ick");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'i'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o2QgHFvo0[:C7CAK%b", "o2QgHFvo0[:C7CAK%b");
      // Undeclared exception!
      try { 
        document0.select("o2QgHFvo0[:C7CAK%b");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%b'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("$E8AN\"-)i#U", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Entities");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "L=@=?(_;j>}8nIOAJ", attributes0);
      // Undeclared exception!
      try { 
        element0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[H?RmyDDq[7K!B&KL9", "[H?RmyDDq[7K!B&KL9");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("~", "~", false);
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h9<]{%v]mz`mb", "id");
      Element element0 = document0.append("h9<]{%v]mz`mb");
      List<Node> list0 = Parser.parseFragment(")4yp+{Y.#GT}_", (Element) document0, "h9<]{%v]mz`mb");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prependText("h9<]{%v]mz`mb");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("G3aQp}dj(Ukc", parseSettings0);
      Element element0 = new Element(tag0, "G3aQp}dj(Ukc");
      // Undeclared exception!
      try { 
        element0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "head");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.prependElement("hka<ml");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      Comment comment0 = new Comment((String) null, (String) null);
      document0.parentNode = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.prependChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("V'@c!dJ-!U9&cm", "V'@c!dJ-!U9&cm");
      document0.reparentChild(document0);
      Element element0 = document0.empty();
      // Undeclared exception!
      try { 
        element0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document("html");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^4szPEHppt;;", "^4szPEHppt;;");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("nrz.{y6");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3987);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3987);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintWriter0, 3987, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document(" d");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, (-868), document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-1045), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("^4szPEHppt;;", "^4szPEHppt;;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("html", false);
      Charset charset0 = document0.charset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(outputStreamWriter0, (-3682), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'|Y;(D2%}MKnnt", "'|Y;(D2%}MKnnt");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 1174, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("require_", "require_");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "bt");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlHead(mockFileWriter0, 30000, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-2459), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.CDataNode", "org.jsoup.nodes.CDataNode");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-1060), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = new Document("bt");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 60, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("body");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      // Undeclared exception!
      try { 
        document0.is(".");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("s|T^dY", "s|T^dY");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("BeforeDoctypePublicIdentifier");
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.html("^4szpehppt;;");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hka<m9", "hka<m9");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("V'@cPd[-!U9&cm", "V'@cPd[-!U9&cm");
      document0.reparentChild(document0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      document0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", " Pad");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("'", ":has");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("[@TT'!|b8ECg<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: [@TT'!|b8ECg<
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("V3;f]Z{DfUG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: V3;f]Z{DfUG
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "$&#~w#E1ed3@0RRX-.");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("hka<ml", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("V");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("V'@cPd[-!U9&cm", "V'@cPd[-!U9&cm");
      document0.siblingIndex = (-1625949436);
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("ANq,<!$45nEqM#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("))p.qmE", "))p.qmE");
      DataNode dataNode0 = new DataNode("))p.qmE");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", " ");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("h$?gtaD-v}e");
      TextNode textNode0 = new TextNode("hxyZYtc", "table");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-620));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell("mwmip9mj$=og");
      TextNode textNode0 = new TextNode("mwmip9mj$=og");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(252);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parse("))cp.qx", "))cp.qx");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4`2>", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("noframes", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("$53gm", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "html");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("<html>\n <head></head>\n <body></body>\n</html>", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("org.jsoup.select.Evaluator", "u6J@{'c)9Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: u6J@{'c)9Z
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("8-,]ot-d-nU1wx 10G");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "[fr'}oF%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("))p.qmE", "))p.qmE");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("))p.qmE", "))p.qmE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("InBody", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("tex*tara", "tex*tara");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("figure", "value");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("V'@cPd[-!U9&cm", "V'@cPd[-!U9&cm");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementById("V'@cPd[-!U9&cm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = new Element("'");
      // Undeclared exception!
      try { 
        element0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("WXYAWGVU&F*]B!n2", "WXYAWGVU&F*]B!n2");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("bt", "bt");
      Element element0 = document0.appendElement("bt");
      DataNode dataNode0 = DataNode.createFromEncoded("&m?z`!my?))", "!2(3nT7cNY75,");
      element0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("ha<ml");
      Element element0 = document0.body();
      element0.addClass(" > ");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000052': unexpected token at '@0000000052'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Element element0 = new Element("^4szPEHppt;;");
      // Undeclared exception!
      try { 
        element0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GRUq,?;;3g^JSy", "^4szPEHppt;;");
      Element element0 = document0.head();
      // Undeclared exception!
      try { 
        element0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      // Undeclared exception!
      try { 
        document0.child((-1165));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Element element0 = new Element("y0+Lh@^|bMFt&G");
      Document document0 = Parser.parseBodyFragmentRelaxed("y0+Lh@^|bMFt&G", ".:nPGW!Z-/");
      Element element1 = element0.appendTo(document0);
      Element element2 = document0.prepend(".:nPGW!Z-/");
      element2.html("y0+Lh@^|bMFt&G");
      // Undeclared exception!
      try { 
        element1.before((Node) element2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.before("aZ!r!fa1mh{q\"3");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("require_", "require_");
      DataNode dataNode0 = new DataNode("*", "require_");
      Document document1 = (Document)document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        document1.before("~c");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Element element0 = new Element("'");
      CDataNode cDataNode0 = new CDataNode("br");
      Node node0 = cDataNode0.doClone(element0);
      element0.setParentNode(node0);
      // Undeclared exception!
      element0.attr("'", "'");
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "!");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "<body>\n html\n</body>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("required", "required");
      DataNode dataNode0 = DataNode.createFromEncoded("#ppn", "#root");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Element element0 = new Element("This is a searchable index. Enter search keywords: ");
      Element element1 = element0.attr("/>", true);
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        element1.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("g})", "g})");
      Element element0 = document0.body();
      element0.setSiblingIndex((-2580));
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.evaluator", "org.jsoup.select.evaluator");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement("org.jsoup.select.evaluator");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":u<js-s4", ":u<js-s4");
      List<Node> list0 = Parser.parseXmlFragment("br", "br");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("br");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.settings((ParseSettings) null);
      Document document0 = parser0.parseInput("br", "required");
      // Undeclared exception!
      try { 
        document0.appendElement("*>lwY2wsqy2!,2)H:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("r+", "F7?USto&6{Ngn|a1~E");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("sv2*KfA2>AeVnG5>-a");
      Element element0 = document0.prependChild(document0);
      document0.setSiblingIndex(1470);
      // Undeclared exception!
      try { 
        element0.appendChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1470, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("hka<ml");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.append("^4szPEHppt;;");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("^4szPEHppt;;");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("figure", "value");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("33S$R=az+.;NE$=SZ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "hka<ml");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TreeBuilder{currentToken=", "TreeBuilder{currentToken=");
      Element element0 = document0.appendElement("bt");
      element0.html((OutputStreamWriter) null);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("d!ZR", "hka<ml");
      document0.toggleClass("hka<ml");
      document0.addClass("hka<ml");
      document0.hasClass("hka<ml");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("V'@cPd[-!U9&cm", "V'@cPd[-!U9&cm");
      document0.hasClass("V'@cPd[-!U9&cm");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.evaluator", "org.jsoup.select.Evaluator$MatchText");
      document0.toggleClass("hka<ml");
      document0.hasClass("org.jsoup.select.Evaluator$MatchText");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.append("hka<ml");
      element0.data();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("))p.qmE", "))p.qmE");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "S3Qql");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "^4szpehppt;;");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.prependChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.appendElement("p$");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("hka<mvZl", "hka<mvZl");
      document0.tagName("U-|m](Ie,?qR<o");
      Element element0 = document0.head();
      element0.after("&7wGn2`77_\"5");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("'");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Pattern pattern0 = Pattern.compile("#document", 872);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hka<ml", "org.jsoup.nodes.Attribute");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Vvt=;bPGiX", "ir>mtdj}7<6m$'8");
      Pattern pattern0 = Pattern.compile("", 3259);
      document0.getElementsByAttributeValueMatching("ir>mtdj}7<6m$'8", pattern0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":u<js-s4", ":u<js-s4");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("26", "'");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("))p.qmE", "))p.qmE");
      Document document1 = Parser.parseBodyFragmentRelaxed("nu", "))p.qmE");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document0.parentNode = (Node) document2;
      document0.appendElement("br");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("X4DLP4=", "X4DLP4=");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("))p.qmE", "))p.qmE");
      Element element0 = document0.appendElement("br");
      element0.appendElement("br");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("))p.qmE", "))p.qmE");
      Document document1 = Parser.parseBodyFragmentRelaxed("nu", "))p.qmE");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document0.parentNode = (Node) document2;
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.tagName("textarea");
      // Undeclared exception!
      try { 
        document0.val("textarea");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[o,/&(%ick", "[o,/&(%ick");
      Element element0 = document0.toggleClass("[o,/&(%ick");
      document0.toggleClass("[o,/&(%ick");
      element0.getElementsByClass("[o,/&(%ick");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.prepend("textarea");
      document0.toggleClass("textarea");
      document0.toggleClass("TM~f=ame ust }ot be empty.");
      element0.hasClass("java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse("+0&^dY", "+0&^dY");
      document0.toggleClass("+0&^dY");
      document0.toggleClass("");
      document0.hasClass("TMg name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = new Document("required");
      document0.toggleClass("?w?o7R!p7!54Fu@Q");
      document0.toggleClass(" > ");
      document0.hasClass("BogusComment");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4';e9L[D&@i8sYm*NQ", "4';e9L[D&@i8sYm*NQ");
      document0.toggleClass("4';e9L[D&@i8sYm*NQ");
      document0.toggleClass("4';e9L[D&@i8sYm*NQ");
      document0.toggleClass("4';e9L[D&@i8sYm*NQ");
      document0.hasClass("java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = new Document("required");
      document0.toggleClass("?w?o7R!p7!54Fu@Q");
      document0.hasClass("BogusComment");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$MatchText", "org.jsoup.select.evaluator");
      document0.toggleClass("org.jsoup.select.Evaluator$MatchText");
      document0.getElementsByClass("org.jsoup.select.Evaluator$MatchText");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!--", "<!--");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "java.lang.string@0000000009");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("V'@cPd[-!U9&cm", "V'@cPd[-!U9&cm");
      document0.reparentChild(document0);
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Node[] nodeArray0 = new Node[6];
      Element.preserveWhitespace(nodeArray0[5]);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("br");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      document0.appendChild(pseudoTextElement0);
      document0.appendElement("br");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TreeBuilder{currentToken=", "ag name must notbe empty.");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("TreeBuilder{currentToken=");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("))p.qmE", "=czGU<@;xF|X<U6");
      CDataNode cDataNode0 = new CDataNode("=czGU<@;xF|X<U6");
      document0.appendChild(cDataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Document.createShell("))cp.qx");
      Element element0 = document0.prepend("f$(<>R-h([Lv{_sJ");
      document0.append("qu;ied");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.appendElement("p$");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TreeBuilder{currentToken=", "[`*=d6.)");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p$", "^(hsu");
      document0.append("DR xB(!Z]WZ1k<?dt+");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("V'@c!dJ-!U9&cm", "V'@c!dJ-!U9&cm");
      document0.reparentChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", " Pad");
      Document document1 = new Document(" Pad");
      document1.prependChild(document0);
      document1.appendElement("head");
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", " Pad");
      Element element0 = document0.body();
      element0.prependChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("required");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("required", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      
      Element element2 = element1.nextElementSibling();
      assertEquals("hka<ml", element2.baseUri());
      assertNotNull(element2);
      assertEquals(1, element2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      document0.nextElementSibling();
      assertEquals("^uib*7TJS'z.-2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^4szPEHppt;;", "^4szPEHppt;;");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("^4szPEHppt;;", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("^uib*7TJS'z.-2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = new Document("novalidate");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.CDataNode", "org.jsoup.nodes.CDataNode");
      Element element0 = document0.body();
      element0.after("body");
      String string0 = element0.cssSelector();
      assertEquals("org.jsoup.nodes.CDataNode", element0.baseUri());
      assertEquals("html > body:nth-child(2)", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Document.createShell("ha<ml");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("ha<ml", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("hka<ml");
      document0.reparentChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("hka<ml", document0.baseUri());
      assertEquals("#root", string0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = new Document("tex*tara");
      document0.toggleClass("tex*tara");
      document0.cssSelector();
      assertEquals("tex*tara", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(62, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = new Document(";ytu/Nl*)");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-6624), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("heEQQ");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      // Undeclared exception!
      try { 
        document0.insertChildren(44, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      Elements elements0 = document0.getElementsMatchingOwnText("#root");
      // Undeclared exception!
      try { 
        document0.insertChildren((-2301), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("WXYAWGVU&F*]B!n2", "WXYAWGVU&F*]B!n2");
      DataNode dataNode0 = new DataNode("WXYAWGVU&F*]B!n2");
      document0.prependChild(dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
      assertTrue(list0.contains(dataNode0));
      assertEquals("WXYAWGVU&F*]B!n2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("g})", "g})");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals("g})", element0.baseUri());
      assertEquals(1, list0.size());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("g})", "g})");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals("g})", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.html("hka<ml");
      Elements elements0 = document0.children();
      assertEquals(1, document0.childNodeSize());
      assertEquals("hka<ml", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("^uib*7TJS'z.-2");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2701));
      assertEquals("^uib*7TJS'z.-2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = new Document("required");
      document0.selectFirst("required");
      assertEquals("required", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("hka<ml");
      Elements elements0 = document0.getElementsMatchingText("#root");
      assertEquals("hka<ml", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[o,/&(%ick", "[o,/&(%ick");
      // Undeclared exception!
      try { 
        document0.is("[o,/&(%ick");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'i'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.getAllElements();
      assertEquals("hka<ml", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Element element0 = document0.removeClass("aS*AK_JU>n>dQ]dH_d");
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse("require_", "require_");
      // Undeclared exception!
      try { 
        document0.before("~c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":u<js-s4", ":u<js-s4");
      document0.getElementsByAttribute(":u<js-s4");
      assertEquals(1, document0.childNodeSize());
      assertEquals(":u<js-s4", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = new Document("tex*tara");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("tex*tara", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("))p.qmE", "))p.qmE");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4';e9L[D&@i8sYm*NQ", "4';e9L[D&@i8sYm*NQ");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("4';e9L[D&@i8sYm*NQ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("[^-a-zA-Z0-9_:.]", "[^-a-zA-Z0-9_:.]");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.evaluator", "org.jsoup.select.evaluator");
      assertEquals("org.jsoup.select.evaluator", document0.baseUri());
      
      document0.doSetBaseUri((String) null);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("V'@cPd[-!U9&cm", "V'@cPd[-!U9&cm");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Element element0 = new Element("'");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining(" > ", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsContainingText("");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("26", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding((String) null, "hh'RDB1V82");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parse("R]*b", "R]*b");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.getElementsByAttributeValueMatching("org.jsoup.nodes.element$2", " S:;");
      assertEquals("hka<ml", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.val("hka<ml");
      boolean boolean0 = document0.hasAttributes();
      assertEquals("hka<ml", document0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      // Undeclared exception!
      try { 
        document0.wrap("p$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("mwmip9mj$=og");
      Elements elements0 = document0.getElementsByIndexEquals(252);
      assertEquals("mwmip9mj$=og", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uc.R0FL;'", "80_zuFs(?0$SODm");
      document0.getElementsByAttributeStarting("?OgBVxw 24");
      assertEquals("80_zuFs(?0$SODm", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.evaluator", "org.jsoup.select.Evaluator$MatchText");
      Elements elements0 = document0.getElementsByIndexLessThan((-1625949436));
      assertEquals(0, elements0.size());
      assertEquals("org.jsoup.select.Evaluator$MatchText", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("hka<mvZl", "hka<mvZl");
      // Undeclared exception!
      try { 
        document0.after("&7wGn2`77_\"5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prepend("textarea");
      document0.tagName("textarea");
      String string0 = element0.val();
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", ">p5u?;8Bu!6x");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "^4szpehppt;;");
      document0.getElementsByAttributeValueStarting("'", "hka^4szpehppt;;");
      assertEquals("^4szpehppt;;", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("))p.qmE", "))p.qmE");
      document0.getElementsByAttributeValue("))p.qmE", "))p.qmE");
      assertEquals("))p.qmE", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("V'@cPd[-!U9&cm", "V'@cPd[-!U9&cm");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TreeBuilder{currentToken=", "ag name must notbe empty.");
      document0.wholeText();
      assertEquals("ag name must notbe empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parse("i", "i");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      Element element0 = document0.prependText("hka<ml");
      assertEquals("hka<ml", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertEquals("textarea", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      document0.previousElementSiblings();
      assertEquals("hka<ml", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parse("hka<ml", "hka<ml");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.evaluator", "org.jsoup.select.evaluator");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parse("'", ":has");
      Elements elements0 = document0.children();
      assertEquals(":has", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4';e9L[D&@i8sYm*NQ", "4';e9L[D&@i8sYm*NQ");
      document0.nextElementSiblings();
      assertEquals("4';e9L[D&@i8sYm*NQ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Document.createShell("hka<ml");
      Element element0 = document0.getElementById("hka<ml");
      assertEquals("hka<ml", document0.baseUri());
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
  }
}
