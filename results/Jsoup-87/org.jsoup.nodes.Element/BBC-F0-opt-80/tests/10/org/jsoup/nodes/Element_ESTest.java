/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 10 23:17:18 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not b} empty\"", "Tag name must not b} empty\"");
      document0.addClass("p2[n$t\"}");
      Element element0 = document0.toggleClass("Tag name must not b} empty\"");
      element0.getElementsByClass("Tag name must not b} empty\"");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(" />", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "o4ZlhkJXK7K", attributes0);
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      StringBuilder stringBuilder0 = new StringBuilder(1367);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuilder0, 3424, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      Element element0 = new Element(tag0, "");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("$VALUES", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "$VALUES", attributes0);
      element0.doSetBaseUri("th");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      Element element0 = document0.appendElement(" />");
      element0.wrap("r+jO");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      Element element0 = document0.head();
      element0.wrap("znnHNf*92*Kp,:n");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]G", "]G");
      Element element0 = document0.body();
      element0.wrap("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.TextNode", parseSettings0);
      Element element0 = new Element(tag0, "=%ryq%1m_sohqc},l", attributes0);
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000038");
      element0.siblingIndex = (-1436010313);
      element0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.head();
      element0.val("g0?19g1x*Gt,'+3Og");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      Element element0 = document0.appendElement("basefont");
      element0.val("basefont");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not b} empty\"", "Tag name must not b} empty\"");
      document0.siblingIndex = (-2266);
      document0.toggleClass("Tag name must not b} empty\"");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("yEe=LGwwm", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "o<5[mVA&b|0~y", attributes0);
      formElement0.setSiblingIndex((-1313));
      formElement0.text("yPD%Ct");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell(")op<)/~<z-JEcz");
      Element element0 = document0.body();
      element0.text(")op<)/~<z-JEcz");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell(")op<)/~<z-JEcz");
      document0.text(")op<)/~<z-JEcz");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      Element element0 = document0.appendElement(" />");
      element0.tagName("#root");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("zHNf*92*Kp,n");
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Document.createShell(")p</~<z-JEcz");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "org.jsoup.nodes.Element$2");
      Element element0 = document0.appendElement("textarea");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf69f*ap,:1", "znnHNf69f*ap,:1");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "org.jsoup.nodes.Element$2");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      Element element0 = document0.body();
      Element element1 = element0.after("|deelxt70z{_x}iiq");
      element1.shallowClone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell("fallback");
      document0.selectFirst(":only-of-type");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      Element element0 = document0.appendElement("basefont");
      element0.selectFirst("basefont");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "bq");
      document0.selectFirst(",JJ");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("GjXc5K_G*ny\"jc", "GjXc5K_G*ny\"jc");
      document0.select("l44OB5Yzb8");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s)H&er4>C{.xY/NSX-]", "s)H&er4>C{.xY/NSX-]");
      document0.select("html");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      Element element0 = document0.body();
      element0.removeClass("html");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.setSiblingIndex((-1));
      document0.removeClass("86&`&HIj x~BtL");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse("5y|rx", "org.jsoup.nodes.BooleanAttribute");
      Element element0 = document0.head();
      element0.removeClass("org.jsoup.nodes.BooleanAttribute");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("znnHNf*92*Kp,:n");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.head();
      element0.prependText("tw+eo'pD7p");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.appendElement("znnHNf9f*ap,:1");
      element0.prependText("znnHNf9f*ap,:1");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      Element element0 = document0.appendElement(" />");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hZ-N~k0Y,T`R}=(", "hZ-N~k0Y,T`R}=(");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      Element element0 = document0.appendElement(" />");
      element0.prepend(" />");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("vn|%uBCN)0=M9<Q", "vn|%uBCN)0=M9<Q");
      Element element0 = document0.head();
      element0.prepend("vn|%uBCN)0=M9<Q");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("p}F}ffnhD`<;S7_", "UTArzEy}9Nb");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf69f*ap,:1", "znnhnf9f*ap,:1");
      Element element0 = document0.head();
      element0.reparentChild(document0);
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("x;88Xnt7");
      document0.appendTo(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      Element element0 = new Element("znHNf*92*Kp,n");
      document0.setParentNode(element0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znNf*2*Kp,n", "znNf*2*Kp,n");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("a|kR:.xG${;S/$P", "a|kR:.xG${;S/$P");
      document0.prepend("=MNm");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("GjXc5K_G*ny\"jc", "GjXc5K_G*ny\"jc");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      Element element0 = document0.head();
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("{[r1|U[9q{z_", "Rcdata");
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(1, 0);
      document0.is((Evaluator) evaluator_IsNthLastOfType0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("em", "em");
      Element element0 = document0.appendElement("em");
      element0.is("em");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document(" />");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.appendElement("znnHNf9f*ap,:1");
      List<Node> list0 = document0.ensureChildNodes();
      element0.insertChildren(0, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S|RR-Q`m", "S|RR-Q`m");
      document0.setSiblingIndex((-2042));
      document0.html("audio");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      Element element0 = document0.head();
      element0.html("html > head");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a|kR:.xG${;S/$P", "a|kR:.xG${;S/$P");
      Element element0 = document0.appendElement("a>");
      element0.html("L5FB7Q#2R`7uV|rTg");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("keygen");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.toggleClass("7$jEQf=J= AT");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("{[r1|U[9q{z_", "Rcdata");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("upBVZj~k", "upBVZj~k");
      Element element0 = document0.createElement("upBVZj~k");
      Pattern pattern0 = Pattern.compile("upBVZj~k");
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      Element element1 = document0.head();
      element1.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell(")op<)/~<z-JEcz");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Pattern pattern0 = Pattern.compile("znnHNf9f*ap,:1", (-491));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      document0.getElementsMatchingOwnText("C`r");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("GjXc5K_G*ny\"jc", "GjXc5K_G*ny\"jc");
      document0.getElementsContainingOwnText("GjXc5K_G*ny\"jc");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")n%uBC)0=G<Q", ")n%uBC)0=G<Q");
      document0.getElementsByTag("6m0");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.appendElement("znnHNf9f*ap,:1");
      element0.getElementsByTag("znnHNf9f*ap,:1");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      document0.getElementsByIndexGreaterThan(100);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Element element0 = new Element("Nxn%@W/Gp");
      element0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("jQr$");
      Element element0 = document0.addClass("jQr$");
      element0.toggleClass("jQr$");
      document0.getElementsByClass("jQr$");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      document0.getElementsByAttributeValueNot(" ", " ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("c&xtzma?_x*n_]");
      Element element0 = document0.attr("c&xtzma?_x*n_]", "");
      element0.getElementsByAttributeValueMatching("c&xtzma?_x*n_]", "");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.getElementsByAttributeValueEnding(" />", " ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(" > ", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(" > ", " > ", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " > ", attributes1);
      pseudoTextElement0.getElementsByAttributeValue(" > ", " > ");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("TDqJ%zNh0", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("encoding", "encoding");
      Element element0 = new Element(tag0, "TDqJ%zNh0", attributes1);
      element0.getElementsByAttributeStarting("encoding");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Tag tag0 = Tag.valueOf("KvZmUZi.)32n|'9");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("value", true);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "KvZmUZi.)32n|'9", attributes1);
      pseudoTextElement0.getElementsByAttribute("value");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.appendElement("znnHNf9f*ap,:1");
      document0.prepend("znnHNf9f*ap,:1");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.appendElement("znnHNf9f*ap,:1");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      document0.reparentChild(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell(":not(");
      Element element0 = document0.text(":not(");
      element0.siblingIndex = (-654);
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qk>/b", "qk>/b");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GjXc5K_G*ny\"jc", "Children collection to be inserted must not be null.");
      Element element0 = document0.appendElement("br");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf69f*ap,:1", "znnHNf69f*ap,:1");
      Element element0 = document0.head();
      Locale locale0 = new Locale("znnHNf69f*ap,:1", "znnHNf69f*ap,:1");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("basefont", "basefont");
      Element element0 = document0.appendElement("basefont");
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("sub", "Rcdata");
      document0.toggleClass("address");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("z^-bnHNf*92*Kp,:n", "z^-bnHNf*92*Kp,:n");
      document0.addClass("z^-bnHNf*92*Kp,:n");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Element element0 = new Element(")op<)/~<z-JEcz");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("GjXc5K_G*ny\"jc", "GjXc5K_G*ny\"jc");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell(")op<)/~<z-JEcz");
      Element element0 = document0.body();
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S|RR-Q`m", "S|RR-Q`m");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("zHNf*92*Kp,n");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      document0.reparentChild(document0);
      DocumentType documentType0 = new DocumentType("znHNf*92*Kp,n", "znHNf*92*Kp,n", "znHNf*92*Kp,n", "2K/sY8a({", "2K/sY8a({");
      document0.before((Node) documentType0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("attributeValueUnquoted");
      Element element0 = document0.appendElement("br");
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("? |yeur`|w", "? |yeur`|w");
      Element element0 = document0.body();
      element0.before("? |yeur`|w");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("GjXc5K_G*ny\"jc", "GjXc5K_G*ny\"jc");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Element element0 = new Element("=l\"i,,Rf/u3L'qxC#Yy");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf69f*ap,:1", "znnHNf69f*ap,:1");
      Element element0 = document0.toggleClass("znnHNf69f*ap,:1");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      Element element0 = document0.appendElement(" />");
      element0.attr("'x6Mq&*=7>", true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      Element element0 = document0.text(" />");
      element0.siblingIndex = (-1239);
      document0.attr("3Dm\"*z~2S", true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("vn|%uBCN)0=M9<Q", "vn|%uBCN)0=M9<Q");
      Element element0 = document0.head();
      element0.attr("k", true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.attr("7$jEQf=J= AT", "");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Object must not be null", "9");
      Element element0 = document0.appendElement("Children collection to be inserted must not be null.");
      document0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document(" />");
      Document document1 = Document.createShell(" />");
      document0.appendTo(document1);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">t'Ue$cbBkj^F.L", ".d0'iQ|[UIlqn9");
      document0.setSiblingIndex((-1885));
      document0.appendText("@E");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("znnHNf69f*ap,:1");
      Element element0 = document0.body();
      element0.appendText("znnHNf69f*ap,:1");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">t'Ue$cbBkj^F.L", ".d0'iQ|[UIlqn9");
      document0.appendText("@E");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      document0.appendElement("body");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("z^-bnHNf*92*Kp,:n", "z^-bnHNf*92*Kp,:n");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "em");
      Element element0 = document0.appendElement("em");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hZ-N~k0Y,T`R}=(", "hZ-N~k0Y,T`R}=(");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GjXc5K_G*ny\"jc", "Children collection to be inserted must not be null.");
      Element element0 = document0.appendElement("em");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("allowfullscreen");
      Document document0 = parser0.parseInput((Reader) stringReader0, "allowfullscreen");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.after((Node) document1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = new Document("GjXc5K_G*ny\"jc");
      Element element0 = document0.appendElement("wsnd$6o}`g");
      element0.after("? |yeur`|w");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tag name must not b} empty\"", "basefont");
      document0.siblingIndex = (-4251);
      document0.addClass("abQPTrdQ&)V' .&-:R");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.addClass("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.wrap("znnHNf*92*Kp,:n");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("? |Yeur`|W");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("'qGt[M-", "'qGt[M-");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.wholeText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.val("znHNf*92*Kp,n");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("JM1.:8mo}_%L?id)C@");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.val("_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document(" />");
      // Undeclared exception!
      try { 
        document0.text("PUj,sZj-l4n6>e&6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h", "h");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("iT>#oj");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("upBVZj~k", "upBVZj~k");
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$Id");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "String must not be empty", attributes0);
      element0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("{[r1|U[9q{z_", "Rcdata");
      // Undeclared exception!
      try { 
        document0.selectFirst("{[r1|U[9q{z_");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '{[r1|U[9q{z_': unexpected token at '{[r1|U[9q{z_'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Element element0 = new Element("Nxn%@W/Gp");
      // Undeclared exception!
      try { 
        element0.select("*<I_Tl'}:0?{>?A*k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '*<I_Tl'}:0?{>?A*k': unexpected token at '<I_Tl'}:0?{>?A*k'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[^CNl,%^f}");
      CDataNode cDataNode0 = new CDataNode("t3.?Pct?@");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "t3.?Pct?@", attributes0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.removeClass("t3.?Pct?@");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("UTF-", "UTF-");
      document0.childNodes = null;
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("{Tvbw!%<JOru@Es");
      DataNode dataNode0 = new DataNode("'qgt[m-");
      dataNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell(")op<)/~<z-JEcz");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prependElement(" />");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not b} empty\"", "Tag name must not b} empty\"");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("Ax<iGiF+Z3Eo6");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("z^-bnHNf*92*Kp,:n");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a|kR:.xG${;S/$P", "a|kR:.xG${;S/$P");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlTail(charArrayWriter0, 2147483645, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hZ-N~k0Y,T`R}=(", "hZ-N~k0Y,T`R}=(");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 93, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      StringBuilder stringBuilder0 = new StringBuilder(1367);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder0, (-2422), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b$q", "b$q");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 60, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "1Y0sqe^O{h*", attributes0);
      StringWriter stringWriter0 = new StringWriter(4439);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(18);
      // Undeclared exception!
      formElement0.outerHtmlHead(mockPrintWriter0, 4439, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-528), document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "$");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringWriter0, 1442, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("z`\"HNf*92*Kp_n", "z`\"HNf*92*Kp_n");
      StringBuilder stringBuilder0 = new StringBuilder(1537);
      StringBuilder stringBuilder1 = stringBuilder0.append("lv^jy*yd|[~k7xb5o{&");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuilder1, (-187), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = Document.createShell("java.lang.string@0000000017");
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        document0.outerHtmlHead(pipedWriter0, 1343, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("^dbDo\"1=F[\"}<Uv", "^dbDo\"1=F[\"}<Uv");
      Comment comment0 = new Comment("java.lang.string@0000000061 tag name must non b} 9wgv>> _sd5 br");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not b} empty\"", "Tag name must not b} empty\"");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      document0.setParentNode(document0);
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-1), (-1));
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsNthLastOfType0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("9*jg");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = new Document("gQ|HN-t");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = new Document("meta");
      // Undeclared exception!
      try { 
        document0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("DCq");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("b>tftd4$#,)", "b>tftd4$#,)");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("v'Z*.4&c");
      nodeArray0[3] = (Node) cDataNode0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "Fp]B");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html("Fp]B");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      CDataNode cDataNode0 = new CDataNode("X*v/7<R!@^");
      cDataNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.html("html > head");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("fS5<m", "fS5<m");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html((MockPrintWriter) null);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "noQuirks");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("Gjc5K_G*ny\"jc", "Gjc5K_G*ny\"jc");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("GjXc5K_G*ny\"jc", "GjXc5K_G*ny\"jc");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("noQuirks");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(2147483645);
      document0.outputSettings(document_OutputSettings0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("form", "form");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      // Undeclared exception!
      try { 
        document1.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("basefont", "basefont");
      Comment comment0 = new Comment("basefont", "basefont");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "Children collection to be inserted must not be nu.");
      Element element0 = document0.appendElement("qb)6^Cv8#)%;qk$h");
      element0.siblingIndex = (-1886307841);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GjXc5K_G*ny\"jc", "Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf69f*ap,:1", "znnHNf69f*ap,:1");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$IsLastChild", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$IsLastChild");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "] m}r~\"K9~", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("GjXc5K_G*ny\"jc", "GjXc5K_G*ny\"jc");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("9@.&CliWQ !{(m#sL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 9@.&CliWQ !{(m#sL
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "/S+,'DSZoih=E^KMVI");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qk>/b", "qk>/b");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("KD0KK,xe3{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: KD0KK,xe3{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("]uz@ca", "]uz@ca");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("]uz@ca");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}q0icpZ0<FyM=", "}q0icpZ0<FyM=");
      CDataNode cDataNode0 = new CDataNode("*%8)&6bPkS#");
      cDataNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("5sM8{[@\"}c9P-tJ;'");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      Element element0 = document0.appendElement(" />");
      element0.siblingIndex = (-1239);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText(" />");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("X*", "X*");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Unexpected character '%s' in input state [%s]", false);
      xmlDeclaration0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("6A");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bq", "bq");
      Element element0 = document0.appendElement("bq");
      element0.siblingIndex = (-411);
      // Undeclared exception!
      try { 
        element0.getElementsContainingOwnText("\"sYF^mz*-*eJtp&.VV");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2g9B/M", "9*jg");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      TextNode textNode0 = new TextNode("eqY[ID", "q:q");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(62);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("l/^wlncT/4<_+jB#_WO", "l/^wlncT/4<_+jB#_WO");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("java.lang.string@0000000017");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("form", "form");
      document0.setSiblingIndex((-1952309756));
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsByClass("form");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "Fp]B");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("znnHNf9f*ap,:1", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "M(v");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("znnHNf9f*ap,:1", "M(v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: M(v
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.appendElement("znnHNf9f*ap,:1");
      element0.setSiblingIndex((-1153));
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("znnHNf9f*ap,:1", "ScriptDataEscaped");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("zHNf*92*Kp,n");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("zHNf*92*Kp,n", "zHNf*92*Kp,n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("RawtextEndTagName", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("AV");
      Element element0 = document0.prependElement("AV");
      element0.siblingIndex = (-231);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("m-<aV", "G`$y9R =7,N+recF3");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = new Document("basefont");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "I_KAa?Ujcp0F0%}n$W'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("a|kR:.xG${;S/$P", "a|kR:.xG${;S/$P");
      Element element0 = document0.appendElement("a|kR:.xG${;S/$P");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("Ptn", document0, "#document");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("a|kR:.xG${;S/$P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell(")op<)/~<z-JEcz");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf69f*ap,:1", "znnHNf69f*ap,:1");
      Element element0 = document0.head();
      element0.siblingIndex = (-3337);
      // Undeclared exception!
      try { 
        document0.getElementById("znnHNf69f*ap,:1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("'", "'");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("or.jsup.nodes.Element$NodeLis");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("zHNf*92*Kp,n");
      Element element0 = document0.body();
      element0.toggleClass("zHNf*92*Kp,n");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000052': unexpected token at '@0000000052'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[42", "}kq>tqfr");
      DocumentType documentType0 = new DocumentType("[42", "[42", "l7j w?*m", "l7j w?*m", "l7j w?*m");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")op<)/~<z-JEcz", ")op<)/~<z-JEcz");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("NY/ 6OZV*", "NY/ 6OZV*");
      // Undeclared exception!
      try { 
        document0.child(1691);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1691, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("GjXc5K_G*ny\"jc", "GjXc5K_G*ny\"jc");
      // Undeclared exception!
      try { 
        document0.child((-1432352094));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      Element element0 = new Element("&quot;");
      element0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnhnf*92*kp,:n", "znnhnf*92*kp,:n");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.before("a>");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("znHNf*92*Kp,n", "znHNf*92*Kp,n");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("o^?7W9|]YE`H.8", "'m}c+VXV)^");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "uMO.l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bq", "bq");
      Comment comment0 = new Comment("bq");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PBb_dxxG30Aj#W|V-#", "PBb_dxxG30Aj#W|V-#");
      Document document1 = (Document)document0.appendTo(document0);
      document1.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement("znnHNf*92*Kp,:n");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = new Document("z\"HNf*92*Kp_n");
      List<Node> list0 = Parser.parseXmlFragment("HaEumC[~a&@|9\tJ", "org.jsoup.select.Evaluator$TagEndsWith");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("embed");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "[KhkLKo(Do");
      // Undeclared exception!
      try { 
        document0.appendElement("F,=9m[~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.TextNode", "[CDATA[");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "?");
      CDataNode cDataNode0 = new CDataNode("?");
      Node node0 = cDataNode0.doClone(document0);
      document0.reparentChild(node0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?0QvGA5X>mFM;");
      FormElement formElement0 = new FormElement(tag0, "?0QvGA5X>mFM;", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf69f*ap,:1", "znnHNf69f*ap,:1");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.append("yoRn^! t70?-pGU(QY");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("=%ryq%1m_sohqc},l", "=%ryq%1m_sohqc},l");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{nt.z[Wly*z}3U", "value");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".&bp", ".&bp");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.after("canvas");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      Element element0 = new Element("&quot;");
      element0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.after("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      DataNode dataNode0 = DataNode.createFromEncoded("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.after(";0KrUi=");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":nth-child(%d)");
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      // Undeclared exception!
      try { 
        document0.html((MockPrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      Element element0 = document0.appendElement(" />");
      element0.html((StringWriter) null);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not b} empty\"", "Tag name must not b} empty\"");
      Element element0 = document0.toggleClass("Tag name must not b} empty\"");
      element0.addClass("+a37(U]<`Y");
      document0.hasClass("tag name must not b} empty\"");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf69f*ap,:1", "znnHNf69f*ap,:1");
      document0.hasClass("znnHNf69f*ap,:1");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(" />", "Children collection to be inserted must not be nu.");
      document0.toggleClass(" />");
      document0.hasClass("Children collection to be inserted must not be nu.");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GjXc5K_G*ny\"jc", "GjXc5K_G*ny\"jc");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("GjXc5K_G*ny\"jc");
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      document0.prepend("znnHNf9f*ap,:1");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("GjXc5K_G*ny\"jc", "GjXc5K_G*ny\"jc");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("zHNf*92*Kp,n");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("zNf*92*Kp,n");
      Element element0 = document0.body();
      element0.append("zNf*92*Kp,n");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "X*v/7<e!A^");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znNf*2*Kp,n", "znNf*2*Kp,n");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Element element0 = new Element("\"Mc");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      Element element0 = document0.empty();
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("h>", "h>");
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-1880230448));
      document0.is((Evaluator) evaluator_IndexGreaterThan0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Pattern pattern0 = Pattern.compile("q");
      document0.getElementsByAttributeValueMatching("q", pattern0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "X*v/7<e!A^");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not b} empty\"", "Tag name must not b} empty\"");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.title("form");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      document0.title("znnHNf*92*Kp,:n");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("'kq>tqfr", "c`5YNdqz=JE7m?6v=");
      document0.appendElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Element element0 = new Element("em");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(349);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlHead(charArrayWriter0, 349, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("basefont", "basefont");
      document0.tagName("basefont");
      document0.appendElement("basefont");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("InSelectInTable", "Ld4%:Y");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.appendElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell(")n%uBC)0=G<Q");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = new Document("+ntzn\"er.sb.G`.^");
      Element element0 = document0.toggleClass("+ntzn\"er.sb.G`.^");
      Element element1 = element0.addClass("+ntzn\"er.sb.G`.^");
      element1.toggleClass("+ntzn\"er.sb.G`.^");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("_^-@.B]", "_^-@.B]");
      Element element0 = document0.toggleClass("_^-@.B]");
      element0.addClass("_^-@.B]");
      document0.toggleClass("#root");
      document0.hasClass("_^-@.B]");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ca[*", "Ca[*");
      Element element0 = document0.toggleClass("a!}#DSoau[N");
      document0.addClass("                  ");
      element0.hasClass("#");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("+ntzn\"er.sb.a`.^", "+ntzn\"er.sb.a`.^");
      Element element0 = document0.toggleClass("+ntzn\"er.sb.a`.^");
      element0.addClass("+ntzn\"er.sb.a`.^");
      element0.hasClass("+ntzn\"er.sb.a`.^");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("+ntzn\"er.sb.a`.^", "+ntzn\"er.sb.a`.^");
      Element element0 = document0.toggleClass("+ntzn\"er.sb.a`.^");
      element0.hasClass("+ntzn\"er.sb.a`.^");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse(")p</~<z-JEcz", ")p</~<z-JEcz");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be nu.", "Children collection to be inserted must not be nu.");
      Element element0 = document0.appendElement("embed");
      element0.append("<html>\n <head></head>\n <body>\n  Children collection to be inserted must not be nu.\n </body>\n</html>\n<embed>");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      document0.reparentChild(document0);
      document0.getElementsContainingText("znHNf*92*Kp,n");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("a)*");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("'=kCWT&2v&IK", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("+_tg<xkPtc)84\"_");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "+_tg<xkPtc)84\"_", attributes0);
      formElement0.prependChild(cDataNode0);
      Pattern pattern0 = Pattern.compile("_%~a.0`FeB?p");
      formElement0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("a|kR:.xG${;S/$P");
      document0.title("a|kR:.xG${;S/$P");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("form", "form");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      DocumentType documentType0 = new DocumentType("'Z~`^)d", "'Z~`^)d", "ht", "fY!GN2");
      nodeArray0[5] = (Node) documentType0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("z^-bnHNf*92*Kp,:n", "z^-bnHNf*92*Kp,:n");
      document0.append("org.jsoup.select.Evaluator$IsNthLastOfType");
      document0.getElementsMatchingText(" />");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("( ", ".|YaM/Tp`0[");
      Element element0 = document0.append("a>");
      element0.getElementsContainingText(".|YaM/Tp`0[");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GjXc5K_G*ny\"jc", "Children collection to be inserted must not be null.");
      document0.appendElement("br");
      document0.getElementsContainingText("=s1\"p;i,XGE|'");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("em", "em");
      document0.appendElement("em");
      document0.getElementsContainingText("em");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.prepend("br");
      element0.getElementsContainingText("=%ryq%1m_sohqc},l");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Y1</3ka", "W'2QiaOD=6");
      document0.getElementsContainingText("W'2QiaOD=6");
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("a|kR:.xG${;S/$P", "a|kR:.xG${;S/$P");
      Element element0 = document0.appendElement("a>");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("c&xtzma?_x*n_]", "c&xtzma?_x*n_]");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      Element element0 = document0.appendElement(" />");
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(" />", element0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      document0.reparentChild(document0);
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("znHNf*92*Kp,n", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnhnf*92*kp,:n", "znnhnf*92*kp,:n");
      document0.previousElementSibling();
      assertEquals("znnhnf*92*kp,:n", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      Element element0 = document0.appendElement(" />");
      Element element1 = element0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals("</", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.nextElementSibling();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aqU({>(Stm>Ea", "");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = new Document("basefont");
      CDataNode cDataNode0 = new CDataNode("+38nhl3,e<s7");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("eutEm", "eutEm");
      Element element0 = document0.body();
      element0.after("z5hnf*92*kp,n");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(2)", string0);
      assertEquals("eutEm", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Document.createShell("zHNf*92*Kp,n");
      document0.toggleClass("zHNf*92*Kp,n");
      document0.cssSelector();
      assertEquals("zHNf*92*Kp,n", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "/S+,'DSZoih=E^KMVI");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren(1691, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "xM;I9Yh.yFH+]u0e");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2360), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Document.createShell("a|kR:.xG${;S/$P");
      Elements elements0 = document0.getElementsByAttributeValueMatching("a|kR:.xG${;S/$P", "");
      // Undeclared exception!
      try { 
        document0.insertChildren(1814, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("upBVZj~k", "upBVZj~k");
      Pattern pattern0 = Pattern.compile("upBVZj~k");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      List<Node> list0 = document0.ensureChildNodes();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) list0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("znnHNf9f*ap,:1", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Document.createShell("1fqL:6");
      DataNode dataNode0 = new DataNode("zHNf*92*Kp,n", "1fqL:6");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      document0.prepend("attributeDoubleValueCharsSorted");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse("a|kR:.xG${;S/$P", "a|kR:.xG${;S/$P");
      Element element0 = document0.prepend("=MNm");
      element0.child(0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("a|kR:.xG${;S/$P", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("? |yeur`|w", "? |yeur`|w");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1851638905));
      assertEquals(4, elements0.size());
      assertEquals("? |yeur`|w", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("basefont", "basefont");
      document0.selectFirst("basefont");
      assertEquals("basefont", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("      ", "      ");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("      ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = new Document("attributeValueUnquoted");
      // Undeclared exception!
      try { 
        document0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Element element0 = new Element("\"Mc");
      Elements elements0 = element0.getElementsByAttribute("\"Mc");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("{1:$}be~Wq[]", "q8jwPq9");
      document0.getElementsByAttributeValueNot(")", "K>6GX/l,8}B5ms");
      assertEquals("q8jwPq9", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parse("a|kR:.xG${;S/$P", "a|kR:.xG${;S/$P");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parse("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      Element element0 = document0.shallowClone();
      assertEquals("znHNf*92*Kp,n", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("allowfullscreen");
      Document document0 = parser0.parseInput((Reader) stringReader0, "allowfullscreen");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Document.createShell("zHNf*92*Kp,n");
      document0.getElementsByAttributeValueContaining("zHNf*92*Kp,n", "zHNf*92*Kp,n");
      assertEquals(1, document0.childNodeSize());
      assertEquals("zHNf*92*Kp,n", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("Tag name must not be empty.", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("em", "em");
      document0.is("em");
      assertEquals("em", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("GjXc5K_G*ny\"jc", "GjXc5K_G*ny\"jc");
      Element element0 = document0.val("GjXc5K_G*ny\"jc");
      String string0 = element0.val();
      assertEquals("GjXc5K_G*ny\"jc", element0.baseUri());
      assertEquals("GjXc5K_G*ny\"jc", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Document.createShell("zHNf*92*Kp,n");
      Elements elements0 = document0.getElementsByIndexEquals((-1016));
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("zHNf*92*Kp,n", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parse("znnHNf9f*ap,:1", "znnHNf9f*ap,:1");
      Elements elements0 = document0.getElementsByAttributeStarting("znnHNf9f*ap,:1");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1614078131), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Element element0 = new Element(",HPa!.=c#Q");
      Element element1 = element0.prependElement("?");
      assertTrue(element1.hasParent());
      
      Elements elements0 = element0.getElementsByIndexLessThan(3262);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Element element0 = new Element(",HPa!.=c#Q");
      Elements elements0 = element0.getElementsByIndexLessThan(3262);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("eutEm", "eutEm");
      // Undeclared exception!
      try { 
        document0.after("z5hnf*92*kp,n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      Elements elements0 = document0.getElementsMatchingOwnText("Tag name must not be empty.");
      assertEquals(1, elements0.size());
      assertEquals("Tag name must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = new Document("keygen");
      Element element0 = document0.prepend("");
      assertEquals("keygen", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Document.createShell("zHNf*92*Kp,n");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("zHNf*92*Kp,n", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("{[r1|U[9q{z_", "Rcdata");
      document0.getElementsByAttributeValueStarting("org.jsoup.nodes.Element$NodeList", "&4'7]");
      assertEquals("Rcdata", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Document.createShell("zNf*92*Kp,n");
      document0.getElementsByAttributeValue("zNf*92*Kp,n", "zNf*92*Kp,n");
      assertEquals(1, document0.childNodeSize());
      assertEquals("zNf*92*Kp,n", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("znnHNf*92*Kp,:n", "znnHNf*92*Kp,:n");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      document0.wholeText();
      assertEquals(" />", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Document.createShell("zHNf*92*Kp,n");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("      ", "      ");
      Elements elements0 = document0.getElementsContainingOwnText("lKcf}A%7%v%");
      assertEquals("      ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", " />");
      document0.dataset();
      assertEquals(" />", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("CmbDBsvua");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Element element0 = new Element(",HPa!.=c#Q");
      Element element1 = element0.prependText("faH<@%x0r`6E<U[^4Px");
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Document.createShell(")n%uBC)0=G<Q");
      Element element0 = document0.child(0);
      assertEquals(1, document0.childNodeSize());
      assertNotNull(element0);
      assertEquals(")n%uBC)0=G<Q", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parse("znHNf*92*Kp,n", "znHNf*92*Kp,n");
      document0.previousElementSiblings();
      assertEquals("znHNf*92*Kp,n", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")n%uBC)0=G<Q", ")n%uBC)0=G<Q");
      DataNode dataNode0 = DataNode.createFromEncoded(")n%uBC)0=G<Q", "1b0u2~T*\"_mY!XsG6T");
      document0.prependChild(dataNode0);
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not b} empty\"", "Tag name must not b} empty\"");
      document0.toggleClass("Tag name must not b} empty\"");
      boolean boolean0 = document0.hasClass("Tag name must not b} empty\"");
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
      assertEquals("Tag name must not b} empty\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aqU({>(Stm>Ea", "");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]G", "]G");
      // Undeclared exception!
      try { 
        document0.wrap("Insert position out of bounds.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Parser.parse("a|kR:.xG${;S/$P", "a|kR:.xG${;S/$P");
      document0.getElementById("a|kR:.xG${;S/$P");
  }
}
