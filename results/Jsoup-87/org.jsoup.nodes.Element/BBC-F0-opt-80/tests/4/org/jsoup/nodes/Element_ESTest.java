/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:14:09 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!", "!");
      Element element0 = document0.toggleClass("!");
      element0.toggleClass("M~TY1y&/m%/UX2{'a&");
      document0.hasClass("Unexpected character '%s' in input state [%s]");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[5];
      document0.setSiblingIndex((-1937));
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "head", attributes0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("k=YSG 4MxXE}~9");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      pseudoTextElement0.outerHtmlTail(mockPrintWriter0, 1075, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      File file0 = MockFile.createTempFile("=^F10Y<C?N/>P:Z8O", "k_");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockFileWriter0, 12, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell(")Bv`/");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("MDTC;}IR$)i/>Io>", "");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.wrap("B");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("I}<-;v%@*~[h$~M", "I}<-;v%@*~[h$~M");
      Element element0 = document0.head();
      element0.wrap("I}<-;v%@*~[h$~M");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8^F10Y<C?N/P:Z8b", "8^F10Y<C?N/P:Z8b");
      Element element0 = document0.body();
      element0.wrap("8^F10Y<C?N/P:Z8b");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.val("~4DQAMj{");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("rervrsed");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("rervrsed");
      FormElement formElement0 = new FormElement(tag0, "rervrsed", attributes0);
      formElement0.setSiblingIndex((-10400458));
      formElement0.val("rervrsed");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<CN/>P:Z8O", "=^F10Y<CN/>P:Z8O");
      Element element0 = document0.head();
      element0.val("=^F10Y<CN/>P:Z8O");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.val("href");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("sF", "sF");
      document0.siblingIndex = (-2745);
      document0.toggleClass("sF");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".$AY6b5:y6", ".$AY6b5:y6");
      Element element0 = document0.body();
      element0.toggleClass("@W}2+%93QC12f");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = new Document("HQ!VP");
      document0.toggleClass("HQ!VP");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8^F10Y<C?N/P:Z8b", "8^F10Y<C?N/P:Z8b");
      Element element0 = document0.body();
      element0.text("e*td\"f{,8l{? p,!o");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8^F10Y<C?N/P:Z8b", "8^F10Y<C?N/P:Z8b");
      document0.text("e*td\"f{,8l{? p,!o");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("MDTC;}IR$)i/>Io>", "");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.tagName("roFj06a>vvi/X");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.tagName("head");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.tagName("roFj06a>vvi/X");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#v}a&[w");
      CDataNode cDataNode0 = new CDataNode("#v}a&[w");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "#v}a&[w", attributes0);
      element0.tagName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("mark", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, ":Q PDTf@jT|'D4Z~G!", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse("=^10Y<CN/P:Z8", "=^10Y<CN/P:Z8");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      document0.selectFirst("RcdataLessthanSign");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      document0.selectFirst("head");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.select("Q|7");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".$AY6b5:y6", ".$AY6b5:y6");
      document0.select("body");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.removeClass("=^F10Y<C?N/>P:Z8O");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>0:Z8O", "=^F10Y<C?N/>0:Z8O");
      Element element0 = document0.body();
      element0.after((Node) document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<CN/>P:Z8O", "G/Pq^U9(");
      Element element0 = document0.body();
      element0.prependText("OwT8c0C'4&1/H`)Q-ma");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = new Document("5");
      document0.prependText("5");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("H]VA3h8$3-");
      document0.setSiblingIndex((-4297));
      document0.prepend("H]VA3h8$3-");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("\u0007*$J_<qfJ", "sF");
      Element element0 = document0.body();
      element0.prepend("Must supply an even number of key value pairs");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("reversed");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("reversed");
      FormElement formElement0 = new FormElement(tag0, "reversed", attributes0);
      formElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("RcdataLessthanSign", "c?n");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.prependChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = Parser.parse("<$i+5hOyu?d_qx6{", "");
      document0.prependChild(document1);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("g");
      document0.parentNode = (Node) document0;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Qooq)F", "html");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "            ");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<CN/>P:Z8O", "=^F10Y<CN/>P:Z8O");
      Element element0 = document0.head();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      element0.is((Evaluator) evaluator_IsOnlyOfType0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("reversed");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("reversed", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "reversed", attributes0);
      formElement0.is("reversed");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell(";:'`");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("C%(J@Sa7{Tz)", "/[#'", false);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) xmlDeclaration0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Tag tag0 = Tag.valueOf("!%b;Q&3x");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ".", attributes0);
      Elements elements0 = formElement0.elements();
      formElement0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "            ");
      Element element0 = document0.head();
      element0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("href");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "head", attributes0);
      pseudoTextElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<CN/>P:Zp8O", "=^F10Y<CN/>P:Zp8O");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("value", "I}<-;v%@*~[h$~M");
      Pattern pattern0 = Pattern.compile("value");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Pattern pattern0 = Pattern.compile("fTHJ}7=RJw4G#NlHD");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Pattern pattern0 = Pattern.compile("", (-1800));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2J+~g`", "{0H #>M4'+");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.getElementsByTag("=^LF10Y<C?N/>P:Z8O");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      document0.getElementsByTag("body");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(?Z({V5T}", "(?Z({V5T}");
      document0.getElementsByIndexLessThan(172);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.getElementsByIndexGreaterThan((-1759));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<CN/>P:Z8O", "=^F10Y<CN/>P:Z8O");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("j", "j");
      Element element0 = document0.toggleClass("j");
      element0.addClass("j");
      document0.getElementsByClass("j");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2J+~g`", "{0H #>M4'+");
      document0.getElementsByAttributeValueNot("org.jsoup.nodes.Entities$EscapeMode", "#root");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.getElementsByAttributeValueContaining("<html>\n <head></head>\n <body>\n  =^LF10Y\n  <c?n />P:Z8O\n </body>\n</html>", "=^LF10Y<C?N/>P:Z8O");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(" ^D10Y(h8<CN/>P:Z8O", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(" ^D10Y(h8<CN/>P:Z8O");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put(" ^D10Y(h8<CN/>P:Z8O", " ^D10Y(h8<CN/>P:Z8O");
      FormElement formElement0 = new FormElement(tag0, " ^D10Y(h8<CN/>P:Z8O", attributes1);
      formElement0.getElementsByAttributeStarting(" ^D10Y(h8<CN/>P:Z8O");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("body", "body");
      FormElement formElement0 = new FormElement(tag0, "body", attributes0);
      formElement0.getElementsByAttribute("body");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.siblingIndex = 1289;
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      document0.setSiblingIndex((-1882));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("", "p*i~Ng\"b");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("MDTC;}IR$)i/>Io>", "");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("u@*}feKmV", "u@*}feKmV");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("#bl}0'x%!_*`w |", "#bl}0'x%!_*`w |");
      document0.addClass("#bl}0'x%!_*`w |");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<C?N/>0:Z8O", "=^F10Y<C?N/>0:Z8O");
      document0.toggleClass("=^F10Y<C?N/>0:Z8O");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("</", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "SLYXu", attributes0);
      pseudoTextElement0.children();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("VLr");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("defk[lt", "defk[lt");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("REMOVE", "7uQvSfQ)R");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.before((Node) document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("defk[lt");
      Element element0 = document0.appendElement("<html>\n <head></head>\n <body></body>\n</html>");
      element0.before("defk[lt");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<C?N/>0:Z8O", "=^F10Y<C?N/>0:Z8O");
      Element element0 = document0.body();
      element0.before("B");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("@XC.", "@XC.");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#v}a&[w");
      CDataNode cDataNode0 = new CDataNode("#v}a&[w");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "#v}a&[w", attributes0);
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.attr("=^F10Y<C?N/>P:Z8O", true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.attr("Children collection to be inserted must not be null.", false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";f98>`G4%B");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.attr("4wbXQNp@R~'~L", false);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Element element0 = new Element("{0H #>M4'+");
      Element element1 = element0.append("$D{^'L!gJ>:");
      element1.attr(":^sm~Z?", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.attr("=^F10Y<C?N/>P:Z8O", "");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.attr("~*'y1o$u0vAd}.du", "AfterAfterBody");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("value", "I}<-;v%@*~[h$~M");
      document0.attr("value", "I}<-;v%@*~[h$~M");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("C{:'pRr", "C{:'pRr");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, "C{:'pRr");
      document0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^/o", "^/o");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8^F10Y<C?N/P:Z8b", "8^F10Y<C?N/P:Z8b");
      Element element0 = document0.body();
      element0.appendText("8^F10Y<C?N/P:Z8b");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.appendElement("noframes");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      Element element0 = document0.prependElement("id");
      document0.setSiblingIndex((-1882));
      document0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("default", "            ");
      document0.setSiblingIndex(1113);
      document0.append("            ");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("I}<-;v%@*~[h$~M", "I}<-;v%@*~[h$~M");
      Element element0 = document0.head();
      element0.append("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Element element0 = new Element("=^F10Y<C?N/>P:Z8O");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = new Document(":Q PDTf@jT|'D4Z~G!");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      Document document2 = new Document(":Q PDTf@jT|'D4Z~G!");
      document0.after((Node) document2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "({t hv]t-");
      Element element0 = document0.head();
      element0.after("WM'Wnx>Mn^W6J< ");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ^D10Y(h8<CN/>P:Z8O", "~?sv6(u]#jh+mjm(Dn");
      Document document1 = document0.clone();
      document0.appendTo(document1);
      document0.after(" ^D10Y(h8<CN/>P:Z8O");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<CN/>P:Z8O", "=^F10Y<CN/>P:Z8O");
      document0.setSiblingIndex((-633));
      document0.addClass("=^F10Y<CN/>P:Z8O");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.addClass("uIrGqH0TxUr");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Element element0 = new Element("{0H #>M4'+");
      element0.addClass("2J+~g`");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("\"zg");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.wrap("e:0w=n6!N");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2J+~g`", "{0H #>M4'+");
      // Undeclared exception!
      try { 
        document0.wrap("org.jsoup.nodes.Entities$EscapeMode");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("5");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document1;
      // Undeclared exception!
      document1.val("textarea");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.keys = null;
      Tag tag0 = Tag.valueOf("rervrsed");
      FormElement formElement0 = new FormElement(tag0, "rervrsed", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val("rervrsed");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("noscript");
      Attributes attributes0 = cDataNode0.attributes();
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      Tag tag0 = Tag.valueOf("noscript");
      FormElement formElement0 = new FormElement(tag0, "mark", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val("mark");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("noscript");
      Attributes attributes0 = cDataNode0.attributes();
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("mark", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "~tT7?7H", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".$AY6b5:y6", ".$AY6b5:y6");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("&#xa0;");
      // Undeclared exception!
      try { 
        document0.text("V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<CN/>P:Z8O", "=^F10Y<CN/>P:Z8O");
      Element element0 = document0.body();
      element0.after((Node) document0);
      // Undeclared exception!
      document0.tagName("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse(".", ".");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.selectFirst("{");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '{': unexpected token at '{'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WbnM}LQp", "]`5DKVb-");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".$AY6b5:y6", ".$AY6b5:y6");
      // Undeclared exception!
      try { 
        document0.select(".$AY6b5:y6");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", ":ImmediateParent%s");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("RcdataLessthanSign", "c?n");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("v<>O");
      DataNode dataNode0 = DataNode.createFromEncoded("w5*NArPD/1w:", "{hiM");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell(";:'`");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      element0.after((Node) document0);
      // Undeclared exception!
      element0.prependElement("%0Kf*wKr:e,Q)pL#*,d");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".Gt?dV?Yg$G/95", ".Gt?dV?Yg$G/95");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("Jm");
      FormElement formElement0 = new FormElement(tag0, "mark", attributes0);
      CDataNode cDataNode0 = new CDataNode("Jm");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$NodeList");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "oA72\"Cd", attributes0);
      // Undeclared exception!
      try { 
        formElement0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = new Document("5");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document1;
      // Undeclared exception!
      document1.prepend("\"");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      DataNode dataNode0 = new DataNode("4SsEm0O3aDP,'go5o", "=^F10Y<C?N/>P:Z8O");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.prepend("=^F10Y<C?N/>P:Z8O");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v<2NFuSi;,b&", "YvK^QaH>U");
      MockPrintStream mockPrintStream0 = new MockPrintStream("{0h #>m4'+");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1024);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 1024, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^o", "^o");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "^o");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, (-637), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("g", "cn");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 416, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<CN/>P:Z8O", "=^F10Y<CN/>P:Z8O");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 21, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Zb<~Y/sti,J\u0002jQ<Ay");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0, charsetEncoder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-1123), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-dw[0~|u", "-dw[0~|u");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Insert position out of bounds.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2031);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintStream0, 58, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("TBB'", parseSettings0);
      Element element0 = new Element(tag0, "TBB'");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "TBB'");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(charBuffer0, (byte) (-94), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ^D10Y(8<CN/>tZ8O", " ^D10Y(8<CN/>tZ8O");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 634, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document document0 = Parser.parseBodyFragmentRelaxed("I}<-;v%@*~[h$~M", "I}<-;v%@*~[h$~M");
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charArrayWriter0, 713, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j", "j");
      MockFile mockFile0 = new MockFile("org.jsoup.nodes.Element");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-849), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Element element0 = new Element("E+*wY'p");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        element0.outerHtmlHead(pipedWriter0, 298, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "HQ!VP", attributes0);
      // Undeclared exception!
      try { 
        formElement0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("@!%bQ&31x");
      TextNode textNode0 = TextNode.createFromEncoded(";q7mAL/VQlP(*e(", ";q7mAL/VQlP(*e(");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";", ";");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("MDTC;}IR$)i/>Io>", "");
      // Undeclared exception!
      try { 
        document0.is("MDTC;}IR$)i/>Io>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'MDTC;}IR$)i/>Io>': unexpected token at ';}IR$)i/>Io>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = new Document("Wg");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.is("br");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Evaluator$AttributeStarting");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", false);
      nodeArray0[2] = (Node) xmlDeclaration0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("MDTC;}IR$)i/>Io>", "k");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qK(d-tq#Be*", "br");
      Element element0 = document0.body();
      element0.after((Node) document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      element0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "head");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+j T84dvB;U0pM\"hoSh", "-6,Ohvfn");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SBmROdD;3*/zr[?TnP", "SBmROdD;3*/zr[?TnP");
      // Undeclared exception!
      try { 
        document0.html((BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      element1.html();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ^D10Y(8<CN/>tZ8O", " ^D10Y(8<CN/>tZ8O");
      CDataNode cDataNode0 = new CDataNode("P%f6)d3Y~A89`~}:_v");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("o#%", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.childNodes = null;
      // Undeclared exception!
      try { 
        formElement0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("HQ!VP");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ^D0Y(h8<CN/>P:Z8O", " ^D0Y(h8<CN/>P:Z8O");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("body", false);
      document0.parentNode = (Node) xmlDeclaration0;
      Pattern pattern0 = Pattern.compile("T?o5xcm?-@", 12);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y", "y");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell(";:'`");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("uZH{/&WcBi}?P ng{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: uZH{/&WcBi}?P ng{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("G>NP{LE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: G>NP{LE
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<CN/>P:Z8O", "=^F10Y<CN/>P:Z8O");
      CDataNode cDataNode0 = new CDataNode("=^F10Y<CN/>P:Z8O");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("=^F10Y<CN/>P:Z8O");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("rervrsed", "rervrsed");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("java.lang.string@0000000073 j qr'+*k5>`*g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = new Document("5");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      List<Node> list0 = document1.childNodesCopy();
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(3729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell(")Bv`/");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell(")Bv`/");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("gK3", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ^F10Y(8<CN/>P:Z8O", " ^F10Y(8<CN/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot(" ^F10Y(8<CN/>P:Z8O", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("body");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "YbwLMcsRVEw4b-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("=^LF10Y<C?N/>P:Z8O", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", "YNy[g53-SII{<{;o#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: YNy[g53-SII{<{;o#
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nx-=y_{53hN6rc2k6", "nx-=y_{53hN6rc2k6");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", ",n)bs<E*(|P{~4v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Evaluator$AttributeStarting");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("$u~K:'ptaAp S@p", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell(";:'`");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell(";:'`");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("defk[lt");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Element element0 = new Element("+],n,Z[0|}Hu0p){]");
      DocumentType documentType0 = new DocumentType("+],n,Z[0|}Hu0p){]", "?sO?z\"D'PxgrD0c", "br");
      Element element1 = element0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell(")Bv`/");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.child(1288);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1288, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ^F10Y<CN/>P:Z8O", " ^F10Y<CN/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.child((-2140));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Tag tag0 = Tag.valueOf("]]>");
      CDataNode cDataNode0 = new CDataNode("]]>");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "]]>", attributes0);
      formElement0.reparentChild(formElement0);
      // Undeclared exception!
      try { 
        formElement0.before((Node) formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<C?N/>0:Z8O", "=^F10Y<C?N/>0:Z8O");
      Element element0 = document0.body();
      element0.after((Node) document0);
      // Undeclared exception!
      document0.before("Myq/M!h!1E^9mV7xuwqo");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("'K6qI7rK}%I^f_z", "br");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "{U/L-G;)G}j<509[\"nI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = new Document("yg");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = new Document(" ^F10Y<CN/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<iN/>#:Z8O", "=^F10Y<iN/>#:Z8O");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.after((Node) document0);
      // Undeclared exception!
      document0.appendElement(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "body");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = new Document(":Q PDTf@jT|'D4Z~G!");
      CDataNode cDataNode0 = new CDataNode("}");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<CN/>P:Z8O", "=^F10Y<CN/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<C?N/>0:Z8O", "=^F10Y<C?N/>0:Z8O");
      Element element0 = document0.body();
      element0.after((Node) document0);
      // Undeclared exception!
      document0.append("=^F10Y<C?N/>0:Z8O");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("default", "            ");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      try { 
        element0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("head", "@!%bQ&3x");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document1.after("@!%bQ&3x");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("@XC.", "@XC.");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "head", (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      document0.hasClass("j");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".$AY6b5:y6", ".$AY6b5:y6");
      document0.toggleClass("");
      document0.hasClass("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("title", "oH");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("|yAgsWO-3t^{dp-8", "9;npX&}o");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Element element0 = new Element("{0H #>M4'+");
      element0.appendElement("{0H #>M4'+");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("@XC.", "@XC.");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("@XC.", (Element) document1, "@XC.", parseErrorList0);
      document1.childNodes = list0;
      document1.hasText();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("MDTC;}IR$)i/>Io>", "");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>0:Z8O", "=^F10Y<C?N/>0:Z8O");
      Element element0 = document0.body();
      element0.after((Node) document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("IR<-v%@~[hZh$WM", "IR<-v%@~[hZh$WM");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.prependChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("Ve,7~hGkvfq22V8gJCJ", "m]Jp~Y%>O)*Ecjoa");
      Element element0 = document0.body();
      element0.html("q)onoZ9TIh");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.hasAttr("=^LF10Y<C?N/>P:Z8O");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("mark");
      FormElement formElement0 = new FormElement(tag0, "mark", attributes0);
      formElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<C?N/>0:Z8O", "=^F10Y<C?N/>0:Z8O");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = new Document(":Q PDTf@jT|'D4Z~G!");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = new Document("mup9/xi");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("", "p*i~Ng\"b");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.html("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ^D0Y(h8<CN/>P:Z8O", " ^D0Y(h8<CN/>P:Z8O");
      Pattern pattern0 = Pattern.compile("T?o5xcm?-@", 12);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<iN/>#:Z8O", "=^F10Y<iN/>#:Z8O");
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("Children collection to be inserted must not be null.");
      document0.is((Evaluator) evaluator_Attribute0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("D^n~ _3eIWo+qn", 2807);
      Document document0 = Parser.parseBodyFragment("head", "body");
      document0.getElementsByAttributeValueMatching("K#Q", pattern0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = new Document("KAe");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse("default", "            ");
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "rervrsed");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("=^10Y<CN/P:Z8", "=^10Y<CN/P:Z8");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("mark");
      FormElement formElement0 = new FormElement(tag0, "mark", attributes0);
      formElement0.prependElement("mark");
      formElement0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      document0.title("=^F10Y<C?N/>P:Z8O");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document document0 = Parser.parseBodyFragment(";f98>`G4%B", "B");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "%G", attributes0);
      formElement0.val("%G");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode(";A");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "do<lLh!V|3A", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j", "j");
      document0.toggleClass("j");
      Element element0 = document0.toggleClass("j");
      element0.toggleClass("j");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("j", "l");
      document0.toggleClass("j");
      document0.toggleClass("l");
      document0.hasClass("l");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("j", "j");
      Element element0 = document0.toggleClass("j");
      element0.toggleClass("");
      document0.hasClass("j");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j", "j");
      document0.toggleClass("j");
      Element element0 = document0.toggleClass("N");
      Element element1 = element0.toggleClass("@d)a5[.qj0agK");
      element1.hasClass("N");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      Element element0 = document0.toggleClass("j");
      Element element1 = document0.toggleClass("N");
      element0.toggleClass("qr'+* K5`*g");
      element1.hasClass("j");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      document0.toggleClass("");
      document0.toggleClass(" />");
      document0.hasClass("N");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("j", "j");
      Element element0 = document0.toggleClass("j");
      element0.toggleClass("M~TY1y&/m%/U2{'a&");
      document0.hasClass("Unexpected character '%s' in input state [%s]");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.toggleClass("=^F10Y<C?N/>P:Z8O");
      element0.getElementsByClass("ScriptDataDoubleEscapedLessthanSign");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      document0.toggleClass("");
      document0.hasClass("N");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("I}<-;v%@*~[h$~M", "I}<-;v%@*~[h$~M");
      CDataNode cDataNode0 = new CDataNode("head");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<C?N/>0:Z8O", "=^F10Y<C?N/>0:Z8O");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = new Document("Wg");
      document0.parentNode = (Node) document0;
      Element.preserveWhitespace(document0.parentNode);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>0:Z8O", "=^F10Y<C?N/>0:Z8O");
      Element element0 = document0.body();
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      Element element1 = element0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
      Element element2 = element0.after((Node) document0);
      List<Node> list0 = element1.childNodesCopy();
      element2.childNodes = list0;
      // Undeclared exception!
      try { 
        element2.getElementsMatchingOwnText("=^F10Y<C?N/>0:Z8O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("reversed");
      Document document0 = Parser.parseBodyFragment("'", "#root");
      Element element0 = document0.body();
      element0.after((Node) cDataNode0);
      document0.getElementsMatchingOwnText("reversed");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("HQ!VP", "HQ!VP");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n <head>\n  <title>org.jsoup.nodes.Element</title>\n </head>\n <body>\n  =^F10Y\n  <cn />P:Z8O\n </body>\n</html>", "#root");
      document0.getElementsMatchingText("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<CN/>P:Z8O", "qt{H:");
      document0.append("</}RA3D]@Uv7HsgE\"}");
      document0.getElementsMatchingText(" />");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      document0.getElementById("=^F10Y<C?N/>P:Z8O");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>0:Z8O", "=^F10Y<C?N/>0:Z8O");
      Element element0 = document0.body();
      element0.after((Node) document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ";", attributes0);
      formElement0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("=^LF10Y<C?N/>P:Z8O", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("", "tr.dHPjt*G&ti%r@gY");
      document0.nextElementSibling();
      assertEquals("tr.dHPjt*G&ti%r@gY", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = new Document("Wg");
      document0.parentNode = (Node) document0;
      document0.nextElementSiblings();
      assertEquals("Wg", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("SBmROdD;3*/zr[?TnP", "SBmROdD;3*/zr[?TnP");
      document0.siblingElements();
      assertEquals("SBmROdD;3*/zr[?TnP", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:DZ8O", "=^F10Y<C?N/>P:DZ8O");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals("=^F10Y<C?N/>P:DZ8O", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("SBmROdD;3*/zr[?TnP", "SBmROdD;3*/zr[?TnP");
      Element element0 = document0.head();
      element0.before("SBmROdD;3*/zr[?TnP");
      String string0 = element0.cssSelector();
      assertEquals("SBmROdD;3*/zr[?TnP", element0.baseUri());
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".$AY6b5:y6", ".$AY6b5:y6");
      document0.toggleClass(")S");
      document0.cssSelector();
      assertEquals(".$AY6b5:y6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(1288, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("j^Rha`a\"93", "j^Rha`a\"93");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2692), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(1834, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = new Document("VLr");
      Elements elements0 = document0.getElementsMatchingOwnText("VLr");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1436010313), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("defk[lt", "defk[lt");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
      
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) list0);
      assertEquals("defk[lt", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals(2, list0.size());
      assertEquals("=^LF10Y<C?N/>P:Z8O", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = new Document("href");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1561);
      assertEquals(0, elements0.size());
      assertEquals("href", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Pattern syntax error: ");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("rervrsed");
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes0);
      Element element0 = formElement0.selectFirst("rervrsed");
      assertEquals("Pattern syntax error: ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-dw[0~|u", "-dw[0~|u");
      document0.getAllElements();
      assertEquals("-dw[0~|u", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+j T84dvB;U0pM\"hoSh", "-6,Ohvfn");
      Element element0 = document0.removeClass("org.jsoup.select.StructuralEvaluator");
      assertEquals("-6,Ohvfn", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("SBmROdD;3*/zr[?TnP", "SBmROdD;3*/zr[?TnP");
      // Undeclared exception!
      try { 
        document0.before("SBmROdD;3*/zr[?TnP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^/o", "^/o");
      document0.getElementsByAttribute("^/o");
      assertEquals("^/o", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Document.createShell(" ^F1y0Y<CN/>P:Z(O");
      document0.getElementsByAttributeValueNot(" ", " ");
      assertEquals(" ^F1y0Y<CN/>P:Z(O", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("value", "value");
      Element element0 = document0.shallowClone();
      assertEquals("value", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("meta[name=charset]");
      Element element0 = document0.clone();
      assertEquals("meta[name=charset]", element0.baseUri());
      assertNotSame(element0, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse(";.cQ']Gtspo\"", "br");
      document0.doSetBaseUri(";.cQ']Gtspo\"");
      assertEquals(";.cQ']Gtspo\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("reversed");
      Document document0 = Parser.parseBodyFragment("'", "#root");
      // Undeclared exception!
      try { 
        document0.after((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("\"1-;TB07d)+Pyy7b{[", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell(" ^F1y0Y<CN/>P:Z(O");
      Elements elements0 = document0.getElementsContainingText("pHpd");
      assertEquals(" ^F1y0Y<CN/>P:Z(O", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<C?N/>0:Z8O", "=^F10Y<C?N/>0:Z8O");
      document0.getElementsByAttributeValueEnding("B", "B");
      assertEquals("=^F10Y<C?N/>0:Z8O", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = new Document("Wg");
      document0.is("br");
      assertEquals("Wg", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!", "!");
      document0.getElementsByAttributeValueMatching("!", "zLEs");
      assertEquals("!", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<CN/>P:Z8O", "qt{H:");
      Elements elements0 = document0.getElementsByIndexEquals((-2930));
      assertEquals("qt{H:", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(" ^D10Y(h8<CN/>P:Z8O", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(" ^D10Y(h8<CN/>P:Z8O");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, " ^D10Y(h8<CN/>P:Z8O", attributes0);
      formElement0.getElementsByAttributeStarting(" ^D10Y(h8<CN/>P:Z8O");
      assertEquals(" ^D10Y(h8<CN/>P:Z8O", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("=^LF10Y<C?N/>P:Z8O", "=^LF10Y<C?N/>P:Z8O");
      Elements elements0 = document0.getElementsByIndexLessThan((-2823));
      assertEquals("=^LF10Y<C?N/>P:Z8O", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ^D10Y(h8<CN/>P:Z8O", "~?sv6(u]#jh+mjm(Dn");
      // Undeclared exception!
      try { 
        document0.after(" ^D10Y(h8<CN/>P:Z8O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("SBmROdD;3*/zr[?TnP", "SBmROdD;3*/zr[?TnP");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("SBmROdD;3*/zr[?TnP", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      document0.getElementsByAttributeValueStarting("j", "j");
      assertEquals("j", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Document.createShell("cD'?e! R");
      document0.getElementsByAttributeValue("cD'?e! R", "frame");
      assertEquals("cD'?e! R", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = new Document("<bb@");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = new Document("Wg");
      document0.wholeText();
      assertEquals("Wg", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Element element0 = new Element("{0H #>M4'+");
      Element element1 = element0.appendElement("{0H #>M4'+");
      Element element2 = element1.lastElementSibling();
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("9O<$&<?#M", "=^F10Y<I'N/>P:Z8O");
      Elements elements0 = document0.getElementsContainingOwnText("value");
      assertEquals("=^F10Y<I'N/>P:Z8O", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Document.createShell(")Bv`/");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals(")Bv`/", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Document.createShell(" ^F1y0Y<CN/>P:Z(O");
      document0.title(" ^F1y0Y<CN/>P:Z(O");
      Elements elements0 = document0.getElementsContainingText("pHpd");
      assertTrue(elements0.isEmpty());
      assertEquals(" ^F1y0Y<CN/>P:Z(O", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ^F10Y<CN/>P:Z8O", " ^F10Y<CN/>P:Z8O");
      Element element0 = document0.child(0);
      assertEquals(" ^F10Y<CN/>P:Z8O", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("=^F10Y<C?N/>P:Z8O", "=^F10Y<C?N/>P:Z8O");
      document0.previousElementSiblings();
      assertEquals("=^F10Y<C?N/>P:Z8O", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = new Document("5");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document1;
      document0.firstElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8^F10Y<C?N/P:Z8b", "8^F10Y<C?N/P:Z8b");
      document0.appendText("e*td\"f{,8l{? p,!o");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parse("NL#+4_", "NL#+4_");
      Elements elements0 = document0.children();
      assertEquals(1, elements0.size());
      assertEquals("NL#+4_", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse(";.cQ']Gtspo\"", "br");
      document0.id();
  }
}
