/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:29:41 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Tag.valueOf("org.jsoup.nodes.Element");
      Attributes attributes1 = attributes0.put("br", true);
      FormElement formElement0 = new FormElement(tag0, "br", attributes1);
      formElement0.childNodeSize();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (float) 0);
      attributes0.get("java.lang.string@0000000039 $us)zr");
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, 1020.24781228);
      StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(1952);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      formElement0.outerHtmlTail(stringBuilder3, 1952, document_OutputSettings2);
      formElement0.classNames();
      TextNode textNode0 = TextNode.createFromEncoded("(4-3^/>YVW$2.wTR");
      // Undeclared exception!
      try { 
        formElement0.before((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z;[RWs{iL", "Z;[RWs{iL");
      Element element0 = document0.body();
      int int0 = (-351);
      element0.setSiblingIndex((-351));
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "sup", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("sup", "id");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      document0.selectFirst("id");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("A5bkqC)FyD-", "A5bkqC)FyD-");
      Element element0 = document0.head();
      element0.after("A5bkqC)FyD-");
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "wWZ4~vZ`hOI";
      Document document0 = Parser.parseBodyFragment("v1356d F}2", "id");
      Element element0 = document0.body();
      element0.appendChild(document0);
      File file0 = MockFile.createTempFile("4k&V0Z}-].a2%qE-3", "java.lang.string@0000000131");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "id", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("id", "id");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.val("id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Parser parser1 = parser0.settings(parseSettings0);
      String string0 = ">";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte)32;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = parser1.parseInput(">", ">");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.val("");
      element0.val();
      String string0 = Node.EmptyString;
      document0.appendChild(element0);
      Element element1 = document0.empty();
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueContaining("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseSettings parseSettings1 = ParseSettings.htmlDefault;
      Tag.valueOf("java.lang.string@0000000039 $us)zr", parseSettings1);
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "java.lang.string@0000000047", attributes0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Parser.parseBodyFragment("cY6wO", "id");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) element0;
      DocumentType documentType0 = new DocumentType("cY6wO", "java.lang.string@0000000039 $us)zr", "textarea");
      nodeArray0[1] = (Node) documentType0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      Element element1 = new Element("textarea");
      nodeArray0[5] = (Node) element1;
      nodeArray0[6] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      element1.val("br");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k+K^9EM ~`", "k+K^9EM ~`");
      document0.siblingIndex = (-735);
      document0.data();
      document0.val("VI,PsE[7SgT))*K");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "k+K^9EM ~`";
      Document document0 = Parser.parseBodyFragment("k+K^9EM ~`", "k+K^9EM ~`");
      document0.data();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 62, document_OutputSettings2);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m", "m");
      Element element0 = document0.toggleClass(" />");
      Elements elements0 = document0.getElementsByClass("m");
      element0.html();
      element0.appendChild(document0);
      element0.insertChildren(1, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("checkbox");
      Element element0 = document0.createElement("checkbox");
      Element element1 = element0.val("org.jsoup.select.Evaluator$IsLastOfType");
      Element element2 = element1.appendElement("])p");
      element0.val();
      document0.empty();
      document0.getElementsByTag("org.jsoup.select.Evaluator$IsLastOfType");
      element2.after("iS0@ ");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("TZ;H[s{eL", "TZ;H[s{eL");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document1.addChildren(nodeArray0);
      document1.text();
      document1.cssSelector();
      document1.child(1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("TZ;H[s{eL", "TZ;H[s{eL");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.getElementsContainingOwnText("TZ;H[s{eL");
      document1.addChildren(nodeArray0);
      document1.text();
      document0.cssSelector();
      document0.after("");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("$u)}r");
      document0.toggleClass("$u)}r");
      document0.toggleClass(":not(selector) subselect must not be empty");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      document0.hasClass("java.lang.string@0000000015");
      document1.val(":not(selector) subselect must not be empty");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k+K^9EM ~`", "k+K^9EM ~`");
      Element element0 = document0.head();
      element0.append("k+K^9EM ~`");
      Elements elements0 = element0.nextElementSiblings();
      document0.getElementsByClass("k+K^9EM ~`");
      // Undeclared exception!
      try { 
        document0.insertChildren((-160), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LE[TC|vucz#'VoE", "LE[TC|vucz#'VoE");
      document0.ownText();
      Element element0 = document0.html("LE[TC|vucz#'VoE");
      document0.id();
      document0.getElementsContainingText("");
      document0.nodeName();
      document0.getElementsByAttributeValueContaining("Fwrg(U", "noembed");
      element0.data();
      EvoSuiteFile evoSuiteFile0 = null;
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      try { 
        document0.outerHtmlHead(pipedWriter0, 79, document_OutputSettings2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("$uS)Zr");
      Document document1 = (Document)document0.toggleClass("$uS)Zr");
      Document document2 = (Document)document0.toggleClass(":not(selector) subselect must not be empty");
      document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document2.getElementsByClass("java.lang.string@0000000039");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document2;
      document1.addChildren(nodeArray0);
      document2.ownText();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 1004);
      // Undeclared exception!
      document1.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.head();
      document0.parentNode = (Node) element0;
      document0.dataNodes();
      document0.cssSelector();
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("$uS)Zr");
      document0.toggleClass("$uS)Zr");
      Document document1 = Parser.parseBodyFragmentRelaxed("$uS)Zr", "scripudatadoubleescapeddash ");
      document1.reparentChild(document0);
      document1.previousElementSibling();
      document0.after("scripudatadoubleescapeddash ");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.childNodes = null;
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("checkbox");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      Element element0 = document1.createElement("checkbox");
      element0.selectFirst("checkbox");
      element0.val("org.jsoup.select.Evaluator$IsLastOfType");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[0];
      document1.addChildren(nodeArray0);
      document0.ownText();
      document0.tagName();
      document1.text();
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("");
      document0.is((Evaluator) evaluator_TagEndsWith0);
      Attributes attributes0 = new Attributes();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", "TZ;H[s{iL");
      Document document1 = Parser.parseBodyFragmentRelaxed("%I~ma|@Y|mbJ/tEF9c7", "TZ;H[s{iL");
      Element element0 = document1.head();
      document0.cssSelector();
      document1.shallowClone();
      document1.tagName("$%8BUx68e!j4a");
      element0.attr("TZ;H[s{iL", true);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;F[s&eL", "TZ;F[s&eL");
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Element element0 = new Element(tag0, "br", attributes0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[2];
      Document document1 = Parser.parseBodyFragment("cY6wO", "TZ;F[s&eL");
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      document0.previousElementSibling();
      document1.wrap("&AGl");
      element0.removeClass("v");
      document1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;F[s&eL", "TZ;F[s&eL");
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Element element0 = new Element(tag0, "br", attributes0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[2];
      Document document1 = Parser.parseBodyFragment("cY6wO", "TZ;F[s&eL");
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      document0.previousElementSibling();
      document1.wrap("&AGl");
      document1.prepend("cY6wO");
      // Undeclared exception!
      try { 
        document0.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell("TZ;H[s{eL");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Attributes$Dataset$EntrySet", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      document1.nextElementSiblings();
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Tag tag0 = Tag.valueOf("id");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      Element element0 = new Element(tag0, "sup", attributes1);
      Document document0 = Parser.parse(":v*-%c/w;", "sup");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      element0.html("h,*%1vhggE+Qd]44BU");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("", (String) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".]*@aDR,CwZlo$wN");
      Document document0 = Parser.parseBodyFragmentRelaxed(".]*@aDR,CwZlo$wN", "-'/q=:H_c/9\"GN<j676");
      Element element0 = document0.text(".]*@aDR,CwZlo$wN");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        element0.wholeText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      String string0 = Node.EmptyString;
      document1.ownText();
      document1.elementSiblingIndex();
      document1.doClone(document0);
      // Undeclared exception!
      try { 
        document1.getAllElements();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G>Wgll/", "g[2MvUr{3T");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document0.getElementsByTag("aMdv+ZzL2o7ie+#1u");
      Element element0 = document1.body();
      Element element1 = element0.removeClass("math");
      element0.wholeText();
      document1.previousElementSibling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.parents();
      element1.ensureChildNodes();
      Element element2 = element1.toggleClass("math");
      element2.hasClass("gmtg8#+gw&");
      element2.getElementsByAttributeStarting("aMdv+ZzL2o7ie+#1u");
      element2.getElementsMatchingOwnText("math");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", "org.jsoup.nodes.Element");
      document0.toggleClass("[/");
      document0.toggleClass("=rup2e8gmibth");
      document0.html();
      document0.tagName();
      document0.getElementsByClass("*qAS[HCV8C *'");
      document0.getElementsByTag("head");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{eL", "TZ;H[s{eL");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Element element0 = new Element(tag0, "br", attributes1);
      Parser.parse("TZ;H[s{eL", "textarea");
      Node[] nodeArray0 = new Node[2];
      Document document1 = Parser.parseBodyFragment("cY6O", "4Ma0()tAjQO");
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      document1.append(":containsData(%s)");
      element0.getElementsContainingText("i|W]Dk7O~S@==oqqj");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      String string0 = Node.EmptyString;
      document0.tagName();
      document0.text("org.jsoup.nodes.Entities$1");
      document1.firstElementSibling();
      // Undeclared exception!
      try { 
        document1.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("Unexpected character '%s' in input state [%s]", "java.lang.string@0000000078");
      Document document1 = Parser.parse("java.lang.string@0000000078", "Unexpected character '%s' in input state [%s]");
      document0.tagName("X~yQAF\"D /!iFkR@");
      Element element0 = document1.head();
      element0.addClass("java.lang.string@0000000078");
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "TZ;H[s{eL";
      Document document0 = Parser.parseBodyFragment("TZ;H[s{eL", "TZ;H[s{eL");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      String string1 = "4Ma0()tAjQO";
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Element element0 = new Element(tag0, "br", attributes1);
      CharBuffer charBuffer0 = CharBuffer.allocate(40);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("dfn", "dfn");
      document0.setSiblingIndex(62);
      document0.outerHtml();
      Element element0 = document0.attr("dfn", "<html>\n <head></head>\n <body>\n  dfn\n </body>\n</html>");
      document0.children();
      document0.getElementsByAttributeValue("dfn", "<html>\n <head></head>\n <body>\n  dfn\n </body>\n</html>");
      element0.baseUri();
      element0.getElementsByIndexEquals(143);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.createElement("TZ;H[s{iL");
      document0.parentNode = (Node) element0;
      Element element1 = element0.val("TZ;H[s{iL");
      document0.cssSelector();
      // Undeclared exception!
      try { 
        element1.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m", "m");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.reparentChild(document0);
      document0.previousElementSibling();
      // Undeclared exception!
      document0.is("m");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{eL", "TZ;H[s{eL");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Element element0 = new Element(tag0, "br", attributes1);
      Parser.parse("TZ;H[s{eL", "textarea");
      Node[] nodeArray0 = new Node[2];
      Document document1 = Parser.parseBodyFragment("cY6O", "4Ma0()tAjQO");
      parseSettings0.normalizeAttribute("TZ;H[s{eL");
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.text();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document1.nodeName();
      document0.tagName();
      document1.firstElementSibling();
      String string0 = Node.EmptyString;
      document0.addClass("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.createElement("TZ;H[s{iL");
      document0.parentNode = (Node) element0;
      Element element1 = element0.val("TZ;H[s{iL");
      document0.cssSelector();
      Node[] nodeArray0 = new Node[0];
      element1.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ytoDJwD~~,C/U1_+jy", "ytoDJwD~~,C/U1_+jy");
      document0.wholeText();
      Element element0 = document0.toggleClass("ytoDJwD~~,C/U1_+jy");
      document0.ensureChildNodes();
      document0.tagName("q");
      document0.setSiblingIndex((-107899681));
      Document document1 = (Document)document0.appendText("scripudatadoubleescapeddash");
      document1.shallowClone();
      document0.data();
      Document document2 = (Document)element0.removeClass("scripudatadoubleescapeddash");
      document2.removeClass("");
      document2.clone();
      element0.childNodeSize();
      document1.getElementsByTag("ytoDJwD~~,C/U1_+jy");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.createElement("TZ;H[s{iL");
      document0.parentNode = (Node) element0;
      element0.val("TZ;H[s{iL");
      // Undeclared exception!
      try { 
        document0.after("TZ;H[s{iL");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{eL", "TZ;H[s{eL");
      Document document1 = document0.normalise();
      Element element0 = document1.toggleClass("TZ;H[s{eL");
      Element element1 = document1.toggleClass(":not(selector) subselect must not be empty");
      String string0 = Node.EmptyString;
      document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document2.className();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document2.attr("");
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document1.clone();
      element1.getElementsByClass("java.lang.string@0000000039");
      PipedReader pipedReader0 = new PipedReader(58);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      element0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document1.nodeName();
      document0.tagName();
      Element element0 = document1.firstElementSibling();
      element0.empty();
      // Undeclared exception!
      try { 
        document1.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{eL", "TZ;H[s{eL");
      Document document1 = document0.normalise();
      Document document2 = (Document)document1.toggleClass("TZ;H[s{eL");
      Document document3 = Parser.parseBodyFragment("TZ;H[s{eL", "Object must not be null");
      Parser parser0 = Parser.xmlParser();
      Document document4 = document2.parser(parser0);
      document4.html();
      document3.prependChild(document0);
      document2.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{eL", "TZ;H[s{eL");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Element element0 = new Element(tag0, "br", attributes1);
      Parser.parse("TZ;H[s{eL", "textarea");
      Node[] nodeArray0 = new Node[2];
      Document document1 = Parser.parseBodyFragment("cY6O", "4Ma0()tAjQO");
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{eL", "TZ;H[s{eL");
      document0.createElement("VP)}E8(>");
      Element element0 = document0.head();
      element0.clone();
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.head();
      element0.html();
      element0.nextElementSiblings();
      document0.getElementsByIndexEquals(2020);
      // Undeclared exception!
      try { 
        element0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("T");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      document0.text();
      document0.dataNodes();
      document0.selectFirst("0");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      document0.previousSibling();
      Element element0 = document0.createElement("TZ;H[s{iL");
      document0.parentNode = (Node) element0;
      Element element1 = element0.val("TZ;H[s{iL");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 's{iL'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.reparentChild(document0);
      Element element0 = document0.head();
      element0.appendText("");
      element0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{eL", "TZ;H[s{eL");
      Document document1 = document0.normalise();
      document1.toggleClass("TZ;H[s{eL");
      document1.toggleClass(":not(selector) subselect must not be empty");
      String string0 = Node.EmptyString;
      Document document2 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document3 = document1.outputSettings(document_OutputSettings0);
      document2.getElementsByClass(")$VkCY k1\"KA");
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = new Document.OutputSettings();
      document_OutputSettings2.escapeMode(entities_EscapeMode0);
      document1.clone();
      document2.hasClass("head");
      document3.ownText();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8r");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("8r", true);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "8r", attributes1);
      pseudoTextElement0.nodeName();
      pseudoTextElement0.getAllElements();
      pseudoTextElement0.nodeName();
      attributes1.get("org.jsoup.nodes.Element$NodeList");
      pseudoTextElement0.dataNodes();
      pseudoTextElement0.data();
      pseudoTextElement0.nodeName();
      attributes0.remove("#root");
      pseudoTextElement0.childNodeSize();
      Element element0 = pseudoTextElement0.prependElement("tag name must not be empty.");
      pseudoTextElement0.getElementsByIndexEquals(0);
      attributes0.put("5Xzh#|nF2#82^34br}", "v_qg5'_QtSy~D");
      Pattern pattern0 = Pattern.compile("8r", 0);
      pattern0.matcher("8r");
      pseudoTextElement0.getElementsMatchingText(pattern0);
      element0.before("");
      pseudoTextElement0.getElementsByAttributeValueEnding("3RXx d/&)'S", "#root");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("m");
      Element element0 = document0.head();
      element0.nextElementSiblings();
      element0.prepend("m");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", ":matches(");
      Element element0 = document0.toggleClass(":matches(");
      document0.getElementsByClass("ScripUDataDoubleEscapedDash");
      element0.nextElementSiblings();
      // Undeclared exception!
      try { 
        element0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("m");
      Element element0 = document0.head();
      element0.nextElementSiblings();
      element0.select("m");
      element0.lastElementSibling();
      document0.getElementsByAttributeValueStarting("m", "org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("scriptdatadoubleescapeddash", "scriptdatadoubleescapeddash");
      document0.val();
      Element element0 = document0.appendElement("data");
      element0.wrap("'21(pS4_1O0");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.nextElementSiblings();
      Element.preserveWhitespace(document0);
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h[wE");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("t>$jA!Vx5!.", false);
      Attribute attribute0 = Attribute.createFromEncoded("~.", "VP)}E8(>");
      Attributes attributes2 = attributes1.put(attribute0);
      String string0 = "K8zIY9}7=";
      Attributes attributes3 = attributes2.put("VP)}E8(>", "K8zIY9}7=");
      FormElement formElement0 = new FormElement(tag0, "h[wE", attributes3);
      formElement0.nextElementSiblings();
      // Undeclared exception!
      try { 
        formElement0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell("m");
      document0.reparentChild(document0);
      document0.previousElementSibling();
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("~.");
      document0.siblingIndex = 67;
      Element element0 = document0.head();
      element0.nextElementSiblings();
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueEnding("~.", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.createElement("TZ;H[s{iL");
      element0.getElementsByIndexEquals((-3885));
      document0.parentNode = (Node) element0;
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", ":matches(");
      Document document1 = (Document)document0.toggleClass(":matches(");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) uS_ASCII0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(2031);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings5.indentAmount(58);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document1.hasClass("ScripUDataDoubleEscapedDash");
      document2.ownText();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[/");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes1);
      Document document0 = Parser.parse("D", "textarea");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      // Undeclared exception!
      document0.prepend(" />");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "}?Kyn!'*^=Qw6|-^Sm";
      String string1 = "rTDn&h7xen^r7";
      Document document0 = Parser.parse("}?Kyn!'*^=Qw6|-^Sm", "rTDn&h7xen^r7");
      Element element0 = document0.prependElement("rTDn&h7xen^r7");
      Element element1 = element0.nextElementSibling();
      element0.getElementsMatchingOwnText("}?Kyn!'*^=Qw6|-^Sm");
      element0.removeClass("rTDn&h7xen^r7");
      element0.remove();
      element0.setParentNode(document0);
      element1.siblingNodes();
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", ":matches(");
      document0.toggleClass("JOP");
      document0.getElementsByAttribute(".");
      document0.toggleClass("java.lang.string@0000000047 u7~\"1ix{\"");
      document0.getElementsByClass("ScriptDataDoubleEscapedDash");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("~.");
      Element element0 = document0.head();
      element0.val("~.");
      String string0 = Node.EmptyString;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      element0.attr("body", "[/");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("VAgoF|vwhgDW", "~.");
      Document document1 = document0.normalise();
      document1.toggleClass(" > ");
      document1.toggleClass(" > ");
      String string0 = Node.EmptyString;
      Document document2 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document3 = document1.outputSettings(document_OutputSettings0);
      document3.getElementsByClass("hxj;3");
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.prettyPrint(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings2.escapeMode(entities_EscapeMode0);
      document2.outputSettings(document_OutputSettings1);
      document1.hasClass("'{/k");
      document1.ownText();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("e$Jq", "e$Jq");
      Tag.valueOf("@X5't");
      String string0 = "-a";
      Attributes attributes0 = new Attributes();
      attributes0.put("-a", "!");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("@X5't", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("/<j<:}$F");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Parser parser2 = parser1.setTrackErrors(16);
      Document document1 = document0.parser(parser2);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.toggleClass("java.lang.string@0000000093");
      Parser.parseFragment("/<j<:}$F", (Element) document2, "LNZ.p=0>");
      document2.toggleClass("ecrs|4<^0");
      Document document3 = document1.clone();
      document1.getElementsByClass("ecrs|4<^0");
      document3.hasClass("ecrs|4<^0");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      // Undeclared exception!
      try { 
        document0.getElementsByClass("#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[sk(L", "TZ;H[sk(L");
      Element element0 = document0.createElement("VP)}E8(>");
      document0.parentNode = (Node) element0;
      Document document1 = new Document("VP)}E8(>");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      document0.toggleClass("dD)! :,RT\"d");
      document0.getElementsByAttribute("class");
      Document document1 = Document.createShell("dD)! :,RT\"d");
      document1.toggleClass("dD)! :,RT\"d");
      document0.getElementsByClass("class");
      document1.normalise();
      document0.reparentChild(document0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.toggleClass("TZ;H[s{iL");
      document0.toggleClass("ecrs|4<^0");
      element0.getElementsByClass("java.lang.string@0000000047");
      String string0 = Node.EmptyString;
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", "TZ;H[s{iL");
      document0.toggleClass("TZ;H[s{iL");
      Document document1 = (Document)document0.toggleClass("ecrs|4<^0");
      Document document2 = (Document)document0.toggleClass("ecrs|4<^0");
      document2.getElementsByAttribute("ecrs|4<^0");
      Document document3 = document0.normalise();
      document1.reparentChild(document3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("TZ;H[s{iL");
      String string0 = " > ";
      document0.toggleClass(" > ");
      document0.toggleClass(" > ");
      String string1 = Node.EmptyString;
      Document document1 = document0.clone();
      Document document2 = document1.clone();
      document2.getElementsByClass("~.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document1.outputSettings(document_OutputSettings1);
      // Undeclared exception!
      try { 
        document_OutputSettings1.indentAmount((-2706));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000115", "java.lang.string@0000000115");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Element element0 = document0.head();
      element0.prependChild(document0);
      element0.nextElementSiblings();
      Element element1 = element0.shallowClone();
      element0.prependChild(element1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.createElement("VP)}E8(>");
      document0.parentNode = (Node) element0;
      element0.val("TZ;H[s{iL");
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      Element element0 = document0.head();
      element0.wrap("ScriptDataDoubleEscapedDash");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("TZ;H[s{iL");
      Element element0 = document0.head();
      element0.nextElementSiblings();
      element0.toggleClass(":nth-last-child(");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "X%ZpgN|\"l";
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      parseSettings0.normalizeAttribute("[,S .MsQ");
      Tag tag0 = Tag.valueOf("X%ZpgN|\"l", parseSettings0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParseSettings parseSettings1 = new ParseSettings(false, true);
      Tag.valueOf("[,S .MsQ", parseSettings1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Element element0 = new Element(tag0, "[");
      element0.nextElementSibling();
      element0.clone();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "[,s .msq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("TZ;H[s{iL");
      Element element0 = document0.head();
      element0.nextElementSiblings();
      element0.select(":containsData(%s)");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("TZ;H[s{iL");
      Element element0 = document0.head();
      element0.nextElementSiblings();
      Element element1 = element0.html("TZ;H[s{iL");
      element1.prependElement(")`KQl.7L!J-H`4BJU/");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.head();
      element0.nextElementSiblings();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", "TZ;H[s{iL");
      Document document1 = (Document)document0.toggleClass("TZ;H[s{iL");
      Document document2 = (Document)document0.toggleClass("ecrs|4<^0");
      String string0 = Node.EmptyString;
      Document document3 = document0.clone();
      document1.getElementsByAttributeValueEnding("TZ;H[s{iL", "ecrs|4<^0");
      document0.getElementsByClass("TZ;H[s{iL");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document3;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document2;
      nodeArray0[6] = (Node) document3;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document2;
      document1.addChildren(nodeArray0);
      document2.ownText();
      document0.text("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      Element element0 = document1.previousElementSibling();
      element0.clone();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("#", "Ur");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "lG^;glc:O@3PLFx&$J9");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.ownerDocument();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document2;
      document1.addChildren(nodeArray0);
      String string1 = null;
      // Undeclared exception!
      try { 
        document2.after((Node) document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|]^a1nR-", "b%e^p`D");
      Document document1 = document0.clone();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document2 = document1.parser(parser1);
      Document document3 = (Document)document2.toggleClass("Bt:hBz%FFnb==H");
      document0.toggleClass("Bt:hBz%FFnb==H");
      String string0 = Node.EmptyString;
      document2.clone();
      document1.getElementsByClass("Bt:hBz%FFnb==H");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document2;
      Tag tag0 = Tag.valueOf("/,cP3>w<q 2![F1C(a");
      CDataNode cDataNode0 = new CDataNode("Bt:hBz%FFnb==H");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Ex>vUL\"yL:}hS", attributes0);
      FormElement formElement1 = formElement0.addElement(document1);
      nodeArray0[1] = (Node) formElement1;
      document3.addChildren(nodeArray0);
      Document document4 = Parser.parseBodyFragmentRelaxed("", "O]*OLg[s:E@0O|@");
      document4.ownText();
      // Undeclared exception!
      document2.before(".C^A");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|]^a1nR-", "b%e^p`D");
      Document document1 = document0.clone();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document2 = document1.parser(parser1);
      Element element0 = document2.toggleClass("Bt:hBz%FFnb==H");
      Element element1 = document0.toggleClass("Bt:hBz%FFnb==H");
      String string0 = Node.EmptyString;
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) document2;
      document0.addChildren(nodeArray0);
      document0.ownText();
      document2.id();
      // Undeclared exception!
      document0.prependElement("ScriptDataDoubleEscapedDash");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "L]-5&7";
      Document document0 = Parser.parseBodyFragmentRelaxed("IBJ#ZB", "L]-5&7");
      Element element0 = document0.head();
      String string1 = "tP/'9p\\~B)6q.6a__{4";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element1 = element0.appendElement("tP/'9p~B)6q.6a__{4");
      element1.before((Node) element0);
      String string2 = "TZ;H[s{iL";
      // Undeclared exception!
      try { 
        document0.after("TZ;H[s{iL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[/");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("[/", "D");
      Attributes attributes1 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes1);
      Document document0 = Parser.parse("D", "textarea");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      Element element1 = element0.prependChild(nodeArray0[0]);
      // Undeclared exception!
      try { 
        element1.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", ":matches(");
      document0.toggleClass(":matches(");
      String string0 = "ScriptDataDoubleEscapedDash";
      document0.toggleClass("ScriptDataDoubleEscapedDash");
      document0.tagName();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "ScriptDataDoubleEscapedDash");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(157);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder0, (-732), document_OutputSettings2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", "Mkw{T1");
      Document document1 = (Document)document0.toggleClass("Mkw{T1");
      document0.toggleClass("TZ;H[s{iL");
      String string0 = Node.EmptyString;
      Document document2 = document1.clone();
      document2.getElementsByClass("ecRS|4<^0");
      document1.hasClass("ecRS|4<^0");
      Document.createShell("8MSR\"YnAPIKNrK");
      document0.val("scriptdatadoubleescapeddash scriptdatadoubleescapeddash");
      StringBuffer stringBuffer0 = new StringBuffer();
      document1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("TZ;H[s{iL", "TZ;H[s{iL");
      document0.clone();
      Element element0 = document0.head();
      element0.nextElementSiblings();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b$s!t+z", "?GCT");
      document0.toggleClass("#root");
      Document document1 = new Document("b$s!t+z");
      document1.toggleClass("b$s!t+z");
      String string0 = Node.EmptyString;
      Document document2 = document0.clone();
      document2.getElementsByClass("Tag name must not be empty.");
      Document document3 = Parser.parse("#root", "org.jsoup.select.Elements");
      document3.hasClass("org.jsoup.select.combiningevaluator$and");
      Document.createShell("_zagQ-pqk~1`rqgLE");
      document2.val("TZ;H[s{iL");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset.defaultCharset();
      document2.val();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", ":matches(");
      document0.toggleClass(":matches(");
      document0.toggleClass("ScriptDataDoubleEscapedDash");
      document0.html();
      document0.tagName();
      document0.getElementsByClass("ScriptDataDoubleEscapedDash");
      Parser.parse("<html>\n <head></head>\n <body>\n  TZ;H[s{iL\n </body>\n</html>", "TZ;H[s{iL");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[/");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("[/", "D");
      Attributes attributes1 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes1);
      Document document0 = Parser.parse("D", "textarea");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      document0.nodeName();
      // Undeclared exception!
      element0.appendElement("");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Tag tag0 = Tag.valueOf("n-]c{*|?@A avR");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("#", "meta[charset]");
      Attributes attributes1 = new Attributes();
      Element element0 = new Element(tag0, "#", attributes0);
      Document document0 = Parser.parse("body", "38&}=+~toGwfg`xShBy");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document1.addChildren(nodeArray0);
      document0.ownText();
      document1.nodeName();
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(124);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IndexGreaterThan0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "TZ;H[s{iL";
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 65, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", "Mkw{T1");
      Document document1 = (Document)document0.toggleClass("Mkw{T1");
      Document document2 = (Document)document0.toggleClass("TZ;H[s{iL");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = Node.EmptyString;
      Document document3 = document1.clone();
      document3.getElementsByClass("_zagQ-pqk~1`rqgLE");
      document3.hasClass("{ByGes&n'.?u");
      Document document4 = document2.clone();
      Document document5 = (Document)document4.val("_zagQ-pqk~1`rqgLE");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset.defaultCharset();
      document5.val();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("uqLi", "j>RX,&s");
      Element element0 = document0.body();
      Element element1 = element0.appendTo(document0);
      element0.getElementsByIndexEquals((-2070787801));
      List<Node> list0 = element1.siblingNodes();
      element0.childNodes = list0;
      String string0 = "TZ;H[s{iL";
      // Undeclared exception!
      try { 
        element1.attr((String) null, "TZ;H[s{iL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6&I7~0b,U6SH&MT", "6&I7~0b,U6SH&MT");
      Element element0 = document0.toggleClass("6&I7~0b,U6SH&MT");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Node.EmptyString;
      document0.getElementsByClass("MarkupDeclarationOpen");
      element0.hasClass("[/");
      Document document1 = document0.clone();
      document1.setSiblingIndex(149);
      document1.toggleClass("");
      document1.val("MarkupDeclarationOpen");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.text("sortable");
      document0.reparentChild(element0);
      document0.previousElementSibling();
      document0.cssSelector();
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      Element element0 = document1.head();
      element0.tagName("formnovalidate");
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.toggleClass("TZ;H[s{iL");
      document0.html();
      element0.elementSiblingIndex();
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
      document0.tagName();
      document0.getElementsByClass("br");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TZ;H[s{iL", "TZ;H[s{iL");
      document0.toggleClass("TZ;H[s{iL");
      document0.toggleClass("3@");
      document0.html();
      document0.tagName();
      document0.getElementsByClass("3@");
      document0.val("3@");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.getElementsByIndexEquals(8249);
      document0.getElementsByClass("TZ;H[s{iL");
      document0.val("TZ;H[s{iL");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "[t!AKE0Fe8_DUShJi";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[t!AKE0Fe8_DUShJi");
      Element element0 = new Element("=rup2e8gmibth");
      element0.parentNode = null;
      element0.cssSelector();
      element0.nextSibling();
      element0.previousElementSiblings();
      element0.className();
      element0.getElementsContainingOwnText("n-]c{*|?@A avR");
      Element.preserveWhitespace((Node) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      element0.dataset();
      element0.getElementsContainingText("head");
      Element element1 = element0.attr("=rup2e8gmibth", true);
      element1.className();
      element1.html();
      element1.getElementsByAttributeValueNot("[t!AKE0Fe8_DUShJi", "[t!AKE0Fe8_DUShJi");
      // Undeclared exception!
      try { 
        element1.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      document0.text("");
      document0.html();
      document0.tagName();
      document0.getElementsByClass("TZ;H[s{iL");
      DataNode dataNode0 = new DataNode("TZ;H[s{iL", "Text");
      document0.prependChild(dataNode0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuilder0, (-2064888121), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6&I7~0b,U6SH&MT", "6&I7~0b,U6SH&MT");
      Element element0 = document0.toggleClass("6&I7~0b,U6SH&MT");
      element0.toggleClass("org.jsoup.select.combiningevaluator$and");
      document0.html();
      String string0 = Node.EmptyString;
      element0.getElementsByClass("&nbsp;");
      document0.hasClass("9q");
      Element element1 = element0.append("");
      element1.val("#");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("wY1*Ab'7UYz_J@+L", "-F\"`\"R4w77");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      document0.nodeName();
      document0.tagName();
      document0.firstElementSibling();
      Document document1 = Document.createShell("Pt[_LsL3EzB|c3B");
      document1.text();
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.HtmlTreeBuilderState$24");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("J@%'.", document0, "</");
      document0.childNodes = list0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Parser parser1 = parser0.setTrackErrors(36);
      Parser parser2 = parser1.settings((ParseSettings) null);
      Document document1 = document0.parser(parser2);
      Pattern pattern0 = Pattern.compile("#", (-2078));
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      document1.is((Evaluator) evaluator_MatchesOwn0);
      // Undeclared exception!
      try { 
        document1.text("org.jsoup.parser.HtmlTreeBuilderState$24");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.text("");
      document0.reparentChild(element0);
      element0.hasText();
      element0.tagName();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "TZ;H[s{iL";
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.text("br");
      document0.reparentChild(element0);
      document0.previousElementSibling();
      String string0 = Node.EmptyString;
      // Undeclared exception!
      document0.wrap("Could not parse nth-index '%s': unexpected format");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      Parser.parse("#", "#");
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Parser.htmlParser();
      Document document0 = new Document("wY1*Ab'7UYz_J@+L");
      Document document1 = (Document)document0.toggleClass("wY1*Ab'7UYz_J@+L");
      document0.getElementsByClass("wY1*Ab'7UYz_J@+L");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.outerHtmlTail(mockPrintStream0, 8364, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser.htmlParser();
      Document document0 = new Document(")");
      Element element0 = document0.toggleClass(")");
      element0.className();
      document0.siblingElements();
      document0.className();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Parser parser0 = Parser.htmlParser();
      String string0 = "w5r!R2\\'&c9/w/";
      Document document0 = parser0.parseInput("w5r!R2'&c9/w/", "w5r!R2'&c9/w/");
      document0.clearAttributes();
      Element element0 = document0.head();
      element0.tag();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y=}ShwekV@k)Ut");
      document0.getElementById("w5r!R2'&c9/w/");
      element0.elementSiblingIndex();
      // Undeclared exception!
      try { 
        document0.before("w5r!R2'&c9/w/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6&I7~0b,U6SH&MT", "6&I7~0b,U6SH&MT");
      Element element0 = document0.toggleClass("6&I7~0b,U6SH&MT");
      document0.html();
      String string0 = Node.EmptyString;
      element0.getElementsByClass("O51-`-d`R'L");
      document0.hasClass("O51-`-d`R'L");
      document0.append("value");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6&I7~0b,U6SH&MT", "6&I7~0b,U6SH&MT");
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("o,P#79. ~8Fo");
      Document document1 = parser0.parseInput((Reader) stringReader0, "e$`m&LL`Hzam|7{");
      document0.appendTo(document1);
      document0.data();
      document0.attr("'gxBwM", "6&I7~0b,U6SH&MT");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6&I7~0b,U6SH&MT", "6&I7~0b,U6SH&MT");
      Element element0 = document0.toggleClass("6&I7~0b,U6SH&MT");
      document0.toggleClass("textarea");
      element0.html();
      document0.tagName();
      document0.getElementsByClass("#root");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "TZ;H[s{iL";
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("TZ;H[s{iL", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[/");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("[/", "D");
      Attributes attributes1 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes1);
      Document document0 = Parser.parse("D", "textarea");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.append("+-J81Ryh");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&$uO/u?");
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.head();
      element0.text("&$uO/u?");
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6&I7~0b,U6SH&MT", "6&I7~0b,U6SH&MT");
      Element element0 = document0.toggleClass("6&I7~0b,U6SH&MT");
      document0.html();
      String string0 = Node.EmptyString;
      element0.getElementsByClass("O51-`-d`R'L");
      document0.hasClass("org.jsoup.select.Evaluator$AllElements");
      document0.append("value");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-397));
      Document document0 = parser1.parseInput("<!doctype", "wY1*Ab'7UYz_J@+L");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.hasText();
      document1.wholeText();
      document0.val("");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Parser.htmlParser();
      Document document0 = new Document("wY1*Ab'7UYz_J@+L");
      document0.toggleClass("wY1*Ab'7UYz_J@+L");
      document0.html();
      document0.tagName();
      document0.getElementsByClass("wY1*Ab'7UYz_J@+L");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("B$S!t+Z");
      Node[] nodeArray0 = new Node[1];
      Element element0 = document0.createElement("B$S!t+Z");
      nodeArray0[0] = (Node) element0;
      Element element1 = document0.insertChildren((-1), nodeArray0);
      element1.getElementsContainingText((String) null);
      element0.addClass("$");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Tag tag0 = Tag.valueOf("e6O}Yq(l");
      CDataNode cDataNode0 = new CDataNode(";$dSw:l1)t%");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ";$dSw:l1)t%", attributes0);
      int int0 = 2111;
      formElement0.getElementsByIndexGreaterThan(2111);
      String string0 = "RI-K\"HOiXqm)Ge";
      String string1 = null;
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueEnding((String) null, "b$s!t+z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mpo*P|LbJ`FM0WdS");
      Document document0 = Parser.parse("mpo*P|LbJ`FM0WdS", "mpo*P|LbJ`FM0WdS");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6&I7~0b,U6SH:MT", "P");
      Element element0 = document0.toggleClass("P");
      FileSystemHandling.shouldAllThrowIOExceptions();
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6&I7~0b,U6SH:MT", "P");
      Element element0 = document0.toggleClass("P");
      document0.tagName();
      element0.getElementsByClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TZ;H[s{iL", "TZ;H[s{iL");
      Element element0 = document0.head();
      element0.before("org.jsoup.nodes.Element$1");
      element0.nextElementSiblings();
      element0.prependText("ct:4}`Zcu(gF8BRupK");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6&I7~0b,U6SH:MT", "P");
      document0.addClass("textarea");
      document0.hasText();
      document0.tagName();
      document0.getElementsByClass("#root");
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("B$S!t+Z", "B$S!t+Z");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(true);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(outputStreamWriter0, (-3506), document_OutputSettings4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document1.nodeName();
      document0.tagName();
      // Undeclared exception!
      try { 
        document0.getElementById("#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[/");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("[/", "D");
      Attributes attributes1 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes1);
      Document document0 = Parser.parse("D", "textarea");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      Element.preserveWhitespace(element0);
      document0.tagName();
      document0.getElementsByClass("b$s!t+z");
      element0.childNodeSize();
      document0.getElementsContainingOwnText("+zu}'2e~q2qGT$N^C");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.nodeName();
      document1.tagName();
      Element element0 = document1.lastElementSibling();
      // Undeclared exception!
      element0.after("(ETF cDXi~ix\u0007");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.tagName();
      Element element0 = document0.lastElementSibling();
      element0.cssSelector();
      String string0 = Node.EmptyString;
      document0.doClone(nodeArray0[0]);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document1.nodeName();
      document0.tagName();
      document1.toggleClass("#root");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "#";
      Document document0 = Parser.parse("#", "#");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.ownText();
      Document document2 = Document.createShell("#");
      document2.html("");
      document1.id();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document1.classNames((Set<String>) linkedHashSet0);
      document1.getElementsContainingText("3$fX,f%.'Ii*!I^N5hg");
      document2.nodeName();
      Pattern pattern0 = Pattern.compile("class");
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("Q,U#+qNH", pattern0);
      document2.is((Evaluator) evaluator_AttributeWithValueMatching0);
      document2.tagName(" ul1");
      document0.getElementsByAttributeValueContaining("body", " ul1");
      document0.data();
      document2.nodelistChanged();
      // Undeclared exception!
      try { 
        document0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Parser.parse("[/", "[6~o3");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Document.createShell("B$S!t+Z");
      document0.createElement("RJF,o&Q4xkkCS\"Np#,");
      Node[] nodeArray0 = new Node[2];
      Document document1 = document0.clone();
      Element element0 = document1.body();
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
      element0.getElementsContainingText("B$S!t+Z");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[/");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("[/", "D");
      Attributes attributes1 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes1);
      Document document0 = Parser.parse("D", "textarea");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      Element element1 = element0.append("={\"x");
      element1.getElementsByIndexEquals(105);
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      document0.nodeName();
      document0.tagName();
      Element element2 = document0.nextElementSibling();
      document0.siblingElements();
      // Undeclared exception!
      try { 
        element2.child((-2814));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      Document document2 = document0.normalise();
      Element element0 = document2.createElement("html");
      element0.appendTo(document2);
      // Undeclared exception!
      try { 
        Parser.parse("#", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("B$S!t+Z", "B$S!t+Z");
      Locale locale0 = Locale.ITALY;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(3806, 3806);
      linkedHashSet0.add((String) null);
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "feyMr1$r\\oX_F";
      Document document0 = Document.createShell("feyMr1$roX_F");
      document0.siblingElements();
      Document document1 = Document.createShell("feyMr1$roX_F");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document1;
      // Undeclared exception!
      try { 
        document1.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Element element0 = document0.body();
      document0.prependChild(element0);
      document0.append("/");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.text();
      document0.getElementsByClass("#root");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", "^s+");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("S*JL", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("S*JL", "S*JL");
      Attributes attributes2 = attributes1.clone();
      FormElement formElement0 = new FormElement(tag0, "S*JL", attributes2);
      Document document0 = Parser.parseBodyFragment("S*JL", "S*JL");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.appendElement("#root");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document1;
      document1.val();
      Document document2 = Parser.parse("", "*M5e~K");
      Document document3 = (Document)document1.toggleClass("head");
      document3.reparentChild(nodeArray0[0]);
      document3.addClass("");
      document2.clone();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "N>Eru}9=crn!U^FtFIO";
      Document document0 = Document.createShell("N>Eru}9=crn!U^FtFIO");
      Document document1 = document0.ownerDocument();
      document1.getElementsByAttributeValueContaining("N>Eru}9=crn!U^FtFIO", "N>Eru}9=crn!U^FtFIO");
      Element element0 = document1.body();
      document1.removeAttr("QCFYC");
      element0.id();
      document1.getElementsMatchingText("");
      // Undeclared exception!
      try { 
        element0.insertChildren(1177, (Collection<? extends Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("B$S!t+Z", "B$S!t+Z");
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      document0.classNames(set0);
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("2c.Sy", "[/");
      Document document1 = document0.clone();
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueMatching("7U=7'!m~(GpdlOc_s", "[/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: [/
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#");
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.cssSelector();
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "body";
      Element element0 = new Element("body");
      String string1 = "#root";
      element0.val("#root");
      String string2 = "mark";
      element0.getElementById("</");
      element0.ownText();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("{p{K", "{p{K");
      Elements elements0 = document0.getElementsContainingText("{p{K");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "wY1*Ab'7UYz_J@+L";
      Document document0 = Parser.parseBodyFragmentRelaxed("wY1*Ab'7UYz_J@+L", "body");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("{p{K", "{p{K");
      document0.getElementsContainingText("{p{K");
      document0.data();
      document0.id();
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("feyMr1$roX_F");
      document0.siblingElements();
      document0.getAllElements();
      Document document1 = document0.clone();
      Element element0 = document1.addClass("org.jsoup.select.CombiningEvaluator$And");
      document1.tagName("feyMr1$roX_F");
      document0.reparentChild(document1);
      document0.html();
      element0.val("textarea");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document1.nodeName();
      String string0 = Node.EmptyString;
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining("BkfP`,B%+fa\"$`'", "7%aG4A/G{/in$uR7");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iYWCk%RD->JA7'%r.S", "iYWCk%RD->JA7'%r.S");
      Document document1 = document0.ownerDocument();
      document1.data();
      CDataNode cDataNode0 = new CDataNode("iYWCk%RD->JA7'%r.S");
      DocumentType documentType0 = new DocumentType("", "iYWCk%RD->JA7'%r.S", "", "");
      Comment comment0 = new Comment("iYWCk%RD->JA7'%r.S", "iYWCk%RD->JA7'%r.S");
      document1.appendChild(comment0);
      cDataNode0.nextSibling();
      Elements elements0 = document1.getElementsContainingText("iYWCk%RD->JA7'%r.S");
      String string0 = Node.EmptyString;
      // Undeclared exception!
      try { 
        document1.insertChildren(1112, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("H^", "H^");
      Document document1 = new Document("H^");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      document1.children();
      nodeArray0[4] = (Node) document1;
      // Undeclared exception!
      try { 
        document1.addChildren(nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("feyMr1$roX_F");
      document0.siblingElements();
      document0.data();
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.clearAttributes();
      Document document1 = (Document)document0.appendChild(node0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.getUnicodeLocaleKeys();
      Document document2 = document1.clone();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document2.classNames((Set<String>) linkedHashSet0);
      Document document3 = (Document)document0.appendTo(document1);
      document3.nextElementSibling();
      // Undeclared exception!
      try { 
        document3.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iYWCk%RD->JA7'%r.S", "iYWCk%RD->JA7'%r.S");
      Document document1 = document0.ownerDocument();
      document1.getAllElements();
      Document document2 = document1.clone();
      Element element0 = document2.addClass("org.jsoup.select.CombiningEvaluator$And");
      document1.tagName("</");
      document0.reparentChild(document2);
      Document document3 = Parser.parseBodyFragment("org.jsoup.select.combiningevaluator$and", "ZMkP\"].\".ITA.");
      document3.appendText("iYWCk%RD->JA7'%r.S");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("feyMr1$roX_F");
      document0.siblingElements();
      document0.data();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.clearAttributes();
      document0.appendChild(node0);
      cDataNode0.nextSibling();
      document0.getElementsContainingText("=rup2e8gmibth");
      String string0 = Node.EmptyString;
      Document document1 = document0.clone();
      document1.textNodes();
      document1.dataNodes();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AniP )Z7STWT]Wa", "AniP )Z7STWT]Wa");
      String string0 = "textarea";
      Document document1 = (Document)document0.text("textarea");
      document1.doClone(document0);
      document1.setBaseUri("AniP )Z7STWT]Wa");
      String string1 = "textarea";
      document0.prepend("textarea");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(8203);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 8203);
      document0.html(bufferedWriter0);
      String string2 = null;
      // Undeclared exception!
      try { 
        Pattern.compile((String) null, (-84));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "`T\\Gw=3-$=$bko?)A}";
      Document document0 = Parser.parse("`TGw=3-$=$bko?)A}", "`TGw=3-$=$bko?)A}");
      document0.parents();
      document0.attributes();
      // Undeclared exception!
      try { 
        Pattern.compile("`TGw=3-$=$bko?)A}", (-3450));
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 13
         // `TGw=3-$=$bko?)A}
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = new Document("(a/W");
      document0.id();
      document0.dataNodes();
      document0.textNodes();
      document0.siblingIndex = (-1653);
      document0.html((MockFileWriter) null);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document1.nodeName();
      document0.tagName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Document document1 = document0.clone();
      document1.cssSelector();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>(linkedHashSet0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("#root", "br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes1);
      linkedList0.add(formElement0);
      document2.insertChildren(1, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = new Document("c=GI_<z1$m(g");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(776);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document_OutputSettings1.encoder();
      document2.prependChild(document0);
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueNot("cV;X2MP", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "wY1*Ab'7UYz_J@+L";
      Document document0 = Parser.parseBodyFragment("wY1*Ab'7UYz_J@+L", "wY1*Ab'7UYz_J@+L");
      String string1 = "#root";
      document0.getElementsContainingText("#root");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "br";
      Document document0 = new Document("br");
      Pattern pattern0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = document0.ownerDocument();
      document0.getAllElements();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Document document2 = document1.clone();
      document2.addClass("[/");
      Element element0 = document1.tagName("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      Document document3 = element0.ownerDocument();
      document3.reparentChild(document1);
      document3.removeClass("");
      String string0 = Node.EmptyString;
      document2.siblingElements();
      document3.getElementsByIndexEquals((-1432352094));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.nodeName();
      // Undeclared exception!
      document1.tagName("-8^VW>Ega'`y[n!H");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Pattern.compile("r0jhXg08\"?");
      document0.getElementsByAttributeValueMatching("class", "textarea");
      Locale.getISOLanguages();
      document0.childNodesCopy();
      CDataNode cDataNode0 = new CDataNode("r0jhXg08\"?");
      cDataNode0.clearAttributes();
      document0.appendChild(cDataNode0);
      document0.attr(":nth-child(%d)", true);
      cDataNode0.nextSibling();
      String string0 = Node.EmptyString;
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren(52, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("(a/W");
      document0.id();
      Charset.defaultCharset();
      document0.textNodes();
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("(a/W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: (a/W
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("(a/W");
      document0.id();
      document0.dataNodes();
      document0.toggleClass("table");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("#", parseSettings0);
      Element element0 = new Element(tag0, "#");
      parseSettings0.normalizeAttribute("textarea");
      document1.getElementsByAttributeValueEnding("textarea", "Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document1.insertChildren((-2133), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("(a/W");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.ownerDocument();
      document1.getAllElements();
      Document document2 = new Document("#");
      Element element0 = document2.addClass("[/");
      document0.reparentChild(element0);
      String string0 = Node.EmptyString;
      element0.nodeName();
      element0.tagName();
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.hasClass("8}");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = new Document("");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.ownText();
      document0.nodeName();
      document1.tagName();
      Element element0 = document0.firstElementSibling();
      element0.text();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.ownerDocument();
      document1.getAllElements();
      Document document2 = document1.clone();
      document2.hasAttr("#");
      Element element0 = document2.addClass("[/");
      document0.reparentChild(element0);
      String string0 = Node.EmptyString;
      document1.html("");
      document1.siblingElements();
      document1.getElementsMatchingOwnText("");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[/");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("textarea", "D", attributes0);
      Attributes attributes1 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes1);
      Document document0 = Parser.parse("D", "textarea");
      attributes1.spliterator();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      // Undeclared exception!
      try { 
        document0.select("[/");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at '/'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document("iEXoz");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      Element element0 = document1.createElement("KNBHJ)8' ");
      element0.childNodes();
      element0.getElementsContainingOwnText("iEXoz");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Element element1 = element0.toggleClass("Tag name must not be empty.");
      Elements elements0 = document0.siblingElements();
      element1.baseUri();
      document1.baseUri();
      Pattern pattern0 = Pattern.compile("u!M wd[FCbZ:5]X,~n`", 1144);
      document0.getElementsMatchingText(pattern0);
      document1.prependText("iEXoz");
      // Undeclared exception!
      try { 
        document0.insertChildren(157, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.nodeName();
      document1.tagName();
      Element element0 = document1.lastElementSibling();
      element0.cssSelector();
      document0.getElementsContainingText("#document");
      Pattern pattern0 = Pattern.compile("#root", 3294);
      document0.getElementsMatchingOwnText(pattern0);
      document1.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document1.nodeName();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("[/", "#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("(a/W");
      document0.id();
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      document0.getElementById("[T|*xs=&O");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iYWCk%RD->JA7'%r.S", "iYWCk%RD->JA7'%r.S");
      Document document1 = document0.ownerDocument();
      document1.getAllElements();
      Document document2 = document1.clone();
      document2.addClass("org.jsoup.select.CombiningEvaluator$And");
      Element element0 = document1.tagName("</");
      element0.elementSiblingIndex();
      document0.reparentChild(document2);
      element0.clearAttributes();
      document2.val();
      document1.getElementsByAttributeValueStarting("Fyo7upt#@iwYilSb^^n", "NZ5{QI1cKMcZ5");
      // Undeclared exception!
      try { 
        document1.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("br");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.siblingElements();
      document0.parent();
      document0.doClone((Node) null);
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wY1*Ab'7UYz_J@+L", "wY1*Ab'7UYz_J@+L");
      document0.getElementsContainingText("#root");
      document0.nodeName();
      document0.setBaseUri("wY1*Ab'7UYz_J@+L");
      document0.getElementsByAttributeValueContaining("4GSL(PaYe+TChU", "#root");
      document0.data();
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      document0.getElementById("YMB6pF,K?!CM;#");
      document0.getElementsByClass("wY1*Ab'7UYz_J@+L");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wY1*Ab'7UYz_J@+L", "wY1*Ab'7UYz_J@+L");
      document0.getElementsContainingText("#root");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.nodeName();
      document0.tagName();
      document0.getElementsContainingText("sXK@JL=GoGX,S;Y0`");
      Pattern.compile("rurmoi;j'", 3294);
      Pattern pattern0 = Pattern.compile("sXK@JL=GoGX,S;Y0`");
      document0.getElementsMatchingOwnText(pattern0);
      document0.nextElementSiblings();
      document0.removeClass("y-<8D)L:K");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "</";
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IsLastOfType", "</");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      Element element0 = document1.body();
      int int0 = (-351);
      element0.html();
      parser0.setTrackErrors((-351));
      parser0.parseInput("9{Pr9", "9{Pr9");
      element0.className();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      element0.tagName();
      element0.hasText();
      element0.before("body");
      document0.tag();
      String string1 = "head";
      document0.prependElement("head");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "head", (-351), (-351));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.nodeName();
      document0.tagName();
      document0.getElementsContainingText("#");
      Pattern pattern0 = Pattern.compile("1`Yv{~Te EYnW+", 3294);
      document0.getElementsMatchingOwnText(pattern0);
      document1.nextElementSiblings();
      document1.baseUri();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document1.nodeName();
      document0.tagName();
      document0.siblingElements();
      Document document2 = Parser.parseBodyFragment("option[selected]", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document2.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.siblingElements();
      document0.data();
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      document0.is((Evaluator) evaluator_IsLastOfType0);
      CDataNode cDataNode0 = new CDataNode("[%s!=%s]");
      Node node0 = cDataNode0.clearAttributes();
      node0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      Elements elements0 = document0.getElementsByAttributeValueContaining("\"S; L$6xUjZG@Z|]|Xd", "7l$Mk-B::\".^9bZP");
      document0.hasText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      document0.tagName();
      document0.tagName();
      Document document1 = Parser.parse("}mO]AHk_Mz/", "va5FU2");
      document1.val("^");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Document document2 = Parser.parseBodyFragmentRelaxed("va5FU2", "va5FU2");
      document2.append("#root");
      document2.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.nodeName();
      document0.tagName();
      document0.getElementsContainingText("#");
      Pattern pattern0 = Pattern.compile("1`Yv{~Te EYnW+", 3294);
      document0.getElementsMatchingOwnText(pattern0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6&I7~0b,U6SH:MT", "P");
      Document document1 = (Document)document0.toggleClass("P");
      Charset charset0 = document1.charset();
      document0.charset(charset0);
      // Undeclared exception!
      try { 
        document1.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = new Document("");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.previousElementSibling();
      document1.nodeName();
      // Undeclared exception!
      document0.ownerDocument();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.nodeName();
      document0.tagName();
      document0.getElementsContainingText("#");
      Pattern pattern0 = Pattern.compile("1`Yv{~Te EYnW+", 3294);
      document0.getElementsMatchingOwnText(pattern0);
      document0.attr("#root", true);
      document1.attr("#document", false);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Pattern.compile("r0jhXg08\"?");
      document0.getElementsByAttributeValueMatching("head", "textarea");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("main", parseSettings0);
      Tag.valueOf("org.jsoup.nodes.Element", parseSettings0);
      Element element0 = new Element(tag0, "head");
      String string0 = "[/";
      parseSettings0.normalizeAttribute("[/");
      document0.getElementsByAttributeValueEnding(")!4./;.KFg8*CG", "org.jsoup.nodes.Element");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(52, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      document0.childNodesCopy();
      Document document2 = Parser.parseBodyFragmentRelaxed("YXh~>iSR#yH74l", "textarea");
      document2.textNodes();
      String string0 = Node.EmptyString;
      document1.isBlock();
      document1.text();
      document0.appendElement("YXh~>iSR#yH74l");
      // Undeclared exception!
      try { 
        document2.selectFirst("org.jsoup.nodes.Element$2");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Element$2': unexpected token at '$2'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.ownerDocument();
      document1.getAllElements();
      document0.getElementsByAttributeStarting("2FyKrB)AcWE.q^4DL");
      document0.siblingElements();
      // Undeclared exception!
      try { 
        document1.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      Elements elements0 = document0.getElementsByAttributeValueContaining("\"S; L$6xUjZG@Z|]|Xd", "7l$Mk-B::\".^9bZP");
      document0.hasText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      document0.tagName();
      document0.tagName();
      Document document1 = Parser.parse("}mO]AHk_Mz/", "va5FU2");
      document1.val("^");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Document document2 = Parser.parseBodyFragmentRelaxed("va5FU2", "va5FU2");
      document2.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.ownerDocument();
      document1.getAllElements();
      Document document2 = document1.clone();
      Element element0 = document2.addClass("[/");
      document0.reparentChild(element0);
      String string0 = Node.EmptyString;
      document1.html("");
      document1.siblingElements();
      document2.getElementsByIndexEquals((-87));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Parser.parse("#", "#");
      Document document0 = Document.createShell("#");
      Node[] nodeArray0 = new Node[2];
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("#", parseSettings0);
      Tag.valueOf("#", parseSettings0);
      Element element0 = new Element(tag0, "#");
      nodeArray0[0] = (Node) element0;
      parseSettings0.normalizeAttribute("#");
      nodeArray0[1] = (Node) document0;
      element0.getElementsByAttributeValueEnding("#root", "#root");
      // Undeclared exception!
      try { 
        document0.insertChildren(2765, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("k6?#_wtFQxQb^N2", "I^i*Cy(7l");
      Parser parser0 = Parser.htmlParser();
      Parser.parseBodyFragmentRelaxed("opr", "I^i*Cy(7l");
      document0.tagName("Buce9HBanG[");
      Document document1 = document0.parser(parser0);
      Document document2 = document1.clone();
      Element element0 = document2.toggleClass("I^i*Cy(7l");
      element0.children();
      document2.getElementsByIndexLessThan(102);
      element0.hasText();
      document1.getElementsByIndexEquals(102);
      element0.children();
      Parser.parse("opr", "NR#@zd>hUC)~");
      document0.clone();
      document2.parent();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
      String string0 = "ks/8XM&!zU&HDZ^:";
      Document.createShell("ks/8XM&!zU&HDZ^:");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("B$S!t+Z", "B$S!t+Z");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      Tag tag0 = Tag.valueOf("y-<8D)L:K");
      Tag.valueOf("y-<8D)L:K");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$2", attributes0);
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3v[6");
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element1 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element1.classNames((Set<String>) linkedHashSet0);
      document0.ownText();
      document0.nodeName();
      document0.appendText("head");
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.nodeName();
      document0.after(nodeArray0[0]);
      document0.getElementsByIndexEquals(523);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wY1*Ab'7UYz_J@+L", "wY1*Ab'7UYz_J@+L");
      document0.getElementsContainingText("#root");
      document0.nodeName();
      document0.getElementsByAttributeValueContaining("4GSL(PaYe+TChU", "#root");
      String string0 = Node.EmptyString;
      document0.nodelistChanged();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "#document");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      document0.ownText();
      document0.html("#");
      String string0 = Node.EmptyString;
      document0.nodeName();
      document0.wholeText();
      document0.isBlock();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.val((String) null);
      document1.appendElement("head");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      LinkedList<Comment> linkedList1 = new LinkedList<Comment>();
      document1.body();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      document0.ownText();
      Element element0 = document0.html("#");
      String string0 = Node.EmptyString;
      document0.nodeName();
      document0.wholeText();
      document0.isBlock();
      Document document1 = Parser.parseBodyFragmentRelaxed("", "#");
      document1.dataNodes();
      Elements elements0 = element0.getElementsByIndexLessThan(58);
      // Undeclared exception!
      try { 
        document1.insertChildren((-1826), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      document0.childNodesCopy();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.body();
      document1.ownText();
      document1.nodeName();
      document0.appendText("TlE.k.E7ZI'g@rD");
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Element element0 = new Element("big");
      Pattern pattern0 = Pattern.compile("big");
      Document document0 = new Document("html");
      document0.getElementsMatchingOwnText(pattern0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document0.quirksMode(document_QuirksMode0);
      document0.val("big");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[/");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("textarea", "D", attributes0);
      Attributes attributes1 = new Attributes();
      Element element0 = new Element(tag0, "textarea", attributes1);
      Document document0 = Parser.parse("D", "textarea");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      document0.nodeName();
      document0.tagName();
      Element element1 = document0.firstElementSibling();
      element0.text();
      element1.before(nodeArray0[2]);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Parser.parse("#", "#");
      Document document0 = Document.createShell("#");
      Node[] nodeArray0 = new Node[2];
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("#", parseSettings0);
      Element element0 = new Element(tag0, "#");
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(2765, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("B$S!t+Z", "B$S!t+Z");
      Document document1 = new Document("textarea");
      Pattern pattern0 = Pattern.compile("     ", 2839);
      document1.getElementsMatchingOwnText(pattern0);
      document1.hasAttributes();
      document1.classNames();
      document0.getElementsMatchingOwnText("     ");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("B$S!t+Z", "B$S!t+Z");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document document3 = Parser.parse("GEQ_?.O_!d5?Y", "B$S!t+Z");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      document3.addChildren(nodeArray0);
      document3.ownText();
      document2.nodeName();
      document2.tagName();
      document0.firstElementSibling();
      document0.text();
      document3.parents();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("evJTGrj>");
      pattern0.split((CharSequence) "InTableBody", 52);
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "S! 2G_9pcUp0A,G!m");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.childNodesCopy();
      document2.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$2", pattern0);
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Element$2");
      TextNode textNode1 = TextNode.createFromEncoded(" />", "org.jsoup.nodes.Element$2");
      document2.getElementsByAttributeValueMatching("r0jhXg08\"?", pattern0);
      Document document3 = document0.clone();
      textNode0.clearAttributes();
      document1.appendChild(document2);
      textNode1.nextSibling();
      document3.getElementsContainingText("S! 2G_9pcUp0A,G!m");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document3.outputSettings(document_OutputSettings0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = new Document("NQ:MQ$vqpg-lW");
      document0.ownText();
      Element element0 = document0.html("NQ:MQ$vqpg-lW");
      document0.id();
      element0.wholeText();
      element0.isBlock();
      document0.getAllElements();
      Pattern pattern0 = Pattern.compile("", 3294);
      document0.getElementsMatchingOwnText(pattern0);
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      document0.head();
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.nodeName();
      document0.tagName();
      document0.getElementsContainingText("#");
      // Undeclared exception!
      document1.val("d%@*mW4BI} c;i");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Pattern pattern0 = Pattern.compile("r0jhXg08\"?");
      document0.childNodesCopy();
      document0.getElementsByAttributeValueMatching("InTableBody", pattern0);
      TextNode textNode0 = TextNode.createFromEncoded("head");
      TextNode.createFromEncoded("action", "InTableBody");
      document0.getElementsByAttributeValueMatching(".i%$WHnT/?',", pattern0);
      Document document1 = document0.clone();
      textNode0.clearAttributes();
      Element element0 = document0.appendChild(textNode0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      textNode0.nextSibling();
      element0.getElementsContainingText("r0jhXg08\"?");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      document2.elementSiblingIndex();
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValue("action", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wY1*Ab'7UYz_J@+L", "wY1*Ab'7UYz_J@+L");
      document0.getElementsContainingText("#root");
      document0.nodeName();
      document0.getElementsByAttributeValueContaining("4GSL(PaYe+TChU", "#root");
      document0.data();
      document0.nodelistChanged();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      document0.is("#document");
      document0.toggleClass("JQAs)AiyAwPe");
      document0.attr("D", ";FB5:TmC");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("4%J-{<]VyH$$`", "O=^L+.7^Ik;%");
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Element element0 = new Element("big");
      Pattern pattern0 = Pattern.compile("big");
      Document document0 = new Document("html");
      document0.getElementsMatchingOwnText(pattern0);
      element0.hasAttributes();
      element0.classNames();
      document0.getElementsMatchingOwnText("html");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document1.nodeName();
      document0.tagName();
      document1.firstElementSibling();
      document1.val();
      // Undeclared exception!
      try { 
        document0.appendTo(document1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document0.title();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document0.doClone(nodeArray0[4]);
      document1.nodeName();
      document0.tagName();
      document1.firstElementSibling();
      // Undeclared exception!
      try { 
        document1.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "class";
      Tag tag0 = Tag.valueOf("class");
      CDataNode cDataNode0 = new CDataNode("class");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "class", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.previousElementSibling();
      document1.nodeName();
      document0.tagName();
      document0.getElementsContainingText("#");
      Pattern pattern0 = Pattern.compile("1`Yv{~Te EYnW+", 3294);
      document0.getElementsMatchingOwnText(pattern0);
      document1.appendText("1`Yv{~Te EYnW+");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = new Document("at;[ouQe7Q@^B SZPD");
      document0.ownText();
      document0.html("at;[ouQe7Q@^B SZPD");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document1.nodeName();
      document0.tagName();
      document1.firstElementSibling();
      // Undeclared exception!
      try { 
        document1.getElementsByIndexEquals((-203));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Element element0 = new Element("big");
      Document document0 = Document.createShell(" > ");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.previousElementSibling();
      document0.nodeName();
      document0.tagName();
      Document document1 = Parser.parseBodyFragment("[/", "[/");
      document1.getElementsContainingText("$L6oyQ/ HY/");
      // Undeclared exception!
      try { 
        Pattern.compile("1`Yv{~Te EYnW+", 3);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // 1`Yv{~Te EYnW+
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.siblingIndex = (-190231400);
      document1.ownText();
      document1.nodeName();
      document0.tagName();
      document1.firstElementSibling();
      // Undeclared exception!
      try { 
        document1.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "big";
      Element element0 = new Element("big");
      String string1 = "BeforeHead";
      Document document0 = Parser.parseBodyFragmentRelaxed("big", "br");
      String string2 = "W";
      document0.getElementsByClass("W");
      int int0 = (-1618280579);
      // Undeclared exception!
      try { 
        Pattern.compile((String) null, (-1618280579));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Tag tag0 = Tag.valueOf("</");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("</", "");
      Attributes attributes1 = attributes0.put(attribute0);
      Element element0 = new Element(tag0, "textarea", attributes1);
      Document document0 = Parser.parse("", "textarea");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      document0.nodeName();
      document0.tagName();
      document0.firstElementSibling();
      element0.text();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      document0.hasText();
      document1.textNodes();
      document1.wholeText();
      document1.isBlock();
      document0.getAllElements();
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode1);
      document2.val("");
      document0.nodelistChanged();
      // Undeclared exception!
      try { 
        document2.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = new Document("head");
      Pattern pattern0 = Pattern.compile("r0jhXg08\"?");
      document0.getElementsByClass("BeforeHead");
      pattern0.split((CharSequence) "r0jhXg08\"?", 52);
      document0.childNodesCopy();
      document0.getElementsByAttributeValueMatching("InTableBody", pattern0);
      TextNode textNode0 = TextNode.createFromEncoded("head");
      TextNode textNode1 = TextNode.createFromEncoded("action", "InTableBody");
      document0.getElementsByAttributeValueMatching(".i%$WHnT/?',", pattern0);
      Document document1 = document0.clone();
      Node node0 = textNode0.clearAttributes();
      Document document2 = (Document)document0.appendChild(textNode0);
      textNode0.nextSibling();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = node0;
      nodeArray0[3] = (Node) textNode1;
      nodeArray0[4] = (Node) textNode0;
      nodeArray0[5] = (Node) textNode0;
      document2.addChildren(nodeArray0);
      document0.ownText();
      document0.nodeName();
      document2.tagName();
      document2.firstElementSibling();
      document0.appendText("action");
      document1.removeClass("br");
      document1.getElementsByAttributeValueMatching("action", "BeforeHead");
      document1.getElementsByTag("InTableBody");
      StringWriter stringWriter0 = new StringWriter(52);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "r0jhXg08\"?");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.outerHtmlHead(stringWriter1, 2658, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      document0.hasText();
      document1.textNodes();
      document1.wholeText();
      document1.isBlock();
      document0.getAllElements();
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.limitedQuirks;
      document0.quirksMode(document_QuirksMode1);
      Document document2 = (Document)document0.val("textarea");
      document1.select("textarea");
      document2.nodelistChanged();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      // Undeclared exception!
      try { 
        document1.insertChildren((-6), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = new Document("big");
      Pattern.compile("big");
      Document document1 = new Document("hdex{");
      document0.getElementsByAttribute("big");
      document0.getElementsByIndexGreaterThan((-1625949436));
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = new Document("at;[ouQe7Q@^B SZPD");
      String string0 = Node.EmptyString;
      Document document1 = (Document)document0.html("at;[ouQe7Q@^B SZPD");
      document0.id();
      document0.nodeName();
      document1.wholeText();
      document1.isBlock();
      document0.getAllElements();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document1.quirksMode(document_QuirksMode0);
      document0.val("#document");
      document0.nodelistChanged();
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = new Document("at;[ouQe7Q@^B SZPD");
      document0.ownText();
      Document document1 = (Document)document0.html("at;[ouQe7Q@^B SZPD");
      document0.id();
      document1.wholeText();
      document1.isBlock();
      document0.getAllElements();
      Document document2 = (Document)document0.val("");
      document2.appendText("at;[ouQe7Q@^B SZPD");
      document1.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "#";
      Document document0 = Parser.parse("#", "#");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.ownText();
      Document document2 = Document.createShell("#");
      document2.html("");
      document1.id();
      document1.getElementsContainingText("3$fX,f%.'Ii*!I^N5hg");
      document2.nodeName();
      document0.getElementsByAttributeValueContaining("body", " ul1");
      document0.data();
      document2.nodelistChanged();
      // Undeclared exception!
      try { 
        document0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document0.previousElementSibling();
      document1.nodeName();
      document0.tagName();
      document0.getElementsContainingText("#");
      Pattern pattern0 = Pattern.compile("1`Yv{~Te EYnW+", 3294);
      document0.getElementsMatchingOwnText(pattern0);
      document1.nextElementSiblings();
      document0.val();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.nodeName();
      document0.tagName();
      document0.getElementsContainingText("#");
      String string0 = Node.EmptyString;
      // Undeclared exception!
      document1.html("o!DWbxs");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = new Document("head");
      Pattern pattern0 = Pattern.compile("r0jhXg08\"?");
      document0.getElementsByClass("BeforeHead");
      pattern0.split((CharSequence) "r0jhXg08\"?", 52);
      document0.getElementsByAttributeValueMatching("InTableBody", pattern0);
      TextNode textNode0 = TextNode.createFromEncoded("head");
      Node[] nodeArray0 = new Node[2];
      DocumentType documentType0 = new DocumentType("InTableBody", "r0jhXg08\"?", "r0jhXg08\"?", "BeforeHead", "r0jhXg08\"?");
      nodeArray0[0] = (Node) documentType0;
      nodeArray0[1] = (Node) textNode0;
      document0.addChildren(nodeArray0);
      document0.ownText();
      document0.nodeName();
      document0.tagName();
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("at;[ouQe7Q@^B SZPD");
      document0.ownText();
      Document document1 = (Document)document0.html("at;[ouQe7Q@^B SZPD");
      document0.id();
      document0.nodeName();
      document1.wholeText();
      document1.isBlock();
      Elements elements0 = document0.getAllElements();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document1.quirksMode(document_QuirksMode0);
      document0.val("#document");
      document0.nodelistChanged();
      // Undeclared exception!
      try { 
        document0.insertChildren((-6), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document0.getElementsContainingText("#");
      document0.getElementsContainingText((String) null);
      String string0 = Node.EmptyString;
      document0.html("Tag name must not be empty.");
      document1.addClass("textarea");
      document0.siblingElements();
      Document document2 = Parser.parse("html", "#");
      document2.getElementsByIndexEquals(1633);
      document1.getElementsByTag("~O|,0;$UW");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = new Document("head");
      Pattern.compile("r0jhXg08\"?");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f:M}P", "");
      document0.title("f:M}P");
      Document document1 = document0.clone();
      String string0 = "xo!9A'n!\\_<";
      document1.getElementsMatchingText("xo!9A'n!_<");
      document1.previousElementSibling();
      document1.addClass("xo!9A'n!_<");
      document1.elementSiblingIndex();
      document1.tag();
      // Undeclared exception!
      try { 
        document0.after("head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = " > ";
      String string1 = "\"fRg8K.h{r_R";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"fRg8K.h{r_R");
      Document document0 = parser0.parseInput(" > ", " > ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      parser0.parseFragmentInput("Nh#;8P?gYuah[fj", document0, "Nh#;8P?gYuah[fj");
      Element element0 = document0.createElement(" > ");
      Element element1 = element0.empty();
      element0.shallowClone();
      // Undeclared exception!
      try { 
        element1.before("Nh#;8P?gYuah[fj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      document0.childNodesCopy();
      document1.getAllElements();
      Document document2 = document1.clone();
      String string0 = "org.jsoup.select.CombiningEvaluator$And";
      document0.addClass("org.jsoup.select.CombiningEvaluator$And");
      Element element0 = document2.tagName("head");
      document0.reparentChild(element0);
      document1.html();
      document2.html("org.jsoup.select.CombiningEvaluator$And");
      int int0 = 60;
      StringBuilder stringBuilder0 = new StringBuilder(60);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(60, (CharSequence) "head", 60, 60);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 60
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = new Document("head");
      Pattern pattern0 = Pattern.compile("r0jhXg08\"?");
      document0.getElementsByClass("BeforeHead");
      pattern0.split((CharSequence) "r0jhXg08\"?", 52);
      document0.childNodesCopy();
      document0.getElementsByAttributeValueMatching("InTableBody", pattern0);
      TextNode textNode0 = TextNode.createFromEncoded("head");
      TextNode.createFromEncoded("action", "InTableBody");
      document0.getElementsByAttributeValueMatching(".i%$WHnT/?',", pattern0);
      Document document1 = document0.clone();
      textNode0.clearAttributes();
      Element element0 = document0.appendChild(textNode0);
      textNode0.nextSibling();
      element0.getElementsContainingText("r0jhXg08\"?");
      document0.getElementsContainingText("Tag name must not be empty.");
      String string0 = Node.EmptyString;
      Element element1 = element0.html("Q+)^Vr");
      element1.addClass("head");
      element0.siblingElements();
      document1.getElementsByIndexEquals(52);
      element1.attributes();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = new Document("head");
      MockFile mockFile0 = new MockFile("head");
      mockFile0.setWritable(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      MockFileWriter mockFileWriter1 = (MockFileWriter)document0.html((OutputStreamWriter) mockFileWriter0);
      document0.siblingElements();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter1);
      mockFileWriter1.getEncoding();
      document0.is("ASCII");
      document0.classNames();
      MockFile mockFile1 = new MockFile("body");
      Document document1 = document0.normalise();
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("br");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.siblingElements();
      document0.parent();
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      // Undeclared exception!
      try { 
        document1.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = new Document("head");
      MockFile mockFile0 = new MockFile("head");
      mockFile0.setWritable(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      Document document1 = Parser.parse("InTableBody", "}]Q&ss'!0+&2W;[R&\"");
      MockFileWriter mockFileWriter1 = (MockFileWriter)document1.html((OutputStreamWriter) mockFileWriter0);
      document0.siblingElements();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter1);
      mockFileWriter0.getEncoding();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.html((Appendable) mockFileWriter0);
      Document document2 = document0.normalise();
      document2.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = new Document("head");
      Pattern pattern0 = Pattern.compile("9");
      document0.getElementsByClass("r0jhXg08\"?");
      int int0 = 1810;
      pattern0.split((CharSequence) "BeforeHead", 1810);
      document0.childNodesCopy();
      document0.getElementsByAttributeValueMatching("BeforeHead", pattern0);
      TextNode textNode0 = TextNode.createFromEncoded("head");
      TextNode textNode1 = TextNode.createFromEncoded("r0jhXg08\"?", "action");
      document0.getElementsByAttributeValueMatching("3l[jA", pattern0);
      Document document1 = document0.clone();
      Node node0 = textNode0.clearAttributes();
      Element element0 = document0.appendChild(node0);
      textNode1.nextSibling();
      element0.getElementsContainingText("iyaX#Q/i|+");
      document0.getElementsContainingText((String) null);
      String string0 = Node.EmptyString;
      // Undeclared exception!
      try { 
        document1.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = new Document("head");
      MockFile mockFile0 = new MockFile("head");
      Document document1 = new Document("head");
      Element element0 = document0.toggleClass("+MX.y_>z)Cv");
      element0.previousElementSiblings();
      document0.getElementsByAttribute("PoVB!?^}RuWGK72e");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = new Document("T%N_Z&,sTO@vY>K9zL5");
      Document document1 = document0.normalise();
      document0.getElementsByAttributeValue("T%N_Z&,sTO@vY>K9zL5", ".-:");
      Element element0 = document1.prependElement("M*DcPWU*IoJjH");
      element0.dataNodes();
      element0.nextSibling();
      element0.textNodes();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("<1Z 7>%Z7E+*yI`", "<1Z 7>%Z7E+*yI`");
      document0.getElementsByAttributeStarting(" > ");
      document0.hasAttributes();
      // Undeclared exception!
      try { 
        document0.child((-1561));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.siblingElements();
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wY1*Ab'7UYz_J@+L", "wY1*Ab'7UYz_J@+L");
      document0.getElementsByAttributeValueContaining(":x/sf$", ":x/sf$");
      Document document1 = (Document)document0.appendText(":x/sf$");
      document1.nodelistChanged();
      document0.hasText();
      document0.tagName();
      document0.appendText("");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.ownText();
      document1.nodeName();
      document0.tagName();
      document1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("r`K`z", "r`K`z");
      document0.text();
      Document document1 = Parser.parseBodyFragment("r`K`z", "r`K`z");
      document1.doSetBaseUri("r`K`z");
      Element element0 = document1.text("<");
      element0.getElementsByAttributeValue("r`K`z", "#root");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "#root");
      Document document1 = document0.clone();
      document1.clearAttributes();
      document1.val();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = new Document("6&I7~0b,U6SH:MT");
      CDataNode cDataNode0 = new CDataNode(".");
      TextNode textNode0 = cDataNode0.text("P");
      document0.appendChild(textNode0);
      cDataNode0.nextSibling();
      document0.getElementsContainingText("6&I7~0b,U6SH:MT");
      document0.getElementsContainingText("6&I7~0b,U6SH:MT");
      document0.doSetBaseUri("P");
      document0.childNodesAsArray();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "P");
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1657), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1657
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LE[TC|vucz#'VoE", "LE[TC|vucz#'VoE");
      document0.clone();
      String string0 = "2S:'@";
      document0.getElementsByAttributeValueStarting("LE[TC|vucz#'VoE", "2S:'@");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2227, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "r`K`z";
      Document document0 = Parser.parse("r`K`z", "r`K`z");
      document0.text();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document1.before("r`K`z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Pattern pattern0 = Pattern.compile("r0jhXg08\"?");
      pattern0.split((CharSequence) "r0jhXg08\"?", 52);
      document0.childNodesCopy();
      document0.getElementsByAttributeValueMatching("InTableBody", pattern0);
      TextNode textNode0 = TextNode.createFromEncoded("head");
      TextNode textNode1 = TextNode.createFromEncoded("action", "InTableBody");
      document0.getElementsByAttributeValueMatching(".i%$WHnT/?',", pattern0);
      Document document1 = document0.clone();
      textNode1.clearAttributes();
      Document document2 = (Document)document0.appendChild(textNode0);
      textNode0.nextSibling();
      document2.getElementsContainingText("r0jhXg08\"?");
      Locale locale0 = new Locale("InTableBody", "Tag name must not be empty.", "0coTC4*')5PtJ`");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      document2.classNames(set0);
      document0.getElementsContainingText("Tag name must not be empty.");
      document2.doSetBaseUri("Tag name must not be empty.");
      document1.childNodesAsArray();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "head");
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1657), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1657
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = Parser.parseBodyFragment("`oU", "Y!-&H'@@),");
      document0.getElementsByAttributeValueContaining("@w*&=8>T|d", "_");
      document1.tagName();
      document1.appendText("_");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = new Document("head");
      MockFile mockFile0 = new MockFile("head");
      mockFile0.setWritable(false);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      MockFileWriter mockFileWriter1 = (MockFileWriter)document0.html((OutputStreamWriter) mockFileWriter0);
      document0.siblingElements();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter1);
      mockFileWriter1.getEncoding();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.html((Appendable) mockPrintWriter0);
      Document document1 = document0.normalise();
      document0.doClone(document1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iYWCk%RD->JA7'%r.S", "iYWCk%RD->JA7'%r.S");
      Document document1 = document0.ownerDocument();
      Document document2 = document1.clone();
      Element element0 = document2.addClass("org.jsoup.select.CombiningEvaluator$And");
      Pattern pattern0 = Pattern.compile("html", (-2));
      element0.getElementsByAttributeValueMatching("nq", pattern0);
      Document document3 = document2.clone();
      TextNode textNode0 = new TextNode("2P=#fE3kE)");
      textNode0.clearAttributes();
      document1.appendChild(document2);
      textNode0.nextSibling();
      document2.getElementsContainingText(".i%$WHnT/?',");
      document1.getElementsContainingText("nq");
      document1.doSetBaseUri("org.jsoup.select.CombiningEvaluator$And");
      document3.childNodesAsArray();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "iYWCk%RD->JA7'%r.S");
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1657), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1657
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Element element0 = new Element("big");
      Tag.valueOf("Fr, 2a_E<8v");
      String string0 = "Queue did not match expected sequence";
      Document document0 = Parser.parseBodyFragment("Fr, 2a_E<8v", "Queue did not match expected sequence");
      Element element1 = document0.addClass("Fr, 2a_E<8v");
      element1.getElementsByAttribute("org.jsoup.select.StructuralEvaluator$PreviousSibling");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iYWCk%RD->JA7'%r.S", "iYWCk%RD->JA7'%r.S");
      Document document1 = document0.ownerDocument();
      document1.getAllElements();
      document1.clone();
      Tag tag0 = Tag.valueOf("\"r`~f4q7bCTI");
      Element element0 = new Element(tag0, "");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("body", "");
      Attribute attribute1 = new Attribute("\"r`~f4q7bCTI", "[6aHsa9K@ D", attributes0);
      attributes0.put(attribute1);
      Element element1 = new Element(tag0, "#QpyF_t;J", attributes0);
      document0.cssSelector();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element1.classNames(set0);
      Element element2 = element1.appendTo(document1);
      element1.nextElementSibling();
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("body");
      element2.is((Evaluator) evaluator_Attribute0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",1|if=x5C>S(]s`hMK");
      Element element0 = new Element(tag0, "Data");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("6&I7~0b,U6SH:MT", "&H\"T9]sl[vxeD*&W");
      attributes0.put(attribute0);
      Document document0 = new Document(",1|if=x5C>S(]s`hMK");
      element0.cssSelector();
      Locale locale0 = Locale.ITALY;
      Locale locale1 = Locale.UK;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Element element1 = document0.classNames(set0);
      Document document1 = new Document(":matchText");
      Document document2 = document1.normalise();
      document2.appendTo(element1);
      document1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "HGu[UX1");
      document0.getAllElements();
      document0.getElementsByAttributeValueContaining("HGu[UX1", "Insert position out of bounds.");
      document0.empty();
      document0.childNodesAsArray();
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      document0.hasText();
      document1.textNodes();
      document1.wholeText();
      document1.isBlock();
      document0.getAllElements();
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode1);
      document2.val("");
      document0.nodelistChanged();
      document2.dataset();
      document1.appendChild(document2);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parse("r`K`z", "r`K`z");
      document0.text();
      Element element0 = document0.html("r`K`z");
      document0.siblingElements();
      Pattern pattern0 = Pattern.compile("br", 4);
      document0.getElementsMatchingOwnText(pattern0);
      element0.nextElementSiblings();
      document0.val();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wY1*Ab'7UYz_J@+L", "wY1*Ab'7UYz_J@+L");
      Element element0 = document0.removeClass("wY1*Ab'7UYz_J@+L");
      // Undeclared exception!
      try { 
        element0.child((-705));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<tK~ID!Rl.7", "<tK~ID!Rl.7");
      String string0 = "</";
      Element element0 = document0.tagName("<tK~ID!Rl.7");
      document0.reparentChild(element0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<", "<");
      document0.appendElement("<");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wY1*Ab'7UYz_J@+L", "@Q");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = new Document("2K9/y^R^9kcL7");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      document_OutputSettings0.indentAmount(776);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document1.quirksMode(document_QuirksMode0);
      document1.getElementsByAttributeValueNot("^&k0b", "b^<+a%D");
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("r`K`z", "r`K`z");
      document0.text();
      Parser.parseBodyFragment("r`K`z", "r`K`z");
      document0.siblingElements();
      document0.getElementsByIndexEquals(12);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Pattern pattern0 = Pattern.compile("r0jhXg08\"?");
      pattern0.split((CharSequence) "r0jhXg08\"?", 52);
      document0.childNodesCopy();
      document0.getElementsByAttributeValueMatching("InTableBody", pattern0);
      TextNode textNode0 = TextNode.createFromEncoded("head");
      TextNode.createFromEncoded("action", "InTableBody");
      document0.getElementsByAttributeValueMatching(".i%$WHnT/?',", pattern0);
      Document document1 = document0.clone();
      textNode0.clearAttributes();
      Document document2 = (Document)document0.appendChild(textNode0);
      textNode0.nextSibling();
      document2.getElementsContainingText("r0jhXg08\"?");
      document0.getElementsContainingText("Tag name must not be empty.");
      document2.doSetBaseUri("Tag name must not be empty.");
      document1.childNodesAsArray();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "head");
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1657), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1657
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Element element0 = new Element("big");
      Tag tag0 = Tag.valueOf("Fr, 2a_E<8v");
      Element element1 = new Element(tag0, "f,\b77mP-roEi");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("body", "y*[Xcx7");
      attributes0.put(attribute0);
      Element element2 = new Element(tag0, "y*[Xcx7", attributes0);
      element2.cssSelector();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element1.classNames(set0);
      element0.appendTo(element2);
      element2.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = "<tK~ID!Rl.7";
      Document document0 = Parser.parseBodyFragmentRelaxed("<tK~ID!Rl.7", "<tK~ID!Rl.7");
      Document document1 = document0.clone();
      Elements elements0 = document1.getElementsByAttributeValueStarting("<tK~ID!Rl.7", "<tK~ID!Rl.7");
      // Undeclared exception!
      try { 
        document0.insertChildren(2227, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = new Document("head");
      String string0 = "InTableBody";
      Pattern pattern0 = Pattern.compile("r0jhXg08\"?");
      String string1 = "BeforeHead";
      document0.getElementsByClass("BeforeHead");
      pattern0.split((CharSequence) "r0jhXg08\"?", 52);
      document0.childNodesCopy();
      document0.getElementsByAttributeValueMatching("InTableBody", pattern0);
      TextNode textNode0 = TextNode.createFromEncoded("head");
      TextNode.createFromEncoded("action", "InTableBody");
      document0.getElementsByAttributeValueMatching(".i%$WHnT/?',", pattern0);
      Document document1 = document0.clone();
      textNode0.clearAttributes();
      Document document2 = (Document)document0.appendChild(textNode0);
      textNode0.nextSibling();
      document2.getElementsContainingText("r0jhXg08\"?");
      document0.getElementsContainingText("Tag name must not be empty.");
      document2.doSetBaseUri("Tag name must not be empty.");
      document1.childNodesAsArray();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "head");
      int int0 = (-1657);
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1657), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1657
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iYWCk%RD->JA7'%r.S", "iYWCk%RD->JA7'%r.S");
      Document document1 = document0.ownerDocument();
      document1.getAllElements();
      Document document2 = document1.clone();
      document2.addClass("org.jsoup.select.CombiningEvaluator$And");
      document1.tagName("</");
      document0.reparentChild(document2);
      document2.html();
      document1.html("Q+)^Vr");
      // Undeclared exception!
      try { 
        document2.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("r`K`z", "r`K`z");
      document0.text();
      document0.html();
      MockFile mockFile0 = new MockFile("<html>\n <head></head>\n <body>\n  r`K`z\n </body>\n</html>", "r`K`z");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "%T2^L85(#;?[$");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // %T2^L85(#;?[$
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C?iCuC`H@M}TV", "CdataSection");
      document0.getElementsByAttributeValueContaining("CdataSection", ":x/sf$");
      document0.tagName();
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document2 = document1.outputSettings(document_OutputSettings1);
      document2.hasText();
      document2.head();
      List<TextNode> list0 = document1.textNodes();
      document1.wholeText();
      document1.isBlock();
      document2.getAllElements();
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.quirks;
      Document document3 = document1.quirksMode(document_QuirksMode1);
      document3.val("");
      document0.nodelistChanged();
      // Undeclared exception!
      try { 
        document1.insertChildren(96, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<", "<");
      document0.getElementsByAttribute("!:cJ}?4g");
      // Undeclared exception!
      try { 
        document0.wrap("!:cJ}?4g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      document1.addChildren(nodeArray0);
      document1.ownText();
      document1.nodeName();
      document0.tagName();
      document1.dataNodes();
      assertEquals(1, document0.siblingIndex());
      
      document0.getElementsContainingText("#");
      Pattern pattern0 = Pattern.compile("1`Yv{~Te EYnW+", 3294);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      Elements elements1 = document1.nextElementSiblings();
      assertTrue(elements1.equals((Object)elements0));
      
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Element element0 = new Element("big");
      Document document0 = new Document(" A/n_.aD=L");
      element0.doClone(document0);
      Tag tag0 = Tag.valueOf("Fr, 2a_E<8v");
      String string0 = "f,\\b77mP-roEi";
      Element element1 = new Element(tag0, "f,\b77mP-roEi");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeAttribute("Fr, 2a_E<8v");
      Tag.valueOf("big", parseSettings0);
      // Undeclared exception!
      try { 
        element0.removeChild(element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Tag tag0 = Tag.valueOf("</");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("</", "");
      Attributes attributes1 = attributes0.put(attribute0);
      Element element0 = new Element(tag0, "textarea", attributes1);
      element0.cssSelector();
      Locale locale0 = Locale.ITALY;
      Map.Entry.comparingByKey();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Element element1 = element0.classNames(set0);
      element1.appendTo(element0);
      element1.nextElementSibling();
      // Undeclared exception!
      try { 
        element1.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f:M}P", "");
      document0.title("f:M}P");
      Document document1 = document0.clone();
      Elements elements0 = document1.getElementsMatchingText("xo!9A'n!_<");
      document1.previousElementSibling();
      // Undeclared exception!
      try { 
        document0.insertChildren(456, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(13);
      Document document0 = parser1.parseInput("", "Pattern syntax error: ");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Document document3 = document2.parser(parser1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "");
      document3.outerHtmlHead(stringBuilder1, 13, document_OutputSettings0);
      document1.getElementsByAttributeValueContaining("[7PX6,=|tj:ts", "^#@?");
      // Undeclared exception!
      try { 
        document2.getElementsMatchingText("[7PX6,=|tj:ts");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: [7PX6,=|tj:ts
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LE[TC|vucz#'VoE", "LE[TC|vucz#'VoE");
      document0.ownText();
      Element element0 = document0.html("LE[TC|vucz#'VoE");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document1 = (Document)element0.filter(nodeFilter0);
      document0.id();
      document0.getElementsContainingText("");
      document0.nodeName();
      String string0 = "noembed";
      document0.getElementsByAttributeValueContaining(" />", "noembed");
      document1.previousElementSiblings();
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("#**V;nyItx<b4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: #**V;nyItx<b4
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Tag tag0 = Tag.valueOf("</");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("</", "</");
      Element element0 = new Element(tag0, "textarea", attributes0);
      element0.cssSelector();
      Locale locale0 = Locale.ITALY;
      Document.createShell("</");
      Document document0 = new Document("</");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.getElementsContainingText("#root");
      element0.text("-");
      Pattern pattern0 = Pattern.compile("*QqMuq(m ,6oy.\"WV", 3294);
      document0.getElementsMatchingOwnText(pattern0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iYWCk%RD->JA7'%r.S", "iYWCk%RD->JA7'%r.S");
      Document document1 = document0.ownerDocument();
      document1.getAllElements();
      Document document2 = document1.clone();
      document2.addClass("org.jsoup.select.CombiningEvaluator$And");
      Element element0 = document1.tagName("</");
      document0.reparentChild(document2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      element0.previousElementSiblings();
      String string0 = Node.EmptyString;
      String string1 = "Q+)^Vr";
      // Undeclared exception!
      try { 
        document2.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "C?iCuC`H@M}TV";
      Document document0 = Document.createShell("C?iCuC`H@M}TV");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document document2 = document1.outputSettings(document_OutputSettings2);
      document2.hasText();
      Element element0 = document2.head();
      element0.textNodes();
      document1.wholeText();
      element0.isBlock();
      document2.getAllElements();
      // Undeclared exception!
      try { 
        element0.child(44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 44, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iYWCk%RD->JA7'%r.S", "iYWCk%RD->JA7'%r.S");
      Document document1 = document0.ownerDocument();
      document1.getAllElements();
      Document document2 = document1.clone();
      document2.addClass("org.jsoup.select.CombiningEvaluator$And");
      String string0 = "</";
      document1.tagName("</");
      document0.reparentChild(document2);
      document2.html();
      MockFile mockFile0 = new MockFile("G|", "iYWCk%RD->JA7'%r.S");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "org.jsoup.select.CombiningEvaluator$And");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.jsoup.select.CombiningEvaluator$And
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<", "<");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&quot;", "&quot;");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("&quot;", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      String string0 = "M<;@0h8RM>\\^QdtBIv";
      boolean boolean0 = true;
      Parser.unescapeEntities("M<;@0h8RM>^QdtBIv", true);
      parseSettings0.normalizeTag("Gt\")pVFExU/q/UI6f");
      parseSettings0.normalizeAttribute("Gt\")pVFExU/q/UI6f");
      Document document0 = parser1.parseInput("&gt;", "&gt;");
      parser0.settings(parseSettings0);
      Document document1 = document0.parser(parser1);
      Element element0 = document1.clone();
      document1.classNames();
      // Undeclared exception!
      try { 
        element0.child(6642);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6642, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<tK~ID!Rl.7", "<tK~ID!Rl.7");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<tK~ID!Rl.7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("<tK~ID!Rl.7", document0.location());
      
      Document document1 = (Document)document0.addClass("<tK~ID!Rl.7");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<tK~ID!Rl.7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("<tK~ID!Rl.7", document0.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("<tK~ID!Rl.7", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("<tK~ID!Rl.7", document1.location());
      assertFalse(document1.hasParent());
      
      int int0 = document0.elementSiblingIndex();
      assertSame(document0, document1);
      assertEquals(0, int0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<tK~ID!Rl.7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("<tK~ID!Rl.7", document0.location());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("feyMr1$roX_F");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("feyMr1$roX_F", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("feyMr1$roX_F", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.siblingElements();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("feyMr1$roX_F", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("feyMr1$roX_F", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      String string0 = document0.data();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("feyMr1$roX_F", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("feyMr1$roX_F", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      CDataNode cDataNode0 = new CDataNode("");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Node node0 = cDataNode0.clearAttributes();
      assertSame(cDataNode0, node0);
      assertSame(node0, cDataNode0);
      assertNotNull(node0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(node0.hasParent());
      
      Document document1 = (Document)document0.appendChild(node0);
      assertSame(document0, document1);
      assertSame(cDataNode0, node0);
      assertSame(node0, cDataNode0);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("feyMr1$roX_F", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("feyMr1$roX_F", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, cDataNode0.siblingIndex());
      assertTrue(node0.hasParent());
      assertEquals(1, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("feyMr1$roX_F", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("feyMr1$roX_F", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      Node node1 = cDataNode0.nextSibling();
      assertSame(cDataNode0, node0);
      assertNull(node1);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, cDataNode0.siblingIndex());
      
      String string1 = Node.EmptyString;
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = document1.data();
      assertSame(document0, document1);
      assertSame(cDataNode0, node0);
      assertSame(node0, cDataNode0);
      assertSame(document1, document0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals("feyMr1$roX_F", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("feyMr1$roX_F", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, cDataNode0.siblingIndex());
      assertTrue(node0.hasParent());
      assertEquals(1, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("feyMr1$roX_F", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("feyMr1$roX_F", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      
      StringBuilder stringBuilder0 = new StringBuilder(2);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append(true);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.append((float) 2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertEquals("true2.0", stringBuilder0.toString());
      assertEquals("true2.0", stringBuilder1.toString());
      assertEquals("true2.0", stringBuilder2.toString());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder2, 4, 4);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(charBuffer0);
      assertEquals("true2.0", stringBuilder0.toString());
      assertEquals("true2.0", stringBuilder1.toString());
      assertEquals("true2.0", stringBuilder2.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(4, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      
      int int0 = 9418;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      // Undeclared exception!
      try { 
        Charset.forName("feyMr1$roX_F");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // feyMr1$roX_F
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LE[TC|vucz#'VoE", "LE[TC|vucz#'VoE");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LE[TC|vucz#'VoE", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.ownText();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LE[TC|vucz#'VoE", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.html("LE[TC|vucz#'VoE");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LE[TC|vucz#'VoE", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("LE[TC|vucz#'VoE", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      String string1 = document0.id();
      assertSame(document0, document1);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LE[TC|vucz#'VoE", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.getElementsContainingText("");
      assertSame(document0, document1);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LE[TC|vucz#'VoE", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      
      String string2 = document0.nodeName();
      assertSame(document0, document1);
      assertEquals("#document", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LE[TC|vucz#'VoE", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements1 = document0.getElementsByAttributeValueContaining(" />", "noembed");
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertNotNull(elements1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LE[TC|vucz#'VoE", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      
      String string3 = document1.data();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LE[TC|vucz#'VoE", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("LE[TC|vucz#'VoE", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      document1.nodelistChanged();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LE[TC|vucz#'VoE", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("LE[TC|vucz#'VoE", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("LE[TC|vucz#'VoE", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      
      // Undeclared exception!
      try { 
        document0.is("70t/k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '70t/k': unexpected token at '/k'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "br";
      Document document0 = Parser.parseBodyFragmentRelaxed("rwdG^TWy", "br");
      document0.getElementsContainingOwnText("rwdG^TWy");
      Element element0 = document0.body();
      String string1 = "";
      // Undeclared exception!
      try { 
        element0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell("iNin|?#");
      String string0 = "";
      document0.data();
      CDataNode cDataNode0 = new CDataNode("        ");
      document0.cssSelector();
      TextNode textNode0 = cDataNode0.splitText(0);
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LE[TC|vucz#'VoE", "LE[TC|vucz#'VoE");
      document0.ownText();
      Document document1 = (Document)document0.html("LE[TC|vucz#'VoE");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document1.filter(nodeFilter0);
      document0.id();
      document0.getElementsContainingText("");
      document0.nodeName();
      document0.getElementsByAttributeValueContaining(" />", "noembed");
      document1.data();
      document1.nodelistChanged();
      // Undeclared exception!
      try { 
        document0.is("70t/k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '70t/k': unexpected token at '/k'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Tag tag0 = Tag.valueOf("</");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("</", "");
      Attributes attributes1 = attributes0.put(attribute0);
      Element element0 = new Element(tag0, "textarea", attributes1);
      element0.cssSelector();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Element element1 = element0.classNames(set0);
      element1.appendTo(element0);
      element1.nextElementSibling();
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = "big";
      Element element0 = new Element("big");
      Tag tag0 = Tag.valueOf("Fr, 2a_E<8v");
      String string1 = "f,\\b77mP-roEi";
      Element element1 = new Element(tag0, "f,\b77mP-roEi");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeAttribute("Fr, 2a_E<8v");
      Tag.valueOf("big", parseSettings0);
      // Undeclared exception!
      try { 
        element0.removeChild(element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = "vR#&`6wtMe.w,";
      Document document0 = Document.createShell("vR#&`6wtMe.w,");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document2.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      String string0 = "#>EWxpWVO)^,skC|";
      Document document0 = parser1.parseInput("3$DIYsC^W", "#>EWxpWVO)^,skC|");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.val("3$DIYsC^W");
      String string1 = "";
      String string2 = "";
      Parser.parse("", "#>EWxpWVO)^,skC|");
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = new Document("c=GI_<z1$m(g");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(776);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueNot("cV;X2MP", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Document.createShell("aM?xt gf");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      Element element0 = document2.text("aM?xt gf");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document2;
      CDataNode cDataNode0 = new CDataNode("aM?xt gf");
      Node node0 = cDataNode0.clone();
      nodeArray0[2] = node0;
      nodeArray0[3] = (Node) document1;
      cDataNode0.reparentChild(document2);
      nodeArray0[4] = (Node) document0;
      element0.previousSibling();
      nodeArray0[5] = (Node) element0;
      // Undeclared exception!
      try { 
        document1.addChildren((-1), nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parse("^&k0b", "^&k0b");
      int int0 = 462;
      document0.getElementsByIndexGreaterThan(462);
      Document document1 = document0.ownerDocument();
      // Undeclared exception!
      try { 
        document1.is("^&k0b");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '^&k0b': unexpected token at '^&k0b'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f:M}P", "");
      document0.title("f:M}P");
      Document document1 = document0.clone();
      Elements elements0 = document1.getElementsMatchingText("xo!9A'n!_<");
      // Undeclared exception!
      try { 
        document0.insertChildren(456, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wY1*Ab'7UYz_J@+L", "wY1*Ab'7UYz_J@+L");
      document0.getElementsByAttributeValueContaining(":x/sf$", ":x/sf$");
      document0.tagName();
      document0.appendText("");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      Document document1 = document0.clone();
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document1.children();
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        document0.after((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("r`K`z", "r`K`z");
      String string0 = document0.text();
      assertEquals("r`K`z", string0);
      
      document0.html("r`K`z");
      document0.siblingElements();
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, elements0.size());
      assertEquals("r`K`z", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Tag tag0 = Tag.valueOf("xvS");
      CDataNode cDataNode0 = new CDataNode("xvS");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("xvS", "xvS");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super TextNode>) comparator0);
      Attributes attributes2 = attributes1.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "xvS", attributes2);
      Pattern pattern0 = Pattern.compile("#omJ!8", (-521));
      pseudoTextElement0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.after("_+&+HY,9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
