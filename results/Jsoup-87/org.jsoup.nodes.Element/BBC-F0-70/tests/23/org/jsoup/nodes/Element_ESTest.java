/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:41:36 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("m|&gQ_zf$", "tpe");
      document0.getElementsByAttributeValueContaining("m|&gQ_zf$", "bw2\"&ADT=G0Vgr]6\"");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("Z=QFI;D7Xi|OoRR");
      document0.appendElement("Z=QFI;D7Xi|OoRR");
      document0.appendTo(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element");
      Element element0 = document0.createElement("org.jsoup.nodes.Element$2");
      Element element1 = element0.appendChild(document0);
      element1.html("org.jsoup.nodes.Element$2");
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("UC#", "0bP8\"!N");
      Elements elements0 = document0.getElementsByClass("v");
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("M4,X#O8");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")P|Ys$5BSi(Jgqb ", ")P|Ys$5BSi(Jgqb ");
      Document document1 = document0.clone();
      document0.appendChild(document1);
      document1.wrap("smVC}wwJy3IQFnx");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Tag tag0 = Tag.valueOf("m|&gQ_zf$");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "hg+pl", attributes0);
      Element element0 = pseudoTextElement0.appendElement("DJ");
      element0.wrap("<m|&gQ_zf$ #cdata=\"`w\"></m|&gQ_zf$>");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      Element element0 = document0.head();
      element0.wrap("Tag cannot be self closing; not a void tag");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("uYnj!Vi QEE'-B9F", "uYnj!Vi QEE'-B9F");
      document0.setSiblingIndex((-835));
      document0.val("vJ~tiple");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "T%\"}0 Uu{vJe7");
      Element element0 = document0.body();
      element0.val("T%\"}0 Uu{vJe7");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CKt(:", "CKt(:");
      document0.val("CKt(:");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#data", "S-m]|");
      Element element0 = document0.head();
      element0.toggleClass(":matches(%s)");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", "ub7hy&[u>B\"cz|u+");
      Element element0 = document0.appendTo(document0);
      element0.toggleClass("ub7hy&[u>B\"cz|u+");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "");
      Element element0 = document0.body();
      element0.text("id");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&fx6hL", "&fx6hL");
      document0.text("K}?^`;;=Pt9S)33=");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", ":nth-child(%d)");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("uYnj!Vi QEE'-B9F", "uYnj!Vi QEE'-B9F");
      document0.setSiblingIndex((-835));
      document0.tagName("vJ~tiple");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", " ");
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.tagName("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("zI'1@0@", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "zI'1@0@", attributes0);
      formElement0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "d%,/NqHW");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("source", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("source");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "checked", attributes0);
      pseudoTextElement0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*G#Z(", "");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Element element0 = new Element("button");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", ":nth-child(%d)");
      document0.selectFirst("html > body");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^aVsaoI> 'm.vv", "^aVsaoI> 'm.vv");
      Element element0 = new Element("img");
      document0.appendChild(element0);
      document0.selectFirst("img");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("a", "a");
      Element element0 = document0.tagName("compact");
      element0.selectFirst("compact");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      document0.select("#z");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("se3pI@lRK1g?S,i", "}}^irVr;(`");
      Element element0 = document0.body();
      element0.removeClass("}}^irVr;(`");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("M4,X#O8");
      document0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*G#Z(", "");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "'d", attributes0);
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CKt(:", "CKt(:");
      document0.siblingIndex = (-2067947214);
      document0.prependText("CKt(:");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.prependText("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0?K&I|1`R%F(r{$7eGy");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("keygen");
      Document document1 = Parser.parseBodyFragment("keygen", "v<aa<q[EA)/Lyjt[");
      document0.prependChild(document1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("POST", "~]G");
      document0.siblingIndex = (-2335);
      document0.prepend("~]G");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C{8Kt(", "C{8Kt(");
      Element element0 = document0.body();
      element0.prepend("br");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("UC#", "0bP8\"!N");
      Element element0 = document0.createElement("compact");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CKt(:", "CKt(:");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("I:=5WO>p'Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      pseudoTextElement0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Tag tag0 = Tag.valueOf("m|&gQ_zf$");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "hg+pl", attributes0);
      Document document0 = Parser.parse("m|&gQ_zf$", "tpe");
      pseudoTextElement0.appendTo(document0);
      Element element0 = pseudoTextElement0.appendElement("DJ");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Tag tag0 = Tag.valueOf("m|&gQ_zf$");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "hg+d`", (Attributes) null);
      FormElement formElement0 = new FormElement(tag0, "']qEp{Kwd^Es?LK", (Attributes) null);
      Element element0 = pseudoTextElement0.doClone(formElement0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("6[0", "6[0");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("m|&gQ_zf$");
      Document document0 = Parser.parseBodyFragment("basefont", "button");
      document0.appendChild(textNode0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("org.jsoup.parser.ParseSettings", parseSettings0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Evaluator$AttributeWithValueStarting", attributes0);
      formElement0.nodeName();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}R>aB5C>84\"w#45?;v", "}R>aB5C>84\"w#45?;v");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*G#Z(", "");
      Element element0 = document0.body();
      element0.tagName("*G#Z(");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypublicIdentifer");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qRuVwYBbI[]{##P", "I:=5WO>p'Y,");
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("");
      document0.is((Evaluator) evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*G#Z(", "");
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(17, 17);
      document0.is((Evaluator) evaluator_IsNthLastOfType0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("I:=5WO>p'Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      pseudoTextElement0.is("b");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("thead", "thead");
      Document document1 = Document.createShell("thead");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("}~WVeI+\"v", true);
      nodeArray0[2] = (Node) xmlDeclaration0;
      nodeArray0[3] = (Node) document1;
      TextNode textNode0 = new TextNode("Children collection to be inserted must not be null.", ":prev%s");
      nodeArray0[4] = (Node) textNode0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("W*<2T#s):FelQ", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "W*<2T#s):FelQ", attributes0);
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      Element element0 = document0.head();
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("I:=5WO>p'Y,", "I:=5WO>p'Y,");
      Elements elements0 = document0.siblingElements();
      Element element0 = document0.head();
      Element element1 = element0.appendTo(element0);
      element1.prependChild(document0);
      element0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("I:=5WO>p'Y,", "I:=5WO>p'Y,");
      Elements elements0 = document0.siblingElements();
      Element element0 = document0.head();
      element0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hO[@*r3FUQQf", "hO[@*r3FUQQf");
      List<DataNode> list0 = document0.dataNodes();
      document0.insertChildren(1, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Element element0 = new Element("button");
      Document document0 = Document.createShell("button");
      Element element1 = element0.appendTo(document0);
      element1.html("button");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      Element element0 = document0.head();
      element0.html("4 ^c;BB]l]0s");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("I:=5WO>p'Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      pseudoTextElement0.html("<HV");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("?%^yNjW0eJZ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3237);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(outputStreamWriter0);
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("#", "0bP8\"!N");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yI3wuyy\u0004$Fj");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "yI3wuyy\u0004$Fj", attributes0);
      pseudoTextElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("UC#", "0bP8\"!N");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("zI'1@0@", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "zI'1@0@", attributes0);
      formElement0.prependText("zI'1@0@");
      Pattern pattern0 = Pattern.compile("zI'1@0@");
      formElement0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("#", "0bP8\"!N");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("m|&gQ_zf$");
      Document document0 = Parser.parseBodyFragment("basefont", "button");
      Element element0 = document0.appendChild(textNode0);
      Pattern pattern0 = Pattern.compile("m|&gQ_zf$", 14);
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("a", "a");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("type");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", (Attributes) null);
      pseudoTextElement0.getElementsContainingOwnText("$k$p%z;?-.");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ub7hy&[u>B\"cz|u+", "ub7hy&[u>B\"cz|u+");
      document0.getElementsByTag("ub7hy&[u>B\"cz|u+");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("Z=QFI;D7Xi|OoRR");
      document0.appendElement("Z=QFI;D7Xi|OoRR");
      document0.getElementsByTag("Z=QFI;D7Xi|OoRR");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsByIndexGreaterThan((-1307));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("I:=5WO>p'Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      pseudoTextElement0.getElementsByIndexEquals((-1996));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "=&APi:{:zeqPh3");
      document0.getElementsByAttributeValueStarting("br", ";'C0arn;");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("                 ");
      document0.getElementsByAttributeValueNot("                 ", "                 ");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", " ");
      document0.getElementsByAttributeValue("ub7hy&[u>B\"cz|u+", "Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("O@de->2{s4WvB", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("O@de->2{s4WvB", true);
      Element element0 = new Element(tag0, "O@de->2{s4WvB", attributes1);
      element0.getElementsByAttributeStarting("O@de->2{s4WvB");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("zI'1@0@", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("zI'1@0@", "zI'1@0@");
      FormElement formElement0 = new FormElement(tag0, "zI'1@0@", attributes1);
      formElement0.getElementsByAttribute("zI'1@0@");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("I:=5WO>p'Y,", "q50z*");
      Element element0 = document0.appendChild(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", " ");
      document0.appendChild(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Element element0 = new Element("head");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("6[0", "6[0");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("Z=QFI;D7Xi|OoRR");
      Element element0 = document0.appendElement("Z=QFI;D7Xi|OoRR");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("I:=5K}>p2?Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "I:=5K}>p2?Y,", attributes0);
      pseudoTextElement0.siblingIndex = (-1);
      FormElement formElement0 = new FormElement(tag0, "I:=5K}>p2?Y,", attributes0);
      pseudoTextElement0.doClone(formElement0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("tr", parseSettings0);
      Element element0 = new Element(tag0, "hq#dsmIg0V(rYy", (Attributes) null);
      Document document0 = Parser.parseBodyFragmentRelaxed("/-7(", "org.jsoup.parser.TokenQueue");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("XxcNs_'P{O,N", "uO`G(");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Element element0 = new Element("A(R'QCQo");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("e1Q?hlt,8+gmW", "(T4KRvP[(HYmZRNP>.");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LY;!IU1(1GJ^M<", "zI'1@0@");
      Element element0 = document0.head();
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Tag tag0 = Tag.valueOf("or.jsoup.nodes.Element$1");
      FormElement formElement0 = new FormElement(tag0, "or.jsoup.nodes.Element$1", (Attributes) null);
      Element element0 = formElement0.toggleClass("or.jsoup.nodes.Element$1");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "");
      document0.toggleClass("textarea");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "=&APi:{:zeqPh3");
      Element element0 = document0.head();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("):=sB'P-d\"aoQ)", ":nth-child(%d)");
      Element element0 = document0.head();
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hO[@*r3FUQQf", "hO[@*r3FUQQf");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("I:=5WO>p'Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      FormElement formElement0 = new FormElement(tag0, "I:=5WO>p'Y,", attributes0);
      PseudoTextElement pseudoTextElement1 = (PseudoTextElement)pseudoTextElement0.doClone(formElement0);
      pseudoTextElement1.before((Node) pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C{8Kt(:", "C{8Kt(:");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Tag tag0 = Tag.valueOf("type");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", (Attributes) null);
      Element element0 = pseudoTextElement0.appendElement("G.");
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      Element element0 = document0.head();
      element0.before("I:=5WO>p'Y,");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("yI3wuyy\u0004$Fj", "");
      Document document1 = Parser.parseBodyFragmentRelaxed(":nth-last-child(", "yI3wuyy\u0004$Fj");
      document0.appendTo(document1);
      document0.before("#root");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LY;!IU1(1GJ^M<", "x4i{rbqRZjQ~<$y`mP");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "d%,/NqHW");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("_#z}-(", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("_#z}-(");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "_#z}-(", attributes0);
      formElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.attr("", false);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Tag tag0 = Tag.valueOf("A(R'QCQo");
      CDataNode cDataNode0 = new CDataNode("basefont");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "A(R'QCQo", attributes0);
      Document document0 = Parser.parse("basefont", "&#B");
      Element element0 = pseudoTextElement0.appendTo(document0);
      element0.attr("|>;Qq0a", "<html>\n <head></head>\n <body>\n  basefont\n </body>\n</html>\n <basefont>");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{8K(:", "{8K(:");
      Element element0 = document0.head();
      element0.attr("+zAAV;RrR}QO|// ", "+zAAV;RrR}QO|// ");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[RK4,");
      CDataNode cDataNode0 = new CDataNode("',*F,C,p`/[<*$T");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      pseudoTextElement0.attr(":matches(regex) query must not be empty", "br");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypublicIdentifer");
      Element element0 = document0.head();
      element0.appendText("P[+~k{WP\"PQ");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hO[@*r3FUQQf", "hO[@*r3FUQQf");
      Element element0 = document0.appendChild(document0);
      element0.appendText("AUvdkvwV';K9|");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.appendText("");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("Z=QFI;D7Xi|OoRR");
      Element element0 = document0.appendElement("Z=QFI;D7Xi|OoRR");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(0);
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("L1R%^yNjW0eJZ");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("[O2");
      Document document1 = document0.clone();
      Element element0 = document1.text(" />");
      document1.setSiblingIndex((-839));
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*G#Z(", "");
      Element element0 = document0.body();
      element0.append("7>_YTf'oW");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Tag tag0 = Tag.valueOf("mKv(:");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "mKv(:", (Attributes) null);
      pseudoTextElement0.setSiblingIndex((-822));
      pseudoTextElement0.append("mKv(:");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")P|Ys$5BSi(Jgqb ", ")P|Ys$5BSi(Jgqb ");
      document0.appendChild(document0);
      CDataNode cDataNode0 = new CDataNode(")P|Ys$5BSi(Jgqb ");
      document0.after((Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("`5\"E)PXj^= }_5T@l9", "*G#Z(");
      Element element0 = document0.head();
      element0.after("5Q+9ahhj>pi");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", "ub7hy&[u>B\"cz|u+");
      Document document1 = Parser.parseBodyFragmentRelaxed("ub7hy&[u>B\"cz|u+", "ub7hy&[u>B\"cz|u+");
      document0.appendChild(document1);
      document1.after("'1jO,7:1#");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("ZbTI?e `>lj", "ZbTI?e `>lj");
      Element element0 = document0.head();
      element0.after((Node) document0);
      document0.addClass("k");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      Element element0 = document0.head();
      element0.addClass("{TkyH{p>Up@");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("*G#Z(");
      document0.addClass("*G#Z(");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hO[@*r3FUQQf", "hO[@*r3FUQQf");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.wrap("DOCTYPE");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*G#Z(", "");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypublicIdentifer");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.val("AfterDoctypublicIdentifer");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", "gWM\"@d~Xh5>%8K:DZ");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Tag tag0 = Tag.valueOf("st$fQ%(mpULz");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "st$fQ%(mpULz", attributes0);
      String[] stringArray0 = new String[2];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.toggleClass("st$fQ%(mpULz");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document("SdT1gdfn;%i");
      // Undeclared exception!
      try { 
        document0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("%?!jdFuE|lez::Y", "%?!jdFuE|lez::Y");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("I:=5WO>p'Y,", "I:=5WO>p'Y,");
      Element element0 = document0.head();
      List<Node> list0 = Parser.parseXmlFragment("br", "class");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document("*G#Z(");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.tagName("UC#");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hO[@*r3FUQQf", "hO[@*r3FUQQf");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("I:=5K}>p2?Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "I:=5K}>p2?Y,", attributes0);
      FormElement formElement0 = new FormElement(tag0, "I:=5K}>p2?Y,", attributes0);
      Element element0 = pseudoTextElement0.doClone(formElement0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = new Document("?%^yNjW0eJZ");
      // Undeclared exception!
      try { 
        document0.selectFirst("?%^yNjW0eJZ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '?%^yNjW0eJZ': unexpected token at '?%^yNjW0eJZ'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")P|Ys$5BSi(Jgqb ", ")P|Ys$5BSi(Jgqb ");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hO[@*r3FUQQf", "hO[@*r3FUQQf");
      // Undeclared exception!
      try { 
        document0.select("hO[@*r3FUQQf");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at '@*r3FUQQf'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypePublicIdentifier");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*G#Z(", "");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Tag tag0 = Tag.valueOf("d");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "RB'U~/zRxP", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode("RB'U~/zRxP");
      Element element0 = pseudoTextElement0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yI3wuyy\u0004$Fj");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "yI3wuyy\u0004$Fj", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypublicIdentifer");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.prependElement("AfterDoctypublicIdentifer");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("-n1T<IDe]", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ".lwo[W6G", attributes0);
      // Undeclared exception!
      try { 
        element0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H}4/*+Fzc%'", "H}4/*+Fzc%'");
      DocumentType documentType0 = new DocumentType("button", "&lt;", "", "H}4/*+Fzc%'");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.prependChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Tag tag0 = Tag.valueOf("or.jsoup.nodes.Element$1");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "or.jsoup.nodes.Element$1", (Attributes) null);
      FormElement formElement0 = new FormElement(tag0, "or.jsoup.nodes.Element$1", (Attributes) null);
      Element element0 = pseudoTextElement0.doClone(formElement0);
      // Undeclared exception!
      try { 
        formElement0.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("yI3wuyy\u0004$Fj");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.prepend("rxmL~ff |#+)_vrT");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CKt(:", "CKt(:");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell("body");
      DocumentType documentType0 = new DocumentType("#root", "a", " />");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.prepend("cf%_{R)");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CKt(:", "CKt(:");
      StringBuffer stringBuffer0 = new StringBuffer("mJltiple");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(4958);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuffer0, 4958, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Tag tag0 = Tag.valueOf("or.jsoup.nodes.Element$1");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "or.jsoup.nodes.Element$1", attributes0);
      Element element0 = pseudoTextElement0.appendElement("Dr");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, 62, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", ":nth-child(%d)");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-1650), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("CKt(:", "CKt(:");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-1432352094), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Tag tag0 = Tag.valueOf("st$fQ%(mpULz");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "st$fQ%(mpULz", attributes0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        formElement0.outerHtmlTail(pipedWriter0, 13, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d$ tf]k7_]", ")/");
      PipedReader pipedReader0 = new PipedReader(2690);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2690);
      // Undeclared exception!
      document0.outerHtmlHead(pipedWriter0, 34, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m|&gQ_f$", "m|&gQ_f$");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "m|&gQ_f$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 3, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")P|Ys$5BSi(Jgqb ", ")P|Ys$5BSi(Jgqb ");
      CharBuffer charBuffer0 = CharBuffer.allocate(1028);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 1028, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("s+", "m|&g8izf");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-2138), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CKt(:", "CKt(:");
      StringWriter stringWriter0 = new StringWriter(58);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringWriter0, (-50), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("6[0", "6[0");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.is((Evaluator) null);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = new Document("?%^yNjW0eJZ");
      // Undeclared exception!
      try { 
        document0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("I:=5WO>p'Y,");
      Element element0 = new Element("button");
      element0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        element0.is("button");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.TextNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", "ub7hy&[u>B\"cz|u+");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      Comment comment0 = new Comment(" ?6.", "ub7hy&[u>B\"cz|u+");
      nodeArray0[2] = (Node) comment0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", " ");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html("#root");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("UC#", "0bP8\"!N");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell("LY;!IU1(1GJ^M<");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("button", "I:=5W6>p'Y,");
      document0.appendTo(document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2073);
      // Undeclared exception!
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypublicIdentifer");
      // Undeclared exception!
      try { 
        document0.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = new Document("QYd+q%(");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m|&gQ_zf$", "m|&gQ_zf$");
      Element element0 = document0.body();
      List<Node> list0 = Parser.parseXmlFragment("br", "br");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hO[@*r3FUQQf", "hO[@*r3FUQQf");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", " ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("W*<2T#s):FelQ", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "W*<2T#s):FelQ", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("w*<2t#s):felq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: w*<2t#s):felq
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("UC#", "0bP8\"v!N");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("I:=5WO>p'Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "I:=5WO>p'Y,", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      String string0 = "}^O'm4\\uUuw<po";
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: }^O'm4\\uUuw<po
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Element element0 = new Element("textarea");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("tag name must not be empty.", "gR*U!c}", true);
      element0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan(2147483645);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", " ");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Tag tag0 = Tag.valueOf("=(");
      CDataNode cDataNode0 = new CDataNode("s?[1irbb^");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ". Status=", attributes0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueStarting("=(", "java.lang.string@0000000025 ,vi|jh`n7vz@u");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hO[@*r3FUQQf", "hO[@*r3FUQQf");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("'vS7PI!", "hO[@*r3FUQQf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hO[@*r3FUQQf", "hO[@*r3FUQQf");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("a_}clu291r_gr", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("a_}clu291r_gr", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Document.createShell("*G#Z(");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("/@k9xldhfi3RT ].SQ", "*G#Z(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: *G#Z(
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("d%,/NqHW", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(" > ");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ",l_ZCqE;", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueEnding((String) null, "?%^yNjW0eJZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("*G#Z(");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("UC#", "0bP8\"v!N");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("                 ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = new Document("?%^yNjW0eJZ");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a_}clu291r_gr", "t@){qZYo{f(-1f");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("I:=5WK}>p'Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#roo?", attributes0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("KMU;}s", false);
      Element element0 = pseudoTextElement0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C{8Kt(:", "C{8Kt(:");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("_#z}-(", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("_#z}-(");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "_#z}-(", attributes0);
      formElement0.reparentChild(formElement0);
      // Undeclared exception!
      try { 
        formElement0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("W*<2T#s):FelQ", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "W*<2T#s):FelQ", attributes0);
      // Undeclared exception!
      try { 
        element0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.child((-1225));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("=$JIHHi(JfwSVE!V");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("k6CZ i|+8Jop$~|t");
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";!'0");
      CDataNode cDataNode0 = new CDataNode("mJltiple");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "w<}'`T8 {Nvl?mS", attributes0);
      PseudoTextElement pseudoTextElement1 = (PseudoTextElement)pseudoTextElement0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        pseudoTextElement1.before("class");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", " ");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("m|&gQ_f$", "m|&gQ_f$");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Tag tag0 = Tag.valueOf("or.jsoup.nodes.Element$1");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "or.jsoup.nodes.Element$1", (Attributes) null);
      FormElement formElement0 = new FormElement(tag0, "or.jsoup.nodes.Element$1", (Attributes) null);
      Element element0 = pseudoTextElement0.doClone(formElement0);
      // Undeclared exception!
      try { 
        element0.appendTo(formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", " ");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Tag tag0 = Tag.valueOf("p)e<-}45");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", (Attributes) null);
      pseudoTextElement0.appendTo(pseudoTextElement0);
      // Undeclared exception!
      pseudoTextElement0.appendElement("zd");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ScriptDataEscaped");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "h", attributes0);
      List<Node> list0 = pseudoTextElement0.childNodes();
      pseudoTextElement0.childNodes = list0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.appendElement("p/4");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("p", "RCDATAEndTagName");
      // Undeclared exception!
      try { 
        document0.appendElement(")z/YqK'D*asCF42%E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("UC#", "0bP8\"!N");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("m|&gQ_f$", "m|&gQ_f$");
      Element element0 = document0.head();
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput(":has", document0, "m|&gQ_f$");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = new Document("button");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("I:=5K}>p'Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "I:=5K}>p'Y,", attributes0);
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes0);
      Element element0 = pseudoTextElement0.doClone(formElement0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("I:=5WO>p'Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "#root", attributes0);
      // Undeclared exception!
      try { 
        element0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("ZbTI?e `>lj", "ZbTI?e `>lj");
      Element element0 = document0.head();
      element0.after((Node) document0);
      // Undeclared exception!
      element0.append("ub7hy&[u>B\"cz|u+");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("e'/", "W*<2T#s):FelQ");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H}4/*+Fzc%'", "org.jsoup.nodes.Element$2");
      DocumentType documentType0 = new DocumentType("button", "&lt;", "", "H}4/*+Fzc%'");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.append("=0#fsZ@8p");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("AfterDoctypublicIdentifer", "AfterDoctypublicIdentifer");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}R>aB5C>84\"w#45?;v", "}R>aB5C>84\"w#45?;v");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.after("hO[@*r3FUQQf");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Tag tag0 = Tag.valueOf("mKv(:");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "mKv(:", (Attributes) null);
      FormElement formElement0 = new FormElement(tag0, "mKv(:", (Attributes) null);
      PseudoTextElement pseudoTextElement1 = (PseudoTextElement)pseudoTextElement0.doClone(formElement0);
      // Undeclared exception!
      try { 
        pseudoTextElement1.after("b/I|f/>");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("b");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "dl", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "vD %Iw1p:xJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Element element0 = new Element("A(R'QCQo");
      element0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Element element0 = new Element("A(R'QCQo");
      element0.hasClass("A(R'QCQo");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "=&APi:{:zeqPh3");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("6[0", "6[0");
      Element element0 = document0.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("Z=QFI;D7Xi|OoRR");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("W1<s+EGT8Bg");
      Element element0 = new Element("button");
      Element element1 = element0.appendChild(textNode0);
      element1.hasText();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Tag tag0 = Tag.valueOf("m|&gQ_zf$");
      FormElement formElement0 = new FormElement(tag0, "']qEp{Kwd^Es?LK", (Attributes) null);
      formElement0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("I:=5K}>p'Y,", "org.jsoup.parser.HtmlTreeBuilder");
      Element element0 = document0.createElement("textarea");
      document0.appendTo(element0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*G#Z(", "");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")P|Ys$5BSi(Jgqb ", ")P|Ys$5BSi(Jgqb ");
      document0.appendChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = new Document("ub7hy&[u>B\"cz|u+");
      document0.appendTo(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("):=sB'P-d\"aoQ)", ":nth-child(%d)");
      Element element0 = document0.head();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hO[@*r3FUQQf", "hO[@*r3FUQQf");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")P|Ys$5BSi(Jgqb ", ")P|Ys$5BSi(Jgqb ");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("basefont", "button");
      Pattern pattern0 = Pattern.compile("m|&gQ_zf$", 14);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("area");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Element element0 = new Element("=&APi:{:zeqPh3");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("keygen");
      Pattern pattern0 = Pattern.compile("keygen");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("6[0", "6[0");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", "gWM\"@d~Xh5>%8K:DZ");
      Pattern pattern0 = Pattern.compile("gWM\"@d~Xh5>%8K:DZ", 21);
      document0.getElementsByAttributeValueMatching((String) null, pattern0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Element element0 = new Element("basefont");
      element0.select("basefont");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yI3wuyy\u0004$Fj");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "yI3wuyy\u0004$Fj", attributes0);
      pseudoTextElement0.id();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Tag tag0 = Tag.valueOf("or.jsoup.nodes.Element$1");
      FormElement formElement0 = new FormElement(tag0, "or.jsoup.nodes.Element$1", (Attributes) null);
      formElement0.classNames();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("legend");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      StringWriter stringWriter0 = new StringWriter(214);
      document0.outerHtmlTail(stringWriter0, 214, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", ":nth-child(%d)");
      CharBuffer charBuffer0 = CharBuffer.allocate(5);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Element element0 = new Element("button");
      element0.prependElement("button");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^aVsaoI> 'm.vv", "^aVsaoI> 'm.vv");
      Element element0 = new Element("img");
      Element element1 = document0.appendChild(element0);
      element1.outerHtml();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("or.jsoup.nodes.Element$1", "3L{JXzY4eI_Mc");
      MockFile mockFile0 = new MockFile("<_.YfBe.`1;{p?,");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(outputStreamWriter0, (-1848), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Element element0 = new Element("button");
      element0.val("button");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "=&APi:{:zeqPh3");
      Element element0 = document0.createElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Tag tag0 = Tag.valueOf("or.j5oup.nodes.Element$1");
      FormElement formElement0 = new FormElement(tag0, "or.j5oup.nodes.Element$1", (Attributes) null);
      formElement0.toggleClass("LTP$");
      formElement0.toggleClass("");
      formElement0.hasClass(":nth-child(");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("K1S%FNBC8~C}^mhAj^");
      FormElement formElement0 = new FormElement(tag0, "^aVsaoI> 'm.vv", attributes0);
      formElement0.toggleClass("children collection to be inserted must not be null.");
      formElement0.toggleClass("children collection to be inserted must not be null.");
      formElement0.hasClass("noscript");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" .+E3d/#/'w:rU^*");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "K1S%FNBC8~C}^mhAj^", attributes0);
      formElement0.toggleClass("sx~g^mH/c_+< 1G");
      formElement0.toggleClass(" .+E3d/#/'w:rU^*");
      formElement0.hasClass("sx~g^mH/c_+< 1G");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Tag tag0 = Tag.valueOf("or.jsoup.nodes.Element$1");
      FormElement formElement0 = new FormElement(tag0, "or.jsoup.nodes.Element$1", (Attributes) null);
      Element element0 = formElement0.toggleClass("basefont");
      element0.toggleClass("basefont");
      formElement0.hasClass("basefont");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Tag tag0 = Tag.valueOf("or.jsoup.nodes.Element$1");
      FormElement formElement0 = new FormElement(tag0, "or.jsoup.nodes.Element$1", (Attributes) null);
      formElement0.toggleClass("basefont");
      formElement0.hasClass("basefont");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("I:=5K}>p2?Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "CHr:Awbrj7a!*4Z", attributes0);
      formElement0.toggleClass("attributesinglevaluecharssorted");
      formElement0.hasClass("attributesinglevaluecharssorted");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Tag tag0 = Tag.valueOf("or.jsoup.nodes.Element$1");
      FormElement formElement0 = new FormElement(tag0, "or.jsoup.nodes.Element$1", (Attributes) null);
      formElement0.toggleClass("or.jsoup.nodes.Element$1");
      formElement0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")P|Ys$5BSi(Jgqb ", ")P|Ys$5BSi(Jgqb ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("I:=5WO>p'Y,", "q50z*");
      Document document1 = Parser.parseBodyFragmentRelaxed("I:=5WO>p'Y,", "b4n,8*sT&KXudxv");
      Element element0 = document1.head();
      element0.appendChild(document0);
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = new Document("*G#Z(");
      CDataNode cDataNode0 = new CDataNode("#data");
      document0.appendChild(cDataNode0);
      document0.getElementsMatchingOwnText("UC#");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.title("#");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("<html>\n <head></head>\n <body>\n  UC#\n </body>\n</html>", "");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", " ");
      Element element0 = document0.append("ub7hy&[u>B\"cz|u+");
      element0.getElementsContainingText("data-");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("tag name must not be empty. st$fq%(mpulz k1s%fnbc8~c}^mhaj^");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tag name must not be empty. st$fq%(mpulz k1s%fnbc8~c}^mhaj^", attributes0);
      Document document0 = Parser.parse("tag name must not be empty. st$fq%(mpulz k1s%fnbc8~c}^mhaj^", "br");
      pseudoTextElement0.appendTo(document0);
      pseudoTextElement0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ub7hy&[u>B\"cz|u+", "FiUnG<h;)");
      DataNode dataNode0 = new DataNode("FiUnG<h;)");
      document0.appendChild(dataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Element element0 = new Element("CKt(:");
      element0.getElementById("CKt(:");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("I:=5K}>p2?Y,", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "I:=5K}>p2?Y,", attributes0);
      FormElement formElement0 = new FormElement(tag0, "I:=5K}>p2?Y,", attributes0);
      Element element0 = pseudoTextElement0.doClone(formElement0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("C{8Kt(:", "C{8Kt(:");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("C{8Kt(:", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "C{8Kt(:", attributes0);
      Element element0 = pseudoTextElement0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yI3wuyy\u0004$Fj");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "yI3wuyy\u0004$Fj", attributes0);
      pseudoTextElement0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")P|Ys$5BSi(Jgqb ", ")P|Ys$5BSi(Jgqb ");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertFalse(elements0.isEmpty());
      assertEquals(")P|Ys$5BSi(Jgqb ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("T%\"}0 Uu{vJe7", "qRuVwYBbI[]{##P");
      document0.nextElementSibling();
      assertEquals("qRuVwYBbI[]{##P", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.wrap("q");
      String string0 = element0.cssSelector();
      assertEquals("Pattern syntax error: ", element0.baseUri());
      assertEquals("html > head:nth-child(2) > body:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "");
      document0.toggleClass("textarea");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("BM&5", "$|}V6{biyN'r");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren(905, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Node[] nodeArray0 = new Node[0];
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("i#", "i#");
      // Undeclared exception!
      try { 
        document0.insertChildren((-2640), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("K1S%FNBC8~C}^mhAj^");
      FormElement formElement0 = new FormElement(tag0, "^aVsaoI> 'm.vv", attributes0);
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
      try { 
        formElement0.insertChildren((-1416), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("IJ<", "IJ<");
      List<Node> list0 = Parser.parseXmlFragment("IJ<", "IJ<");
      // Undeclared exception!
      try { 
        document0.insertChildren(27, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("T%\"}0 Uu{vJe7", "qRuVwYBbI[]{##P");
      DataNode dataNode0 = new DataNode("", "NmoNH!BsL_Lg8k");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
      assertTrue(list0.contains(dataNode0));
      assertEquals("qRuVwYBbI[]{##P", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "=&APi:{:zeqPh3");
      document0.append("=&APi:{:zeqPh3");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Element element0 = new Element("textarea");
      Elements elements0 = element0.getElementsByIndexGreaterThan(2147483645);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^aVsaoI> 'm.vv", "^aVsaoI> 'm.vv");
      document0.selectFirst("img");
      assertEquals(1, document0.childNodeSize());
      assertEquals("^aVsaoI> 'm.vv", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("m|&gQ_zf$", "m|&gQ_zf$");
      document0.getAllElements();
      assertEquals("m|&gQ_zf$", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      // Undeclared exception!
      try { 
        document0.before("I:=5WO>p'Y,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Tag tag0 = Tag.valueOf("or.jsoup.nodes.Element$1");
      FormElement formElement0 = new FormElement(tag0, "or.jsoup.nodes.Element$1", (Attributes) null);
      formElement0.getElementsByAttribute("or.jsoup.nodes.Element$1");
      assertEquals("or.jsoup.nodes.Element$1", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Tag tag0 = Tag.valueOf("or.jsoup.nodes.Element$1");
      FormElement formElement0 = new FormElement(tag0, "or.jsoup.nodes.Element$1", (Attributes) null);
      formElement0.getElementsByAttributeValueNot("br", "inert");
      assertEquals("or.jsoup.nodes.Element$1", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell("I:=5WO>p'Y,");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("I:=5WO>p'Y,", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("se3pI@lRK1g?S,i", "}}^irVr;(`");
      document0.doSetBaseUri("}}^irVr;(`");
      assertEquals("}}^irVr;(`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")P|Ys$5BSi(Jgqb ", ")P|Ys$5BSi(Jgqb ");
      CDataNode cDataNode0 = new CDataNode(")P|Ys$5BSi(Jgqb ");
      // Undeclared exception!
      try { 
        document0.after((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypePublicIdentifier");
      document0.getElementsByAttributeValueEnding("header", "header");
      assertEquals(1, document0.childNodeSize());
      assertEquals("AfterDoctypePublicIdentifier", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Element element0 = new Element("button");
      boolean boolean0 = element0.is("button");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("IJ<", "IJ<");
      document0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element", "2PUqqq1");
      assertEquals("IJ<", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("area");
      Document document1 = (Document)document0.attr("", (String) null);
      assertEquals(1, document1.childNodeSize());
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      document1.childNodes = (List<Node>) linkedList0;
      document1.ensureChildNodes();
      assertEquals("area", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "T%\"}0 Uu{vJe7");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(3, elements0.size());
      assertEquals("T%\"}0 Uu{vJe7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C{8Kt(", "C{8Kt(");
      document0.getElementsByAttributeStarting("+v(~<Ws?:%5h2C0");
      assertEquals("C{8Kt(", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = new Document("?%^yNjW0eJZ");
      Element element0 = document0.prependElement("0?K&I|1`R%F(r{$7eGy");
      assertTrue(element0.hasParent());
      
      Elements elements0 = document0.getElementsByIndexLessThan(3237);
      assertEquals("?%^yNjW0eJZ", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = new Document("?%^yNjW0eJZ");
      document0.getElementsByIndexLessThan(3237);
      assertEquals("?%^yNjW0eJZ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Tag tag0 = Tag.valueOf("mKv(:");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "mKv(:", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.after("b/I|f/>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
      
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("Pattern syntax error: ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("#document", "#document");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("Children collection to be inserted must not be null.", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Document.createShell("[O2");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue((String) null, "[O2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypublicIdentifer");
      Element element0 = document0.attr("AfterDoctypublicIdentifer", true);
      assertEquals("AfterDoctypublicIdentifer", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Element element0 = new Element("=&APi:{:zeqPh3");
      element0.html("=&APi:{:zeqPh3");
      int int0 = element0.childNodeSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hO[@*r3FUQQf", "hO[@*r3FUQQf");
      String string0 = document0.wholeText();
      assertEquals("hO[@*r3FUQQf", string0);
      assertEquals("hO[@*r3FUQQf", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C{8Kt(:", "C{8Kt(:");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parse("ub7hy&[u>B\"cz|u+", "ub7hy&[u>B\"cz|u+");
      Elements elements0 = document0.getElementsContainingOwnText("");
      assertEquals("ub7hy&[u>B\"cz|u+", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[RK4,");
      CDataNode cDataNode0 = new CDataNode("',*F,C,p`/[<*$T");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      Map<String, String> map0 = pseudoTextElement0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = new Document("?%^yNjW0eJZ");
      Element element0 = document0.prependText("!ot 7");
      // Undeclared exception!
      try { 
        element0.child(3237);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3237, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Element element0 = new Element("CKt(:");
      // Undeclared exception!
      try { 
        element0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Element element0 = new Element("value");
      Elements elements0 = element0.getElementsMatchingText("uE/e &brPL2");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.wrap("q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
