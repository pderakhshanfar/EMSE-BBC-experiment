/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:39:00 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("DM");
      document0.siblingIndex = (-1841583946);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      document0.reparentChild(document0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.appendElement("href");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        element0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6LZ<dq2", "R]?)82w,5eS^D{P,|EH");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      document0.wrap("DI`=Lo8+");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "ktG:L,3s;");
      Element element0 = document0.head();
      element0.wrap("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("hv^ef");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("hOFtml", "6i2,E$',N");
      Element element0 = document0.head();
      element0.val("=f");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("href");
      document0.val("href");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      Element element0 = document0.body();
      element0.toggleClass("RawtextLessthanSign");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("6i2,E$',N", "ismap");
      document0.reparentChild(document0);
      document0.toggleClass("ismap");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ed?tRw3NUi~+-", "Y2W[AQ$XwMjJTteku");
      document0.empty();
      document0.toggleClass(" ");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.appendElement(">-6(R(,");
      element0.text("g 33(c9|pU,/$PL)");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "ktG:L,3s;");
      Element element0 = document0.head();
      element0.text("");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Element element0 = new Element("ktG:L,3s;");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'", "'");
      Element element0 = document0.appendElement("'");
      element0.tagName("'");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("o]Yz(iw$iy9t2]", " YnL~");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("fallbQc`");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sgjD*hGTVti/>`~", "sgjD*hGTVti/>`~");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Element element0 = new Element("a)q7'fBua8.uy{");
      element0.selectFirst("r");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("fallback", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      pseudoTextElement0.selectFirst("fallback");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'9!p/2sK<Giohi", "'9!p/2sK<Giohi");
      document0.select("id");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      document0.select("html");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$2");
      element0.siblingIndex = (-216);
      element0.removeClass("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("smap", "");
      Element element0 = document0.appendElement("c*KR3");
      Element element1 = element0.previousElementSibling();
      element1.removeClass(">-6(R(,");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("href", "href");
      Element element0 = document0.appendElement(">-6(R(,");
      element0.removeClass("DI`=Lo8+");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.prependText("3wg',");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      document0.appendTo(document0);
      document0.prependText("3wg',");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("5k_r3=]e@", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("5k_r3=]e@");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "^w /ly %j8996zp+z", attributes0);
      pseudoTextElement0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("ismap");
      Element element0 = document0.appendElement("ismap");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("pIx+]|m'L;LcgvP_{>&", "pIx+]|m'L;LcgvP_{>&");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.appendElement("href");
      element0.prepend("s;4");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("Ed?w3NUi9~+-", "Ed?w3NUi9~+-");
      document0.setSiblingIndex((-14522065));
      document0.prepend(",dm");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DM", "DM");
      Element element0 = document0.head();
      element0.prepend("y-#Bx!1I] HBBgOV*");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("fallbQc`", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "fallbQc`", attributes0);
      pseudoTextElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "ismap");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("ismap");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("ofR)&");
      Document document0 = parser0.parseInput((Reader) stringReader0, "ofR)&");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[%", "[%");
      Element element0 = document0.appendElement("Oy");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d%", "d%");
      Element element0 = document0.append("d%");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sgjD*hGTVti/>`~", "sgjD*hGTVti/>`~");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.appendElement("href");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("'9!p/2sK<Giohi");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2!0ya-Xu>", "2!0ya-Xu>");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("h2", "h2");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element element0 = new Element("br");
      element0.is("br");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      Element element0 = document0.appendTo(document0);
      Element element1 = document0.previousElementSibling();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) element1;
      nodeArray0[2] = (Node) element0;
      element1.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.appendElement("href");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.body();
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.appendElement("href");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = new Document("F L'^D|N]d");
      document0.setSiblingIndex((-175));
      document0.html("value");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q4~l");
      Element element0 = new Element(tag0, "");
      element0.html("");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "StartTag");
      MockFileWriter mockFileWriter0 = new MockFileWriter("body", true);
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("href");
      Element element0 = document0.appendElement(">-6(R(,");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" >T6b/4U`6", " >T6b/4U`6");
      document0.getElementsByAttributeValueMatching("kac", "kac");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'9!p/2sK<Giohi", "'9!p/2sK<Giohi");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("href", "href");
      document0.text("c*KR3");
      document0.getElementsMatchingText("c*KR3");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Pattern pattern0 = Pattern.compile("/>");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      Pattern pattern0 = Pattern.compile("", 2033);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsContainingText("[%s]");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q4~l");
      Element element0 = new Element(tag0, "");
      element0.getElementsByTag("q4~l");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.getElementsByIndexLessThan(48);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DM", "DM");
      document0.getElementsByIndexGreaterThan((-2367));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q4~l");
      Element element0 = new Element(tag0, "");
      element0.getElementsByAttributeValueStarting("value", "QQp^AT{JMv.~_}xE_$");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ktG:L,3s;", "ktG:L,3s;");
      document0.getElementsByAttributeValueNot("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ed?tRw3NUi~+-", "Y2W[AQ$XwMjJTteku");
      document0.getElementsByAttributeValueEnding(" ", " />");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      document0.getElementsByAttributeValueContaining(" >mV5V0VHXnde", "c:o6d#=p3I[_h7MU");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.attr("n7}d|?^H FCh>x$i|", "org.jsoup.parser.XmlTreeBuilder");
      element0.getElementsByAttributeStarting("n7}d|?^H FCh>x$i|");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      Element element0 = document0.appendElement("~7$");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("SrK)OK}sw1y", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "5[^< 6Y&A`!s#X$NA~", (Attributes) null);
      formElement0.setSiblingIndex((-1621));
      formElement0.empty();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      document0.tagName("body");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      Element element0 = document0.appendElement("~7$");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("d%", "d%");
      Element element0 = document0.appendElement("Oy");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$2");
      element0.siblingIndex = (-216);
      Document document0 = Parser.parseBodyFragmentRelaxed("j)", "org.jsoup.nodes.Element$2");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("CdnX`dVza/UB)znj8", "}X%Jzy0XI< \",J6Mj");
      Element element0 = document0.body();
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Vd%", "Vd%");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("lfQa(<", "br");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3wg',", "3wg',");
      Element element0 = document0.appendTo(document0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("npmp", "npmp");
      Element element0 = document0.head();
      Locale locale0 = new Locale("%hjzhPBr[K$IdU", "cl\"u&zddbr\">-eam3o", "ScriptDataDoubleEscapedDashDash");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      document0.addClass(")_R");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("id", "id");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.className();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q4~l");
      Element element0 = new Element(tag0, "");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ktG:L,3s;", "ktG:L,3s;");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("href");
      Element element0 = document0.appendElement(">-6(R(,");
      Element element1 = element0.val("Q@yf\"ab");
      element1.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("1|D", ":nth-child(%d)");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[%s]", "[%s]");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("ismap");
      Element element0 = document0.appendElement(">-6(R(,");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d%", "d%");
      Element element0 = document0.appendElement("Oy");
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("smap", "AG&$");
      Element element0 = document0.body();
      element0.before("]e[[Nv");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("Children collection to be inserted must not be null.");
      element0.attr("org.jsoup.parser.XmlTreeBuilder", "n7}d|?^H FCh>x$i|");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.appendElement("href");
      element0.attr("", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("*");
      Element element0 = document0.head();
      element0.attr("*", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'8O|", "e9/R]tt&");
      Element element0 = document0.appendElement("'8O|");
      element0.attr("'8O|", "Ofx?(h7!8_s'dL");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.attr("<html>\n <head></head>\n <body></body>\n</html>", "4If3~?t29ks");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.appendElement(">-6(R(,");
      Element element1 = element0.addClass("href");
      Element element2 = element1.previousElementSibling();
      element2.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      Element element0 = new Element("ismap");
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.body();
      element0.appendText("9I$cA_6Ti~jp#f!iY Y");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("3wg',");
      document0.appendTo(document0);
      document0.appendText("marquee");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("fallbQc`");
      Element element0 = document0.appendElement("textarea");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("[%s]");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      Element element0 = document0.appendTo(document0);
      Element element1 = document0.previousElementSibling();
      element1.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sequence", "sequence");
      document0.siblingIndex = (-1048);
      document0.append("java.lang.string@0000000094");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("3wg',");
      Document document1 = document0.clone();
      Element element0 = document1.appendTo(document0);
      Element element1 = element0.previousElementSibling();
      element1.append("</");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("3wg',");
      Document document1 = document0.clone();
      Element element0 = document1.appendTo(document0);
      element0.append("</");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$NodeList", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Element$NodeList", attributes0);
      pseudoTextElement0.append("");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Vd%", "Vd%");
      Element element0 = document0.appendElement("Oo");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("href", "href");
      Element element0 = document0.appendElement(">-6(R(,");
      Element element1 = element0.previousElementSibling();
      element1.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("href", "textarea");
      Element element0 = document0.head();
      element0.after("E/JrnY\u0003.: I");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d%", "d%");
      Element element0 = document0.appendElement("Oy");
      element0.after("h2");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Document document1 = document0.clone();
      document1.reparentChild(document0);
      document0.after("");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("DM");
      document0.siblingIndex = (-1841583946);
      document0.addClass("DM");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("smap", "");
      Element element0 = document0.body();
      element0.addClass("ScriptDataEscapedEndTagName");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.wrap("</");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("L;\" r>Hfq}S1:^bm5O");
      // Undeclared exception!
      try { 
        document0.wrap("L;\" r>Hfq}S1:^bm5O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.val("#6mYev{DX?$l%@m6");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[4];
      attributes0.keys = stringArray0;
      Tag tag0 = Tag.valueOf("fallbQc`", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "fallbQc`", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("fallbQc`");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("Xn{NRwyF|u:");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      // Undeclared exception!
      try { 
        document0.text("Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("smap", "");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DM", "DM");
      CDataNode cDataNode0 = new CDataNode("DM");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DM", "DM");
      Element element0 = document0.appendElement("DM");
      element0.setSiblingIndex((-894));
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "ismap");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("ismap");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Tag tag0 = Tag.valueOf("html");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.Selector", attributes0);
      pseudoTextElement0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">-6(r(,", ":w|J.-l4{TxNfe\"X7m");
      // Undeclared exception!
      try { 
        document0.selectFirst(":w|J.-l4{TxNfe\"X7m");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':w|J.-l4{TxNfe\"X7m': unexpected token at ':w|J.-l4{TxNfe\"X7m'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&f", "&f");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6LZ<dq2", "R]?)82w,5eS^D{P,|EH");
      // Undeclared exception!
      try { 
        document0.select("R]?)82w,5eS^D{P,|EH");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'R]?)82w,5eS^D{P,|EH': unexpected token at ']?)82w,5eS^D{P,|EH'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("source", "source");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%mwR`q_f3u", "&FKy&)<i3KNZv-");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#document", true);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("HP%h:Uw,hg+", "HP%h:Uw,hg+");
      TextNode textNode0 = new TextNode("HP%h:Uw,hg+", "HP%h:Uw,hg+");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Element element0 = new Element("Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        element0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "ismap");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prependElement("#root");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("fallback", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("P&T", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "N6L;5dF@dUVu_2", attributes0);
      TextNode textNode0 = TextNode.createFromEncoded("P&T", "S>`RcdD7sD<']*\"");
      Element element0 = pseudoTextElement0.doClone(textNode0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.prependChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("}e;", "}e;");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "ismap");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("ismap");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("6i2,E$',N", "ismap");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L]3zgfu>,VZbhr", "L]3zgfu>,VZbhr");
      DataNode dataNode0 = new DataNode("Insert position out of bounds.");
      Document document1 = (Document)document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        document1.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "extended");
      Document document1 = (Document)document0.append("(");
      DataNode dataNode0 = DataNode.createFromEncoded("extended", "html");
      document1.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.ownText();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'rJzW", "=o");
      MockFile mockFile0 = new MockFile(".v]l5cQsOOlS_~");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(2760);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 97, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DM", "DM");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "DM");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 912, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TL]3vgfr>H.Zbhr", "TL]3vgfr>H.Zbhr");
      MockFile mockFile0 = new MockFile("TL]3vgfr>H.Zbhr", "TL]3vgfr>H.Zbhr");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(98688);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 98688, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("}e;", "}e;");
      StringBuilder stringBuilder0 = new StringBuilder("rvi%$");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder0, 1403, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("Ohtml");
      StringBuilder stringBuilder0 = new StringBuilder("Ohtml");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder0, (-1639483211), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      stringBuilder0.append(true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(8192);
      // Undeclared exception!
      document0.outerHtmlHead(stringBuilder0, (-1436010313), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("TL]3vgfr>TKH.Zbhr", "TL]3vgfr>TKH.Zbhr");
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 37, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("V$3W%d<M&jXf:!C[dS5", parseSettings0);
      Element element0 = new Element(tag0, "#root");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead((Appendable) null, 32, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("8Vc4C:&mb8", "8Vc4C:&mb8");
      MockPrintStream mockPrintStream0 = new MockPrintStream("8Vc4C:&mb8", "US-ASCII");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-1432352094), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      document0.reparentChild(document0);
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild((-2278), 2806);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsNthChild0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("[%s]");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("anllbQc`", "anllbQc`");
      // Undeclared exception!
      try { 
        document0.is("<br><br></br>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<br><br></br>': unexpected token at '<br><br></br>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "ismap");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("ismap");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("href", "href");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-2), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "ismap");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html("C4mU~gK");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("~", "");
      document0.reparentChild(document0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("z");
      // Undeclared exception!
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("L]3vgfr>H.Zbhr", "L]3vgfr>H.Zbhr");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "L]3vgfr>H.Zbhr");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Document.createShell("DM");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.insertChildren(0, nodeArray0);
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("}e;", "}e;");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Oy", "Oy");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("5,7", "5,7");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6LZ<dq2", "R]?)82w,5eS^D{P,|EH");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("R]?)82w,5eS^D{P,|EH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: R]?)82w,5eS^D{P,|EH
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lc|yE_MNtDCu?;O>X", "lc|yE_MNtDCu?;O>X");
      Comment comment0 = new Comment("DoctypePublicIdentifier_singleQuoted", "DoctypePublicIdentifier_singleQuoted");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("C'kQ;e@6P");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("%)<R,CkRGHX9,", "(R;nvQIqi$");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("%)<R,CkRGHX9,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: %)<R,CkRGHX9,
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ismap", "ismap");
      document0.siblingIndex = (-1574);
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("ismap");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Element element0 = new Element("Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        element0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      CDataNode cDataNode0 = new CDataNode("'");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-1656));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("T]3vg@Rfl>H.Zb\r");
      DocumentType documentType0 = new DocumentType(",dm", "T]3vg@Rfl>H.Zb\r", "autofocus");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexEquals(1491);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("source", "source");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", ":has(");
      Element element0 = document0.head();
      element0.setSiblingIndex((-3527));
      // Undeclared exception!
      try { 
        document0.getElementsByClass("textarea");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "Object must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s+");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("s+", true);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "s+", attributes1);
      attributes1.keys = null;
      Pattern pattern0 = Pattern.compile("ew");
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueMatching("", pattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q4~l");
      Element element0 = new Element(tag0, "q4~l");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "ktG:L,3s;");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Pattern syntax error: ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(" ");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "_a6P@|BM@ZD", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("Pattern syntax error: ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q4~l");
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue("", "GRephh.7B7q%dvO;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parse("w#g/d,|w|", "w#g/d,|w|");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("$k)lr%hk\"/Z52=O");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q4~l");
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ext^ended", "ext^ended");
      document0.reparentChild(document0);
      document0.siblingIndex = (-1436010313);
      // Undeclared exception!
      try { 
        document0.getElementById("r!>1P:AuW1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      List<Node> list0 = Parser.parseFragment("s+", (Element) document0, "sdquence");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.empty();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sequence", "sequence");
      CDataNode cDataNode0 = new CDataNode("sequence");
      cDataNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      // Undeclared exception!
      try { 
        document0.child(62);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 62, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "   ");
      // Undeclared exception!
      try { 
        document0.child((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("", "ktG:,3s;");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.before("");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "ismap");
      TextNode textNode0 = TextNode.createFromEncoded("ismap", "ismap");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.before("ismap");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("3wg',");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse(":nth-child(%d)", ":nth-child(%d)");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("t=fQ q{2WK{+}5bD", "BeforeDoctypePublicIdentifier");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("'9!p/2sK<Giohi");
      document0.appendTo(document0);
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement("ismap");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.appendElement("href");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.appendElement("r)TE3|9ldS(ZW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q4~l");
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
      try { 
        element0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = new Document("\"h;u3wK*i1Fnh~Lge");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "ismap");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.append("'$>X423>");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("HDRM", "HDRM");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("HDRM", document0, "HDRM");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.append("HDRM");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("&f");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3wg',", "3wg',");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("j=$+8|](=", "@VINMn(?HUzx^#Q");
      Document document1 = new Document("FmQlRlGvC");
      document0.setParentNode(document1);
      // Undeclared exception!
      try { 
        document0.after("[sf-Le0TkC~Vh]/mGz");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "Tag name must not be empty.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("href");
      Element element0 = document0.appendElement(">-6(R(,");
      element0.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("HDRM", "HDRM");
      document0.addClass("HDRM");
      document0.toggleClass("_RLm>uv}I!DcJhxu=>;");
      document0.hasClass("_RLm>uv}I!DcJhxu=>;");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ed?tRw3NUi~+-", "Y2W[AQ$XwMjJTteku");
      document0.addClass("'\"!@2y\fW`B^~l");
      document0.toggleClass(" ");
      document0.hasClass("'\"!@2y\fW`B^~l");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ed?tRw3NUi~+-", "Ed?tRw3NUi~+-");
      document0.addClass("Ed?tRw3NUi~+-");
      document0.toggleClass("Ed?tRw3NUi~+-");
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell("DM");
      document0.hasClass("DM");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("smap", "AG&$");
      Element element0 = document0.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("odd", ":%s(%d)");
      document0.prepend(" ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = new Document("3g',");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*", "*");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      document0.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("href");
      Element element0 = document0.appendElement(">-6(R(,");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("CdnX`dVza/UB)znj8", "}X%Jzy0XI< \",J6Mj");
      Element element0 = document0.body();
      element0.html("CdnX`dVza/UB)znj8");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("j=$+8|](=", "@VINMn(?HUzx^#Q");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d%", "d%");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      Pattern pattern0 = Pattern.compile("#root");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("href");
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType((-795), (-50));
      document0.is((Evaluator) evaluator_IsNthOfType0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("Ohtml");
      Pattern pattern0 = Pattern.compile("Ohtml");
      document0.getElementsByAttributeValueMatching("Ohtml", pattern0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("", "ktG:L,3s;");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("POST", "POST");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "ktG:L,3s;");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZQ,", "ZQ,");
      StringBuffer stringBuffer0 = new StringBuffer("ZQ,");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuffer0, (-651), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prependElement("br");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("allbQc`", "allbQc`");
      Element element0 = document0.appendElement("br");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.html((StringWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document0 = Parser.parse("RL^nLZ`Er>", "");
      document0.outerHtmlHead(stringBuilder0, 1890, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`#", "`#");
      document0.addClass("DM");
      document0.addClass("!");
      document0.toggleClass("!");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W5F7?,K()b^y", "W5F7?,K()b^y");
      document0.addClass("br");
      document0.addClass("");
      document0.getElementsByClass("fallbQc`");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sequence", "sequence");
      document0.addClass("-/pG.[T7,/=PU");
      document0.addClass("org.jsoup.nodes.Element$2");
      document0.toggleClass("EE|@Q7L]");
      document0.hasClass("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("DM");
      document0.addClass("s+");
      document0.addClass("Queue not long enough to consume sequence");
      document0.getElementsByClass("s+");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Document.createShell("DM");
      Element element0 = document0.addClass("s+");
      document0.addClass("s+");
      element0.getElementsByClass("s+");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("DM");
      Element element0 = document0.addClass("s+");
      element0.getElementsByClass("s+");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = new Document("DcAM");
      document0.addClass("3XSM>5X;yiE{V");
      document0.hasClass("Queue not long enough to consume sequence");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.parser.ParseError");
      CDataNode cDataNode0 = new CDataNode("mark");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "mark", attributes0);
      Element element1 = element0.prependChild(cDataNode0);
      element1.data();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5\"+DBw! <!{m", "8y}a");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "ez83guyyk z");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ismap", "ismap");
      document0.reparentChild(document0);
      document0.getElementsContainingText("ismap");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lc|yE_MNtDCu?;O>X", "lc|yE_MNtDCu?;O>X");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("extended", "extended");
      CDataNode cDataNode0 = new CDataNode("extended");
      document0.prependChild(cDataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Vd%", "Vd%");
      document0.title("Oo");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("textarea", "textarea");
      Comment comment0 = new Comment("textarea", "H)Pag|+:YG0JN'7/");
      Element element0 = document0.appendChild(comment0);
      element0.getElementsContainingOwnText("oW#t");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "L;\" r>Hfq}S1:^bm5O");
      document0.append("#");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("Mb-2k0 ", "Mb-2k0 ");
      document0.append("{!cSh m<cSo'bQo+I~");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("anllbQc`", "anllbQc`");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("Ed?w3NUi9~+-", "Ed?w3NUi9~+-");
      document0.prepend(",dm");
      document0.getElementsMatchingText("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.prependChild(dataNode0);
      document0.getElementsContainingText("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ktG:L,3s;", "ktG:L,3s;");
      document0.getElementById("K;<T9wk");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.reparentChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("L;\" r>Hfq}S1:^bm5O");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "");
      document0.reparentChild(document0);
      Document document1 = document0.clone();
      document1.appendTo(document0);
      document0.nextElementSiblings();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ed?tRw3NUi~+-", "Ed?tRw3NUi~+-");
      document0.nextElementSibling();
      assertEquals("Ed?tRw3NUi~+-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell("href");
      Element element0 = document0.appendElement(">-6(R(,");
      element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("ismap");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      element0.before("Cg#0yM7`sPFG!v");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Element element0 = document0.addClass(")_R");
      element0.cssSelector();
      assertEquals("href", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("href", "href");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(2198, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1799611916), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'9!p/2sK<Giohi", "'9!p/2sK<Giohi");
      Elements elements0 = document0.getElementsMatchingOwnText("org.jsoup.helper.ChangeNotifyingArrayList");
      // Undeclared exception!
      try { 
        document0.insertChildren(49, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("href");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        document0.insertChildren((-50), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = new Document("3g',");
      List<DataNode> list0 = document0.dataNodes();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) list0);
      assertEquals("3g',", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.prependChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "href");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("href", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("%)<R,CkRGHX9,", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      DataNode dataNode0 = DataNode.createFromEncoded("meta[charset]", "3wg',");
      document0.prependChild(dataNode0);
      document0.appendTo(document0);
      document0.previousElementSibling();
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      Elements elements0 = document0.getElementsByIndexGreaterThan(6);
      assertEquals(1, document0.childNodeSize());
      assertEquals("3wg',", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ez83guyyk z", "body");
      Element element0 = document0.selectFirst("body");
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      document0.getElementsByTag("3wg',");
      assertEquals("3wg',", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse("", "ktG:,3s;");
      // Undeclared exception!
      try { 
        document0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "ismap");
      document0.getElementsByAttribute("ismap");
      assertEquals("ismap", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("     ", "     ");
      Elements elements0 = document0.getElementsByAttributeValueNot("3YL9E9Xk8[$ !so)cB", "     ");
      assertEquals(1, document0.childNodeSize());
      assertEquals("     ", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.after("org.jsoup.parser.Token$Character");
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sgjD*hGTVti/>`~", "sgjD*hGTVti/>`~");
      Element element0 = document0.shallowClone();
      assertEquals("sgjD*hGTVti/>`~", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parse("lfQa(<", "br");
      Element element0 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(element0, document0);
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      document0.doSetBaseUri("%)<R,CkRGHX9,");
      assertEquals("%)<R,CkRGHX9,", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3wg',", "3wg',");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Document.createShell("[%s]");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("[%s]", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("+?-WbgL", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Document.createShell("href");
      document0.is("org.jsoup.Jsoup");
      assertEquals("href", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("%)<R,CkRGHX9,", "%)<R,CkRGHX9,");
      document0.getElementsByAttributeValueMatching("%)<R,CkRGHX9,", "id");
      assertEquals("%)<R,CkRGHX9,", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sequence", "sequence");
      Elements elements0 = document0.getElementsMatchingOwnText(".");
      assertEquals(1, elements0.size());
      assertEquals("sequence", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Vd%", "Vd%");
      Elements elements0 = document0.getElementsByIndexEquals(5050);
      assertEquals(0, elements0.size());
      assertEquals("Vd%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("w#g/d,|w|", "w#g/d,|w|");
      document0.getElementsByAttributeStarting("$k)lr%hk\"/Z52=O");
      assertEquals("w#g/d,|w|", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DM", "DM");
      Elements elements0 = document0.getElementsByIndexLessThan((-2367));
      assertEquals("DM", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.parser.Token$Character");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("ismap", "ismap");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell("*");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("*", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Document.createShell("href");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("Q@yf\"ab", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      document0.getElementsByAttributeValue("u}GhLeR/{(", "Insert position out of bounds.");
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Document.createShell("*");
      Element element0 = document0.attr("*", true);
      assertEquals("*", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("d%", "d%");
      document0.wholeText();
      assertEquals("d%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Document.createShell("ismap");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val(".|aO'");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ed?tRw3NUi~+-", "Ed?tRw3NUi~+-");
      document0.addClass("Ed?tRw3NUi~+-");
      boolean boolean0 = document0.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
      assertEquals("Ed?tRw3NUi~+-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parse("CdnX`dVza/UB)znj8", "}X%Jzy0XI< \",J6Mj");
      Elements elements0 = document0.getElementsContainingOwnText("CdnX`dVza/UB)znj8");
      assertEquals("}X%Jzy0XI< \",J6Mj", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ktG:L,3s;", "ktG:L,3s;");
      document0.dataset();
      assertEquals("ktG:L,3s;", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "ktG:L,3s;");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.text("");
      assertEquals("ktG:L,3s;", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      document0.prependText("3wg',");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3wg',", "3wg',");
      document0.prependElement("_mD^Mnx?sj2kk,m$*");
      document0.appendTo(document0);
      document0.previousElementSibling();
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Tag tag0 = Tag.valueOf("R/x:Ycj");
      Element element0 = new Element(tag0, "org.jsoup.helper.W3CDom");
      element0.appendText("R/x:Ycj");
      assertEquals(1, element0.childNodeSize());
  }
}
