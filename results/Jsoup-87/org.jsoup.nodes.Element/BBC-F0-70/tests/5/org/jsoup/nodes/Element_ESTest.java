/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:25:56 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Yv (QOL&<i>9", "</");
      document0.toggleClass("Object must not be null");
      document0.toggleClass("Object must not be null");
      document0.getElementsByClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("-_.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element1.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`b", "Yo`b");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(stringBuilder0, 0, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+Xt|v0L%H5|@>.j<", "d+Xt|v0L%H5|@>.j<");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("Yo`+b");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "");
      Element element0 = document0.body();
      element0.wrap("jV_W!'#g_T|wm>/q.");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Element element0 = new Element("KHnv^5L");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexLessThan");
      Element element0 = document0.body();
      element0.val("");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      Element element0 = document0.appendElement("K@n>^5L");
      element0.val("]AE)E+");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("K@n>^5L");
      Element element0 = document0.body();
      element0.toggleClass("K@n>^5L");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000089", "java.lang.string@0000000089");
      document0.setSiblingIndex((-1861));
      document0.toggleClass("java.lang.string@0000000089");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.body();
      element0.text("-_.}&Ct/1/5Eb.DPK:7");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "Yo`+b");
      document0.text("textarea");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", " />");
      Element element0 = document0.createElement(" />");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("-->");
      document0.normalise();
      Element element0 = document0.body();
      element0.tagName("G7GA{twU6/?A+:U");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sZi=`5#A,v$7(", "~");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell("4v (Q6L&<r>;");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sZi=`5#A,v$7(", "~");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      CDataNode cDataNode0 = new CDataNode("Ttj%#6]");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "zxL1X|[", attributes0);
      formElement0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("K@n>^5L");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"^SV-\"A_OSO,9B", "k*'s2h+");
      document0.select("zJFoSK7qdKaaAu0");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+Xt|v0L%H5|@>.j<", "d+Xt|v0L%H5|@>.j<");
      Element element0 = document0.appendElement("X[y4i`fh8Zt");
      element0.removeClass("X[y4i`fh8Zt");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("yrn.y!t\"wb)");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.siblingIndex = (-1224);
      document0.removeClass("R");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+Xt|v0L%H5|@>.j<", "d+Xt|v0L%H5|@>.j<");
      Element element0 = document0.head();
      element0.removeClass("X[y4i`fh8Zt");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("U&*/3AatyU|Cg", "U&*/3AatyU|Cg");
      Element element0 = document0.body();
      element0.prependText("p4p?s8q");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      Element element0 = document0.appendElement("K@n>^5L");
      element0.prependText("*|");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      document0.prependText("*|");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^#", "^#");
      document0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>!", "Yv (QOL&<i>!");
      Element element0 = document0.appendElement("id");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("q ^r7([9Zo2GA$Z;");
      Element element0 = document0.body();
      element0.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "sub");
      Document document1 = new Document(" ");
      document1.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      Element element0 = document0.body();
      element0.prepend("t:j*Z");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("yrn.y!t\"wb)");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.siblingIndex = (-1224);
      document0.prepend("R");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Element element0 = new Element("body");
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("Yv (QOL&<i>9");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("^=", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "a:q%UufC-e4", attributes0);
      Element element0 = formElement0.appendElement("[<i3bd'/gnxc#'j~g");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("q ^r7([9Zo2GA$Z;", "q ^r7([9Zo2GA$Z;");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      document0.appendText("t:j*Z");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+Xt|v0L%H5|@>.j<", "d+Xt|v0L%H5|@>.j<");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.appendElement("");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "sub");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Element element0 = new Element("loGaXF)PU!U");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      element0.is((Evaluator) evaluator_IsRoot0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^R", "");
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      document0.is((Evaluator) evaluator_IsFirstOfType0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>!", "Yv (QOL&<i>!");
      Document document1 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>!", "Yv (QOL&<i>!");
      Element element0 = document1.head();
      Element element1 = element0.after((Node) document0);
      element1.is("head");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&)>9", "</");
      Element element0 = document0.head();
      element0.after((Node) document0);
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      Element element0 = document0.appendText("Yv (QOL&<i>9");
      Elements elements0 = element0.getElementsContainingText("Yv (QOL&<i>9");
      element0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = new Document("#root");
      Elements elements0 = document0.getElementsContainingText(" ");
      document0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000089", "java.lang.string@0000000089");
      Element element0 = document0.appendElement("Kg]SGW");
      element0.siblingIndex = (-1);
      element0.html("java.lang.string@0000000089");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.body();
      element0.html("");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$AttributeWithValueContaining", "org.jsoup.select.Evaluator$AttributeWithValueContaining");
      StringBuilder stringBuilder0 = new StringBuilder("");
      document0.html(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Element element0 = new Element("Tg%le~38ZnR;\"8DJ");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      document0.hasClass("Jp S;Uy/S)r:l4VcF");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rN<>", "UP-,6$E");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "sub");
      Pattern pattern0 = Pattern.compile("sub", 60);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m>@;_>tsu", "7<G6");
      document0.getElementsMatchingText("m>@;_>tsu");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Element element0 = new Element("Tg%le~38ZnR;\"8DJ");
      Pattern pattern0 = Pattern.compile("");
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      document0.getElementsMatchingOwnText("t:j*Z");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexLessThan");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "sub");
      document0.getElementsByTag("          ");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("Yv (QOL&)>9");
      Element element0 = document0.appendElement("Yv (QOL&)>9");
      element0.getElementsByTag("Yv (QOL&)>9");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "Yo`+b");
      document0.getElementsByIndexLessThan((-995));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsByIndexGreaterThan(58);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&)>9", "</");
      document0.getElementsByIndexEquals((-995));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      document0.getElementsByAttributeValueNot("GRZKx", "             ");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "Yo`+b");
      document0.getElementsByAttributeValueMatching("textarea", "");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>9", "</");
      Element element0 = document0.attr("</", "#document");
      element0.getElementsByAttributeValueMatching("</", "#document");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      document0.getElementsByAttributeValueEnding("#", "x[y4i`fh8zt");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("tugMa;P&MRB=k1");
      document0.attr("tugMa;P&MRB=k1", "tugMa;P&MRB=k1");
      document0.getElementsByAttributeValueContaining("tugMa;P&MRB=k1", "tugMa;P&MRB=k1");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(":\" AtRK1l~i", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(":\" AtRK1l~i", ":\" AtRK1l~i");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":\" AtRK1l~i", attributes1);
      pseudoTextElement0.getElementsByAttributeStarting(":\" AtRK1l~i");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+Xt|v0L%H5|@>.j<", "d+Xt|v0L%H5|@>.j<");
      document0.getElementsByAttribute("d+Xt|v0L%H5|@>.j<");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("$^hm", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("-=P=^&C6>P{k{jNEo,", "YS-");
      FormElement formElement0 = new FormElement(tag0, "YS-", attributes1);
      formElement0.getElementsByAttribute("-=P=^&C6>P{k{jNEo,");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      Element element0 = document0.appendElement("K@n>^5L");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("yrn.y!t\"wb)");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.siblingIndex = (-1224);
      document1.empty();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      document0.setSiblingIndex((-3076));
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h't", "org.jsoup.select.Evaluator$IndexLessThan");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("K@n>^5L");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Jzi^A''dM=lANKoCp&", "value");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.body();
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("Qm6b]dAZaaX/ZN=");
      document0.setSiblingIndex((-2658));
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("p^", "Y");
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Element element0 = document0.head();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("Yo`+b");
      document0.toggleClass("( B");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p^", "p^");
      document0.toggleClass("p^");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("Ce", "p^");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      CDataNode cDataNode0 = new CDataNode("qU0']$E=vtSb7l6,");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "qU0']$E=vtSb7l6,", attributes0);
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$AttributeWithValueContaining", "org.jsoup.select.Evaluator$AttributeWithValueContaining");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("-_R.}&Ct/1/5Eb.DPK:7");
      Document document1 = (Document)document0.doClone(document0);
      document1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^=", "^=");
      Element element0 = document0.body();
      element0.before("^=");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "Yo`+b");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("p^", "Y");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      Element element0 = document0.body();
      element0.attr("t:j*Z", true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>!", "Yv (QOL&<i>!");
      Element element0 = document0.head();
      element0.attr("Yv (QOL&<i>!", false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("Initial");
      Element element0 = document0.body();
      element0.siblingIndex = (-4223);
      element0.attr("value", "Initial");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>9", "</");
      Element element0 = document0.body();
      element0.attr("</", "#document");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexLessThan");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      document0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("q ^r7([9Zo2GA$Z;", "q ^r7([9Zo2GA$Z;");
      document0.setSiblingIndex((-3506));
      document0.appendText("q ^r7([9Zo2GA$Z;");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.body();
      element0.appendText("v7^V{4\"||qI}B_97:f");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "org.jsoup.select.Evaluator$IndexLessThan");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Element element0 = new Element("nPMw;");
      Document document0 = Document.createShell("nPMw;");
      Element element1 = document0.head();
      element1.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("q ^r7([9Zo2GA$Z;");
      Element element0 = document0.body();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^=", "^=");
      Element element0 = document0.appendElement("^=");
      element0.after((Node) document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      Element element0 = document0.appendElement("K@n>^5L");
      element0.after("K@n>^5L");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      document0.setSiblingIndex((-3076));
      document0.addClass("#root");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Element element0 = new Element("id");
      element0.addClass("Wf1st}qs");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "org.jsoup.nodes.Element");
      Element element0 = document0.appendElement("?");
      element0.before((Node) document0);
      // Undeclared exception!
      element0.wrap("Yv (QOL&)>9");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "t");
      Element element0 = document0.head();
      element0.siblingIndex = 270;
      // Undeclared exception!
      try { 
        element0.wrap("#root");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 270, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("Yo`+b", "Yo`+b");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.settings((ParseSettings) null);
      Document document0 = parser0.parseInput("ZV/cWdAWnb", "#");
      // Undeclared exception!
      try { 
        document0.val("#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Element element0 = new Element("Yv (QOL&)>9");
      // Undeclared exception!
      try { 
        element0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = new Document("K@n>^5L");
      // Undeclared exception!
      try { 
        document0.text(":");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("-_R.1&Ct/1/5Eb.DPK:7");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("marquee");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zl)*s$DgTA0wV", "");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("Yo`+b");
      DataNode dataNode0 = DataNode.createFromEncoded(":last-of-type", ",_");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.selectFirst("s.x]n4\"&(`=2");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 's.x]n4\"&(`=2': unexpected token at ']n4\"&(`=2'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("", "</");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$AttributeWithValueContaining", "org.jsoup.select.Evaluator$AttributeWithValueContaining");
      // Undeclared exception!
      try { 
        document0.select("org.jsoup.select.Evaluator$AttributeWithValueContaining");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Evaluator$AttributeWithValueContaining': unexpected token at '$AttributeWithValueContaining'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "Yo`+b");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      CDataNode cDataNode0 = new CDataNode("K@n>^5L");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("EK/Of2Ex5fNlF@", "-5&\"$z,9@rA3<TXoo u");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("qYX=<;B1m", "qYX=<;B1m");
      Element element0 = document0.createElement("B*5c*0je)cg_wabhlC*");
      List<Node> list0 = element0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prependChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Element element0 = new Element(tag0, "$%pt#-MIl>lVnA]");
      CDataNode cDataNode0 = new CDataNode("sW5F>C");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        element0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("Yv (QOL&<i>9");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      Element element0 = document0.head();
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      element1.prepend("K@n>^5L");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("{e", "/CP:<uJxCW--");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document("E[~uwg^");
      MockFile mockFile0 = new MockFile(":last-child", "Insert position out of bounds.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, 3, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Bava.lrtg.Htring@|000000089", "Bava.lrtg.Htring@|000000089");
      MockFile mockFile0 = new MockFile((File) null, "`cB");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, (-2008), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "Yo`+b");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 98688, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("ScriptDataDoubleEscapeStart", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("ScriptDataDoubleEscapeStart");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "ScriptDataDoubleEscapeStart", attributes0);
      MockFile mockFile0 = new MockFile((File) null, "#");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(141);
      // Undeclared exception!
      formElement0.outerHtmlHead(bufferedWriter0, 141, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("KgySGW", "KgySGW");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tgySGW", "tgySGW");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 2147483645, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 2452, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("Qm6b]dAZaaX/ZN=");
      File file0 = MockFile.createTempFile("Qm6b]dAZaaX/ZN=", "phw");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-1016), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = new Document("Yo`+b");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("Yv (Q7OL&i>9", "Yv (Q7OL&i>9");
      Element element0 = document0.head();
      Element element1 = element0.after((Node) document0);
      Pattern pattern0 = Pattern.compile("Nivvsl", 17);
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      // Undeclared exception!
      element1.is((Evaluator) evaluator_MatchesOwn0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("Yo`+b");
      DataNode dataNode0 = DataNode.createFromEncoded(":last-of-type", ",_");
      Element element0 = document0.doClone(dataNode0);
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      // Undeclared exception!
      try { 
        element0.is((Evaluator) evaluator_MatchText0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.DataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "Yo`+b");
      // Undeclared exception!
      try { 
        document0.is("Yo`+b");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Yo`+b': unexpected token at '`+b'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^R", "^R");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("encoding");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "Yo`+b");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("/[aSAaB/T~1I# )", "Kvn(R6vJ");
      Elements elements0 = document0.getElementsContainingText("/[aSAaB/T~1I# )");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("q ^r7([9Zo2GA$Z;", "!@W");
      Element element0 = document0.appendElement("q ^r7([9Zo2GA$Z;");
      Element element1 = element0.before((Node) document0);
      // Undeclared exception!
      element1.html("G$B+");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^", "^");
      DataNode dataNode0 = new DataNode((String) null, "zTW");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.html("^");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^#", "^#");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9Hh", "9Hh");
      document0.appendChild(document0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("9Hh", false);
      // Undeclared exception!
      document0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("Em=^E", "html");
      // Undeclared exception!
      try { 
        document0.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("K@n>^5L");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("Tg%le~38ZnR;\"8DJ", "org.jsoup.select.Evaluator$AttributeWithValueEnding");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+Xt|v0L%H5|@>.j<", "d+Xt|v0L%H5|@>.j<");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^R", "^R");
      DataNode dataNode0 = new DataNode("^R");
      document0.setParentNode(dataNode0);
      Pattern pattern0 = Pattern.compile("^R", 6);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("HD=-j", "HD=-j");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("Gbc-^Dq8n^>~6[Fa");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("Gbc-^Dq8n^>~6[Fa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: Gbc-^Dq8n^>~6[Fa
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "sub");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Document.createShell("q ^r7([9Zo2GA$Z;");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("A/{nrCx}4BJ1n2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: A/{nrCx}4BJ1n2
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.text(":contains(text) query must not be empty");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getElementsContainingText("#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("^R", "^R");
      Element element0 = document0.appendElement("^R");
      element0.setSiblingIndex((-380));
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("^R");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.head();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("Jp S;Uy/S)r:l4VcF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", " />");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "Yo`+b");
      Element element0 = document0.head();
      Element element1 = element0.prepend("");
      element1.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan((-995));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9Hh", "9Hh");
      TextNode textNode0 = new TextNode("rFN~w']e$6C", "textarea");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("Qm6b]dAZaaX/ZN=");
      Element element0 = document0.toggleClass("Qm6b]dAZaaX/ZN=");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getElementsByClass("java.lang.string@0000000046");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>9", "</");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("<html>\n <head></head>\n <body>\n  Yv (QOL&amp;\n  <i>9</i>\n </body>\n</html>", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%", "%");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mcmEN0ctfviu90", "html");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, "-fv!_)}y@,S>&`&=f_@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: -fv!_)}y@,S>&`&=f_@
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "K@n>^5L");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "a[viju_)&8[jb*~x-t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Tag tag0 = Tag.valueOf("R/l1Z,3Q8RkR;wx>a1");
      CDataNode cDataNode0 = new CDataNode("F[tQWKqL$?CznA) ");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValue("R/l1Z,3Q8RkR;wx>a1", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Document.createShell("Initial");
      Element element0 = document0.body();
      element0.siblingIndex = (-4223);
      // Undeclared exception!
      try { 
        document0.getElementById("2qcu5a");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&)>9", "</");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_R.}&Ct/1/5bDPK:7", "-_R.}&Ct/1/5bDPK:7");
      Element element0 = document0.body();
      element0.addClass("G7GA{twU6/?A+:U");
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000084': unexpected token at '@0000000084'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = new Document("");
      Comment comment0 = new Comment("Hp_7Ix]G^h%X{F71");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "K@n>^5L");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m>@;_>tsu", "7<G6");
      // Undeclared exception!
      try { 
        document0.child(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.child((-1020));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^R", "");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("z,yfB9>u~.K");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell("-_.}&Ct/1/5Eb.DPK:7");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      Document document1 = (Document)document0.appendChild(document0);
      // Undeclared exception!
      document1.attr("#root", "CHZoEuPrwG5-ru&}U");
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "z& S+2K+$tkmV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m>@;_>tsu", "7<G6");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("7<G6", document0, "7<G6");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendText("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "sub");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+Xt|v0L%H5|@>.j<", "d+Xt|v0L%H5|@>.j<");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.appendElement("c-wH5~S`~");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^=", "^=");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("^=");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Element element0 = new Element("nPMw;");
      Document document0 = Document.createShell("nPMw;");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("N07J`Blr^LU+m", true);
      element0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "style");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>!", "Yv (QOL&<i>!");
      Element element0 = document0.head();
      element0.before((Node) document0);
      // Undeclared exception!
      document0.append("bk");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("^R");
      Element element0 = document0.appendElement("^R");
      List<Node> list0 = Parser.parseXmlFragment("^R", "</");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.append("^R");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^=", "^=");
      DataNode dataNode0 = new DataNode("textarea", "textarea");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexLessThan");
      Element element0 = document0.body();
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YDSG", "YDSG");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("-_R.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.body();
      Document document1 = (Document)document0.doClone(element0);
      // Undeclared exception!
      try { 
        document1.after("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Document.createShell("}l(e50Rcvw");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "version", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "/CP:<uJxCW--");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      Element element0 = document0.appendElement("K@n>^5L");
      element0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000089", "java.lang.string@0000000089");
      document0.toggleClass("java.lang.string@0000000076 9%");
      document0.toggleClass("java.lang.string@0000000076 9%");
      document0.hasClass("java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = new Document("^R");
      document0.toggleClass("^R");
      document0.toggleClass(" ");
      document0.hasClass(" ");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "Yo`+b");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+Xt|v0L%H5|@>.j<", "d+Xt|v0L%H5|@>.j<");
      Element element0 = document0.head();
      Element element1 = element0.text("d+Xt|v0L%H5|@>.j<");
      element1.data();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexLessThan");
      document0.appendText("Wd");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexLessThan");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "org.jsoup.nodes.Element");
      Element element0 = document0.appendElement("?");
      Element element1 = element0.firstElementSibling();
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      Element element0 = document0.appendElement("K@n>^5L");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("-");
      Element element0 = document0.body();
      Element element1 = element0.wrap(" />");
      element1.wrap("uJ1b)]-Cw\u0004ax=");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("Yo`+b");
      Element element0 = document0.toggleClass("( B");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = new Document("K@n>^5L");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>!", "Yv (QOL&<i>!");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("q ^r7([9Zo2GA$Z;", "q ^r7([9Zo2GA$Z;");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("$`Yo`W\"%AP_#wpGX$");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$AttributeWithValueContaining", "org.jsoup.select.Evaluator$AttributeWithValueContaining");
      Pattern pattern0 = Pattern.compile("org.jsoup.select.Evaluator$AttributeWithValueContaining");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("Em=^E", "html");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Element element0 = new Element("body");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>!", "Yv (QOL&<i>!");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.val("p`(@hTtt^+Xa");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yo`+b", "Yo`+b");
      document0.append("textarea");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BeforeAttributeValue", "hr");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.createElement("br");
      MockFile mockFile0 = new MockFile("", "br");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(outputStreamWriter0, 15, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "K");
      Element element0 = document0.createElement("textarea");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>9", "</");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "#root");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("Q4O9", "Q4O9");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Document.createShell("q ^r7([9Zo2GA$Z;");
      Element element0 = document0.appendElement("textarea");
      element0.val("q ^r7([9Zo2GA$Z;");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("q ^r7([9Zo2GA$Z;");
      Element element0 = document0.appendElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BeforeAttributeValue", "hr");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("Qm6b]dAZaaX/ZN=");
      Element element0 = document0.toggleClass("Qm6b]dAZaaX/ZN=");
      element0.toggleClass("Qm6b]dAZaaX/ZN=");
      document0.toggleClass("Qm6b]dAZaaX/ZN=");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("^=");
      Element element0 = document0.toggleClass("^_=");
      document0.toggleClass("sK:DTVAPoK7v4 x");
      element0.getElementsByClass("java.lang.string@0000000047");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("^=");
      Element element0 = document0.toggleClass("^=");
      Element element1 = element0.toggleClass("^=");
      element1.hasClass("^=");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000089");
      document0.toggleClass("java.lang.string@0000000089");
      document0.hasClass("java.lang.string@0000000089");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|#/~BbHNsc>G@eOR2B", "org.jsoup.nodes.Element$NodeList");
      document0.toggleClass("h0a,SjS}");
      document0.hasClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^=", "M#-2*lx'^#DE!h1g");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IndexLessThan");
      document0.appendText("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^", "^");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!", "xml");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YDSG", "YDSG");
      document0.reparentChild(document0);
      document0.getElementsContainingText("YDSG");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TextNode textNode0 = new TextNode((String) null);
      Element.preserveWhitespace(textNode0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^=", "^=");
      Element element0 = document0.appendElement("^=");
      element0.before("[$Y<d^Hf$y7Zks");
      document0.getElementsContainingText("^=");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+Xt|v0L%H5|@>.j<", "d+Xt|v0L%H5|@>.j<");
      Element element0 = document0.head();
      element0.text("d+Xt|v0L%H5|@>.j<");
      element0.after(":nth-child(%d)");
      document0.getElementsContainingText("#root");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sZi=`5#A,v$7(", "~");
      document0.appendElement("br");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "org.jsoup.select.Evaluator$IndexLessThan");
      document0.title("div");
      Pattern pattern0 = Pattern.compile("div", 60);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^R", "^R");
      Element element0 = document0.head();
      Comment comment0 = new Comment("Qt%oX<SF:~7!6");
      element0.after((Node) comment0);
      document0.getElementsContainingText("Qt%oX<SF:~7!6");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = new Document("Yv (QOL&)>9");
      Element element0 = document0.appendElement("Yv (QOL&)>9");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("InRow", "InRow");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("-_R.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-_.}&Ct/1/5Eb.DPK:7", "-_.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("-_R.}&Ct/1/5Eb.DPK:7");
      Element element0 = document0.doClone(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Element element0 = new Element("Yv (QOL&)>9");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000046 -_r.1&ct//5eb.dpk:7");
      Element element0 = document0.appendElement("Tag name must not be empty.");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+Xt|v0L%H5|@>.j<", "d+Xt|v0L%H5|@>.j<");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "org.jsoup.select.Evaluator$IndexLessThan");
      document0.nextElementSibling();
      assertEquals("org.jsoup.select.Evaluator$IndexLessThan", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      Element element0 = document0.body();
      Element element1 = element0.nextElementSibling();
      assertEquals("Yv (QOL&<i>9", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("Yo`+b");
      Element element0 = document0.appendElement("{wG`!lR%xej>Y`&+1");
      Elements elements0 = element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000089");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("-");
      Element element0 = document0.body();
      element0.wrap(" />");
      element0.cssSelector();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p^", "p^");
      Element element0 = document0.toggleClass("p^");
      element0.cssSelector();
      assertEquals("p^", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "sub");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(160, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Element element0 = new Element("Yv (QOL&)>9");
      Node[] nodeArray0 = element0.childNodesAsArray();
      // Undeclared exception!
      try { 
        element0.insertChildren((-3321), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&)>9", "</");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals("</", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p^", "p^");
      Elements elements0 = document0.getElementsByAttributeValueContaining("p^", "p^");
      // Undeclared exception!
      try { 
        document0.insertChildren(16, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&)>9", "</");
      Elements elements0 = document0.getElementsContainingOwnText("2_p>[gd\"#i.-8I:A/");
      // Undeclared exception!
      try { 
        document0.insertChildren((-2166), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&)>9", "Yv (QOL&)>9");
      LinkedList<PseudoTextElement> linkedList0 = new LinkedList<PseudoTextElement>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("Yv (QOL&)>9", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YDSG", "YDSG");
      DataNode dataNode0 = new DataNode("YDSG", "[%s!=%s]");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
      assertEquals("YDSG", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("s=C~{%#", "sub");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("sub", document0.baseUri());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000046 -_r.1&ct//5eb.dpk:7");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("InRow", "InRow");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
      try { 
        element1.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9Hh", "9Hh");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      assertEquals(1, elements0.size());
      assertEquals("9Hh", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000089");
      Element element0 = document0.selectFirst("head");
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parse("html", "br");
      document0.is("html");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("Yo`+b");
      document0.getAllElements();
      assertEquals("Yo`+b", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^=", "^=");
      // Undeclared exception!
      try { 
        document0.before("^=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "sub");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "sub");
      document0.getElementsByAttributeValueNot("sub", "body");
      assertEquals("sub", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Document.createShell("K@n>^5L");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$AttributeWithValueContaining", "org.jsoup.select.Evaluator$AttributeWithValueContaining");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueContaining", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      document0.doSetBaseUri("_zf&zU+|\"_}T:O/?");
      assertEquals("_zf&zU+|\"_}T:O/?", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^R", "^R");
      Comment comment0 = new Comment("Qt%oX<SF:~7!6");
      // Undeclared exception!
      try { 
        document0.after((Node) comment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "sub");
      Pattern pattern0 = Pattern.compile("sub");
      document0.getElementsByAttributeValueMatching("a[viju_)&8[jb*~x-t", pattern0);
      assertEquals("sub", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("KHnv^5L", "KHnv^5L");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("-_R.}&Ct/1/5Eb.DPK:7");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BeforeAttributeValue", "hr");
      Element element0 = document0.val("BeforeAttributeValue");
      String string0 = element0.val();
      assertEquals("BeforeAttributeValue", string0);
      assertEquals("hr", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = new Document("9Hh");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertFalse(elements0.isEmpty());
      assertEquals("9Hh", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "I[ ^ ");
      document0.getElementsByAttributeStarting("5.");
      assertEquals("I[ ^ ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^=", "^=");
      Elements elements0 = document0.getElementsByIndexLessThan(14);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^=", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      // Undeclared exception!
      try { 
        document0.after("K@n>^5L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = new Document("Yfq+b");
      document0.getElementsMatchingOwnText("");
      assertEquals("Yfq+b", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      document0.select("head");
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.getElementsByAttributeValueStarting("<rL_R", "s.x]n4\"&(`=2");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("^=");
      document0.getElementsByAttributeValue("sK:DTVAPoK7v4 x", "html");
      assertEquals(1, document0.childNodeSize());
      assertEquals("^=", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse("Yv (QOL&<i>9", "Yv (QOL&<i>9");
      Element element0 = document0.attr("t:j*Z", true);
      assertEquals("Yv (QOL&<i>9", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("KHnv^5L", "KHnv^5L");
      document0.wholeText();
      assertEquals("KHnv^5L", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>!", "Yv (QOL&<i>!");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Element element0 = new Element("^=");
      String string0 = element0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yv (QOL&<i>9", "<]");
      document0.dataset();
      assertEquals("<]", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^=", "M#-2*lx'^#DE!h1g");
      Element element0 = document0.tagName("head");
      assertEquals("M#-2*lx'^#DE!h1g", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^=", "^=");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000089");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "K@n>^5L");
      Elements elements0 = document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.insertChildren((-2), (Collection<? extends Node>) elements0);
      assertEquals("K@n>^5L", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000046 -_r.1&ct//5eb.dpk:7");
      document0.prependElement("java.lang.string@0000000046 -_r.1&ct//5eb.dpk:7");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("YDSG", "YDSG");
      Elements elements0 = document0.getElementsMatchingText(":nth-child(%d)");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("YDSG", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Document.createShell("^=");
      document0.toggleClass("^=");
      document0.hasClass("^=");
      assertEquals(1, document0.childNodeSize());
      assertEquals("^=", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.appendText(" ");
      document0.getElementsContainingText("eof");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell("-");
      // Undeclared exception!
      try { 
        document0.wrap(" />");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("K@n>^5L", "sub");
      document0.getElementById("K@n>^5L");
  }
}
