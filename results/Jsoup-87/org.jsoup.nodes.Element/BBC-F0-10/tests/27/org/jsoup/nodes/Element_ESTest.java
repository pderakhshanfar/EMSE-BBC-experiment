/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:59:03 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      Element element0 = document0.toggleClass(">+EKQvm!");
      element0.toggleClass(",/NvNF00");
      document0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document0.getElementsByAttributeValueMatching("+Voh1{$na@nv-.hT\"M", "2");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      Document document1 = document0.clone();
      Element element0 = document0.appendChild(document1);
      document1.before((Node) element0);
      document1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document0.prependChild(document0);
      document0.empty();
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("pkxB:!z$lH.\r", "pkxB:!z$lH.\r");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintWriter0, 5, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      Tag tag0 = Tag.valueOf("class");
      Element element0 = new Element(tag0, ">+EKQvm!");
      document0.appendChild(element0);
      element0.wrap(">+EKQvm!");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      FormElement formElement0 = new FormElement(tag0, "body", (Attributes) null);
      formElement0.val("e{bey->Ww)y0(~Q");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "class");
      Tag tag0 = Tag.valueOf("6\"");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6\"", attributes0);
      document0.appendChild(pseudoTextElement0);
      pseudoTextElement0.val("6m1#");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      Element element0 = document0.body();
      element0.toggleClass(" *^tCg.");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("checked", "checked");
      Element element0 = document0.appendChild(document0);
      element0.toggleClass("checked");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Tag tag0 = Tag.valueOf("6\"");
      Element element0 = new Element(tag0, "$MQF`Kp=J]CJ0=~pm");
      element0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      document0.text("class");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("UBQjrRJ8{++", parseSettings0);
      Element element0 = new Element(tag0, "UBQjrRJ8{++");
      element0.text("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element", attributes0);
      element0.text();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":", "[%s~=%s]");
      Element element0 = document0.head();
      element0.tagName(":");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Element element0 = new Element("hRb?YB4Bdg(r[!K");
      element0.tagName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsFirstOfType", ",/NvNF00");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.selectFirst("class");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.select("3B");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.head();
      element0.removeClass("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S7RM2Y3k#t6~k-BHu", "S7RM2Y3k#t6~k-BHu");
      document0.appendChild(document0);
      document0.removeClass("&nbsp;");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Element element0 = new Element("hRb?YB4Bdg(r[!K");
      element0.removeClass("hRb?YB4Bdg(r[!K");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      document0.prependText("checked");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      Tag tag0 = Tag.valueOf("class");
      Element element0 = new Element(tag0, ">+EKQvm!");
      document0.prependChild(document0);
      document0.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      Document document1 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document1.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("F9Oi@}M;", "F9Oi@}M;");
      Element element0 = document0.body();
      element0.prepend("It!H7eIR(");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      CDataNode cDataNode0 = new CDataNode(")");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("mifZk'<j+Ng", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.appendChild(document0);
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("cheLDcked", "cheLDcked");
      document0.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      document0.appendText("class");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "class");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Element element0 = new Element("}OWy");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      element0.is((Evaluator) evaluator_IsRoot0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("o", "org.jsoup.nodes.Element");
      document0.is("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document0.prependChild(document0);
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      Element element0 = document0.empty();
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      document0.empty();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      Element element0 = document0.appendChild(document0);
      document0.removeChild(element0);
      document0.html("XK\"\"b3o_`2q.uMOTt");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Rd^=;b?N");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Rd^=;b?N", attributes0);
      formElement0.html();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b", "b");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.getElementsMatchingText("4w@B");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("checked", "checked");
      Pattern pattern0 = Pattern.compile("checked", (-845));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.getElementsMatchingOwnText("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.getElementsContainingText("class");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "textarea");
      document0.getElementsContainingOwnText("t");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("UBQjrRJ8{++", parseSettings0);
      Element element0 = new Element(tag0, "UBQjrRJ8{++");
      element0.getElementsByTag("nr?W.B/m1o4~");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.getElementsByTag("head");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.getElementsByIndexLessThan((-1116));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "class");
      document0.getElementsByIndexGreaterThan((-2118));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("n8X|srI%fwXL:1", "</");
      document0.getElementsByIndexEquals((-1433506051));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Rd^=;b?N");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Rd^=;b?N", "Rd^=;b?N");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "Rd^=;b?N", attributes1);
      formElement0.getElementsByAttributeValueContaining("Rd^=;b?N", "Rd^=;b?N");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.getElementsByAttributeValue("textarea", "textarea");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      document0.toggleClass(">+EKQvm!");
      document0.getElementsByAttribute("class");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("", "Tag name must not be empty.");
      Element element0 = document0.createElement("X_6G>k[yPW1");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("checked", "checked");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      FormElement formElement0 = new FormElement(tag0, "body", (Attributes) null);
      formElement0.clone();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b", "b");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      Element element0 = document0.createElement("[EsVZ");
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.toggleClass("checked");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.head();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document0.empty();
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("checked");
      Document document1 = (Document)document0.appendChild(document0);
      document1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      Tag tag0 = Tag.valueOf("class");
      Element element0 = new Element(tag0, ">+EKQvm!");
      Element element1 = document0.appendChild(element0);
      element0.before((Node) document0);
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "class");
      Tag tag0 = Tag.valueOf("6\"");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6\"", attributes0);
      document0.appendChild(pseudoTextElement0);
      pseudoTextElement0.before("Comment");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      Element element0 = document0.toggleClass(">+EKQvm!");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S7RM2Y3k#t6~k-BHu", "S7RM2Y3k#t6~k-BHu");
      document0.appendChild(document0);
      document0.attr("#root", true);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document("{tkI]Lmi.5n3A8n");
      document0.attr("org.jsoup.nodes.Element", true);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      Tag tag0 = Tag.valueOf("class");
      Element element0 = new Element(tag0, ">+EKQvm!");
      document0.appendChild(element0);
      element0.attr("+yr[N;;]&GWQO*yL-H", "Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Element element0 = new Element(tag0, ">+EKQvm!");
      element0.attr("+yr[N;;]&GWQO*yL-H", "Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Tag tag0 = Tag.valueOf("y(EHNqHAq?c");
      Element element0 = new Element(tag0, "y(EHNqHAq?c");
      document0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      Tag tag0 = Tag.valueOf("+Voh1{$na@nv-.hT\"M");
      Element element0 = new Element(tag0, "7&6oI$n48O/%$zP8zB");
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      document0.appendText("checked");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = new Document("n-bY");
      document0.appendElement("lYuWz%dU}e#7.J<Yv&<");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      Document document1 = Parser.parse("*he;SB|", "*he;SB|");
      document1.appendChild(document0);
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Element element0 = new Element("hRb?YB4Bdg(r[!K");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsFirstOfType", ",/NvNF00");
      Element element0 = document0.appendElement(",/NvNF00");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      document0.addClass("textarea");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.empty();
      element0.addClass("head");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.wrap("n8X|srI%fwXL:1");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("$T4{l0sfP$V:PEHO");
      // Undeclared exception!
      try { 
        document0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.tagName("2Ri/-/rK!sA\"%hHl=");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document0.prependChild(document0);
      Element element0 = document0.empty();
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        formElement0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.select("org.jsoup.select.Evaluator$IsRoot");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Evaluator$IsRoot': unexpected token at '$IsRoot'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("F%^u>~<sG9V%B", "]Yk/O1._M|p[@");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("gcscGs\u0004;<)*r@D", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "gcscGs\u0004;<)*r@D", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.prependElement("+Voh1{$na@nv-.hT\"M");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(".\"PV.AL=dKm@q", "Z");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("im@F$2HNIA5Md");
      Elements elements0 = document0.getAllElements();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      Element element1 = document0.empty();
      // Undeclared exception!
      try { 
        element0.prependChild(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.prepend("Bu");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Q6(Z", "compact");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-571), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":", "[%s~=%s]");
      MockFile mockFile0 = new MockFile(":");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockFileWriter0, 2287, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      // Undeclared exception!
      try { 
        document0.is("g[%>_8");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '>'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("checked", "checked");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html("XK\"\"b3o_`2q.uMOTt");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      // Undeclared exception!
      document0.html(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "class");
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("=B61[KS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: =B61[KS
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("fB%!q)QKDS4J'LSx<=", "br");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("yD)A/f.noKp/F|Jx");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("yD)A/f.noKp/F|Jx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: yD)A/f.noKp/F|Jx
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("html", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("?@tq", "?@tq");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("head");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("Children collection to be inserted must not be null.", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining((String) null, "html");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Tag tag0 = Tag.valueOf("+Voh1{$na@nv-.hT\"M");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "I,gA", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("html", "z1^k*b*Nro8('As=");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("A8$:JUWi:Yaw~)v4", "A8$:JUWi:Yaw~)v4");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      // Undeclared exception!
      try { 
        document0.child((-861));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      TextNode textNode0 = TextNode.createFromEncoded("checked");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      Element element0 = document0.appendChild(document0);
      element0.empty();
      // Undeclared exception!
      try { 
        document0.before((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("checked");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "class");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.attr("XK\"\"b3o_`2q.uMOTt", "z1^k*b*Nro8('As=");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      // Undeclared exception!
      try { 
        document0.attr((String) null, ">+EKQvm!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "hRb?YB4Bdg(r[!K");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~=gNUET._eT6w", "~=gNUET._eT6w");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement("oKAg|y@NJ50-");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      DataNode dataNode0 = new DataNode("_t]aVyy$Gp3d*.,p\"", "cB6");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("checked", "(,hR%[bO");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("checked", "checked");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.after("checked");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("[=QKH");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "[=QKH", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "n8X|srI%fwXL:1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      MockFile mockFile0 = new MockFile("~bhpTLho%", "org.jsoup.parser.Token$Doctype");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("class");
      document0.toggleClass(">+EKQvm!");
      document0.hasClass("@ i|3c974h/g!y=D");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      Element element0 = document0.toggleClass(">+EKQvm!");
      Element element1 = element0.toggleClass(",/NvNF00");
      element1.hasClass(",/NvNF00");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.toggleClass("");
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.appendText("class");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendText("TS[[|kbMM>f)0ZK2");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("+Voh1{$na@nv-.hT\"M");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = new Document("4<^NPY");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("F9Oi@}M;", "F9Oi@}M;");
      Element element0 = document0.appendElement("^dTDCF>$wK')x5z_Fy*");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document0.prependChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      Element element0 = document0.appendChild(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("`SPjY", "Lw&UB=[");
      Element element0 = document0.head();
      element0.html("`SPjY");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("cheLDcked", "cheLDcked");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("", "Tag name must not be empty.");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":", "[%s~=%s]");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">+EKQvm!", "class");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      StringWriter stringWriter0 = new StringWriter(1);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuffer0, 1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "class");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 16, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.val("");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("checked", "checked");
      Element element0 = document0.toggleClass("checked");
      document0.toggleClass("bo");
      element0.toggleClass("bo");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("Comment", "class");
      document0.toggleClass("xL%%[%876JmM");
      document0.toggleClass(" > ");
      document0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("LlW+~%0.n$nm", "LlW+~%0.n$nm");
      document0.toggleClass("LlW+~%0.n$nm");
      document0.toggleClass("m0&7ted");
      document0.getElementsByClass("m0&7ted");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      Element element0 = document0.toggleClass(">+EKQvm!");
      element0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("LlW+~%0.n$nm", "LlW+~%0.n$nm");
      document0.toggleClass("LlW+~%0.n$nm");
      document0.getElementsByClass("m0&7ted");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("checked", "checked");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("cheLDcked", "cheLDcked");
      document0.reparentChild(document0);
      Pattern pattern0 = Pattern.compile("UcB6");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      CDataNode cDataNode0 = new CDataNode(">+EKQvm!");
      Element element0 = document0.appendChild(cDataNode0);
      Pattern pattern0 = Pattern.compile("tBOrvHDwNNb2dw+", 91);
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("LlW+~%0.n$nm");
      DocumentType documentType0 = new DocumentType("LlW+~%0.n$nm", "LlW+~%0.n$nm", "aZ5O7!&9@~pn;6", "MVJ67>e0gQvs}mLJ");
      document0.appendChild(documentType0);
      Pattern pattern0 = Pattern.compile("Tag name must not be empty.");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.appendText("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      Document document1 = Parser.parse("checked", "checked");
      document0.appendChild(document1);
      Pattern pattern0 = Pattern.compile(",/NvNF00");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("LlW+~%0.n$nm");
      DocumentType documentType0 = new DocumentType("LlW+~%0.n$nm", "LlW+~%0.n$nm", "aZ5O7!&9@~pn;6", "MVJ67>e0gQvs}mLJ");
      document0.appendChild(documentType0);
      Pattern pattern0 = Pattern.compile("Tag name must not be empty.");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      Element element0 = document0.empty();
      document0.prependChild(element0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("checked", "checked");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.appendChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("cheLDcked", "cheLDcked");
      document0.reparentChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      Document document1 = document0.clone();
      Element element0 = document0.appendChild(document1);
      Document document2 = element0.ownerDocument();
      document1.before((Node) document2);
      document2.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = new Element("hRb?YB4Bdg(r[!K");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      Element element0 = document0.appendChild(document0);
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("checked", element0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("o", "org.jsoup.nodes.Element");
      document0.siblingElements();
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+Voh1{$na@nv-.hT\"M", "+Voh1{$na@nv-.hT\"M");
      document0.prependChild(document0);
      assertEquals(2, document0.childNodeSize());
      
      Elements elements0 = document0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S7RM2Y3k#t6~k-BHu", "S7RM2Y3k#t6~k-BHu");
      Element element0 = document0.appendChild(document0);
      String string0 = element0.cssSelector();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.toggleClass("checked");
      document0.cssSelector();
      assertEquals("checked", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren(1192721831, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-3770), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$NodeList", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ScriptDataEscaped", attributes0);
      LinkedHashSet<Element> linkedHashSet0 = new LinkedHashSet<Element>();
      // Undeclared exception!
      try { 
        formElement0.insertChildren(1928, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1736), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("checked", "textarea");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.append("<html>\n <head></head>\n <body></body>\n</html>");
      document0.textNodes();
      assertEquals(4, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.appendText("class");
      document0.getElementsByIndexLessThan(3);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$NodeList", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ScriptDataEscaped", attributes0);
      Elements elements0 = formElement0.getElementsByIndexGreaterThan(1);
      assertTrue(elements0.isEmpty());
      assertEquals("ScriptDataEscaped", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.NodeFilter$FilterResult", "M");
      // Undeclared exception!
      try { 
        document0.selectFirst("org.jsoup.select.NodeFilter$FilterResult");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.NodeFilter$FilterResult': unexpected token at '$FilterResult'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("4<^NPY");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element", attributes0);
      // Undeclared exception!
      try { 
        element0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      // Undeclared exception!
      try { 
        document0.before((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.getElementsByAttribute("sub");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      Elements elements0 = document0.getElementsByAttributeValueNot("class", ",/NvNF00");
      assertEquals(4, elements0.size());
      assertEquals("class", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(".\"PV.AL=dKm@q", "Z");
      Element element0 = document0.shallowClone();
      assertEquals("Z", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.doSetBaseUri(" > ");
      assertEquals(" > ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsFirstOfType", ",/NvNF00");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.getElementsByAttributeValueContaining("4HWp)oAFNoy", ">+EKQvm!");
      boolean boolean0 = document0.hasAttributes();
      assertTrue(boolean0);
      assertEquals("class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("section", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "!} =&", attributes0);
      Pattern pattern0 = Pattern.compile("section");
      formElement0.getElementsByAttributeValueMatching("#", pattern0);
      assertEquals("!} =&", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      Elements elements0 = document0.getElementsContainingText(">+EKQvm!");
      assertEquals("class", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("body", "z1^k*b*Nro8('As=");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.getElementsByAttributeValueEnding("br", "#root");
      assertEquals("class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("", "N>0@a#\"Hf`-y$$");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      document0.is((Evaluator) evaluator_IsFirstChild0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("euM+ARy--oAy9WQm", "$J)J?G!gz[Q1U-G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: $J)J?G!gz[Q1U-G
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("body", "z1^k*b*Nro8('As=");
      Element element0 = document0.attr("nth-of-type", "n8X|srI%fwXL:1");
      assertEquals("z1^k*b*Nro8('As=", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse(">+EKQvm!", "class");
      // Undeclared exception!
      try { 
        document0.wrap(">+EKQvm!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      Elements elements0 = document0.getElementsMatchingOwnText("checked");
      assertEquals("checked", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("pkxB:!z$lH.\r", "pkxB:!z$lH.\r");
      document0.getElementsByAttributeStarting("^yYVGAh/H[RTMcS");
      assertEquals(1, document0.childNodeSize());
      assertEquals("pkxB:!z$lH.\r", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.prependElement("Tvk");
      document0.appendChild(document0);
      document0.firstElementSibling();
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("checked", "checked");
      // Undeclared exception!
      try { 
        document0.after("checked");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("checked", "checked");
      document0.prepend("checked");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      document0.select("body");
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.getElementsByAttributeValueStarting("head", "Children collection to be inserted must not be null.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("<html>\n <head></head>\n <body></body>\n</html>", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cliss");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ScriptDataDoubleEscaped", (Attributes) null);
      Element element0 = pseudoTextElement0.html("");
      assertEquals("ScriptDataDoubleEscaped", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Element element0 = new Element("hRb?YB4Bdg(r[!K");
      String string0 = element0.wholeText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Element element0 = new Element("nth-of-type");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      Elements elements0 = document0.getElementsContainingOwnText(" > ");
      assertEquals("class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.dataset();
      assertEquals("class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":", "[%s~=%s]");
      Element element0 = document0.tagName(":");
      assertEquals("[%s~=%s]", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "#");
      // Undeclared exception!
      try { 
        document0.child(3320);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3320, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("cheLDcked", "cheLDcked");
      document0.previousElementSiblings();
      assertEquals("cheLDcked", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("checked", "checked");
      document0.prependText("checked");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.getElementsMatchingText("");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">+EKQvm!", "class");
      document0.appendText("");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("ln?F>#Jk<zJBsc*!5M", "ln?F>#Jk<zJBsc*!5M");
      Elements elements0 = document0.children();
      assertEquals(1, elements0.size());
      assertEquals("ln?F>#Jk<zJBsc*!5M", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("checked", "textarea");
      document0.getElementById("head");
  }
}
