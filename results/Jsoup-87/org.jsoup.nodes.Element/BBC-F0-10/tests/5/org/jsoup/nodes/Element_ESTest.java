/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:34:17 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.MissingFormatArgumentException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document("5^Q#wt^");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.tagName("textarea");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals("textarea", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("5^Q#wt^", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.val("<!--");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("5^Q#wt^");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("textarea");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsContainingText("_");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = element0.prependElement("textarea");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("5^Q#wt^", element1.baseUri());
      assertEquals("textarea", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      String string0 = document0.html();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("<textarea><textarea></textarea></textarea>", string0);
      
      Tag tag0 = element0.tag();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Elements elements1 = element1.getElementsByAttributeValueEnding("head", "q20gvk>ek|sKK+");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("5^Q#wt^", element1.baseUri());
      assertEquals("textarea", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "WnuVeLet";
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Document document0 = parser1.parseInput("WnuVeLet", ".");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(".", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".", document0.baseUri());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(".", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(".", document1.location());
      assertEquals(".", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.prependElement(".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "WnuVeLet";
      Document document0 = new Document("WnuVeLet");
      assertEquals("WnuVeLet", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("WnuVeLet", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.childNodes = null;
      assertEquals("WnuVeLet", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("WnuVeLet", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      document0.setParentNode(document0);
      assertTrue(document0.hasParent());
      assertEquals("WnuVeLet", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("WnuVeLet", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("at", "at");
      assertEquals("#root", document0.tagName());
      assertEquals("at", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("at", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-1432352094));
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertNotNull(parser2);
      
      Document document1 = parser2.parseInput("ct|lN:k^", "ct|lN:k^");
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ct|lN:k^", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("ct|lN:k^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Element element0 = document1.prependElement("textarea");
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ct|lN:k^", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("ct|lN:k^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ct|lN:k^", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("[%s$=%s]");
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ct|lN:k^", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("ct|lN:k^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ct|lN:k^", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("[%s$=%s]", element1.tagName());
      assertEquals("ct|lN:k^", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("[%s$=%s]", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      String string0 = document0.html();
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals("at", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("at", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  at\n </body>\n</html>", string0);
      
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ct|lN:k^", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("ct|lN:k^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ct|lN:k^", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "^(R]adf&B4@yP_";
      Document document0 = Parser.parse("^(R]adf&B4@yP_", "^(R]adf&B4@yP_");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(R]adf&B4@yP_", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(R]adf&B4@yP_", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("^(R]adf&B4@yP_", false);
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertNotNull(xmlDeclaration0);
      
      Document document1 = (Document)document0.doClone(xmlDeclaration0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(R]adf&B4@yP_", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("^(R]adf&B4@yP_", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]adf&B4@yP_", document1.baseUri());
      assertNotNull(document1);
      
      Elements elements0 = document1.getElementsByAttribute("l){is&:m\"#55hne");
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(R]adf&B4@yP_", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("^(R]adf&B4@yP_", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]adf&B4@yP_", document1.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string1 = document0.text();
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(R]adf&B4@yP_", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertEquals("^(R]adf&B4@yP_", string1);
      
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("$@T.NVPNag8;cFn[>W");
      assertEquals("$@T.NVPNag8;cFn[>W", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("$@T.NVPNag8;cFn[>W", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$@T.NVPNag8;cFn[>W", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("$@T.NVPNag8;cFn[>W", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$@T.NVPNag8;cFn[>W", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("$@T.NVPNag8;cFn[>W", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = new Document("br");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      assertNotNull(mockPrintStream0);
      
      Charset charset0 = document0.charset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(outputStreamWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings3);
      
      element0.outerHtmlHead(outputStreamWriter0, 67, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      
      // Undeclared exception!
      try { 
        element0.child(24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 24, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".^Q#t^", ".^Q#t^");
      assertFalse(document0.isBlock());
      assertEquals(".^Q#t^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(".^Q#t^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass(".^Q#t^");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(".^Q#t^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(".^Q#t^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(".^Q#t^", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(".^Q#t^", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertNotNull(uS_ASCII0);
      
      document1.setSiblingIndex((-1125));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals((-1125), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(".^Q#t^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(".^Q#t^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals((-1125), document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(".^Q#t^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(".^Q#t^", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Set<String> set0 = uS_ASCII0.aliases();
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(".^Q#t^"));
      
      Document document2 = (Document)document1.classNames(set0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals((-1125), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(".^Q#t^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(".^Q#t^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals((-1125), document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(".^Q#t^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(".^Q#t^", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals("#document", document2.nodeName());
      assertEquals(".^Q#t^", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(".^Q#t^", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals((-1125), document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertFalse(set0.contains(".^Q#t^"));
      
      boolean boolean0 = document1.hasClass(".^Q#t^");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals((-1125), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(".^Q#t^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(".^Q#t^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals((-1125), document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(".^Q#t^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(".^Q#t^", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(boolean0);
      
      Document document3 = (Document)document2.clone();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals((-1125), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(".^Q#t^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(".^Q#t^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals((-1125), document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(".^Q#t^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(".^Q#t^", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals("#document", document2.nodeName());
      assertEquals(".^Q#t^", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(".^Q#t^", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals((-1125), document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(".^Q#t^", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(".^Q#t^", document3.location());
      assertNotNull(document3);
      assertFalse(set0.contains(".^Q#t^"));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WnuVeLet", "WnuVeLet");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("WnuVeLet", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("WnuVeLet", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendText("WnuVeLet");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("WnuVeLet", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("WnuVeLet", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("WnuVeLet", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("WnuVeLet", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.tagName("WnuVeLet");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("WnuVeLet", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("wnuvelet", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("WnuVeLet", document0.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("WnuVeLet", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("WnuVeLet", document2.baseUri());
      assertEquals("wnuvelet", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Document document3 = (Document)document0.val("WnuVeLet");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("WnuVeLet", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("wnuvelet", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("WnuVeLet", document0.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("WnuVeLet", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("WnuVeLet", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals("wnuvelet", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Node[] nodeArray0 = new Node[0];
      Document document4 = (Document)document2.insertChildren((-1), nodeArray0);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("WnuVeLet", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("wnuvelet", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("WnuVeLet", document0.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("WnuVeLet", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("WnuVeLet", document2.baseUri());
      assertEquals("wnuvelet", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("WnuVeLet", document4.location());
      assertEquals("WnuVeLet", document4.baseUri());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("wnuvelet", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertNotNull(document4);
      assertEquals(0, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = new Document("br");
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      DataNode dataNode0 = new DataNode("br");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      DataNode dataNode1 = dataNode0.setWholeData("");
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      assertFalse(dataNode1.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertNotNull(dataNode1);
      
      Document document1 = (Document)document0.prependChild(dataNode1);
      assertSame(document0, document1);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertTrue(dataNode0.hasParent());
      assertTrue(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals(0, dataNode1.siblingIndex());
      assertEquals("br", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("br", document1.location());
      assertNotNull(document1);
      
      List<DataNode> list0 = document0.dataNodes();
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "5^Q#wt^";
      Document document0 = Parser.parseBodyFragmentRelaxed("5^Q#wt^", "5^Q#wt^");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("nnhTb>[MnWp~g83(pPB");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text("5^Q#wt^");
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#cdata", textNode0.nodeName());
      assertNotNull(textNode0);
      
      document0.parentNode = (Node) textNode0;
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("rawtext");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "br";
      Document document0 = Parser.parse("br", "f");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("f", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("f", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Parser parser2 = parser1.setTrackErrors(23);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertNotNull(parser2);
      
      Document document1 = document0.parser(parser2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("f", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("f", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("f", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("f", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Charset charset0 = document0.charset();
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("f", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("f", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("f", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("f", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document document2 = document1.outputSettings(document_OutputSettings1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("f", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("f", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("f", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("f", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("f", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("f", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document2.tagName("9)#,:ht;'AkY^b93");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000044 cp367 #oo<rwq iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "U");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("U", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("U", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("U", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("U", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("U", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("U", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Set<String> set0 = document1.classNames();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("U", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("U", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("U", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("U", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("U"));
      
      StringBuilder stringBuilder0 = new StringBuilder("org.jsoup.parser.Token$StartTag");
      assertEquals("org.jsoup.parser.Token$StartTag", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertNotNull(document_OutputSettings3);
      
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 57343, document_OutputSettings3);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5^Q#wt^", "5^Q#wt^");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.after("5^Q#wt^");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("5^Q#wt^", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      
      String string0 = element0.cssSelector();
      assertSame(element0, element1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(string0);
      assertEquals("html > body:nth-child(2)", string0);
      
      // Undeclared exception!
      try { 
        element0.is("~}MA.D<P8w't,- qu");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}MA.D<P8w't': unexpected token at '}MA.D<P8w't'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".^Q#wt^", ".^Q#wt^");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".^Q#wt^", document0.baseUri());
      assertEquals(".^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass(".^Q#wt^");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".^Q#wt^", document0.baseUri());
      assertEquals(".^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(".^Q#wt^", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(".^Q#wt^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertNotNull(uS_ASCII0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".^Q#wt^", document0.baseUri());
      assertEquals(".^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(".^Q#wt^", document2.location());
      assertEquals(".^Q#wt^", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.addClass(" > ");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".^Q#wt^", document0.baseUri());
      assertEquals(".^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(".^Q#wt^", document2.location());
      assertEquals(".^Q#wt^", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(".^Q#wt^", document3.location());
      assertEquals(".^Q#wt^", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      
      boolean boolean0 = document0.hasClass("acronym");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".^Q#wt^", document0.baseUri());
      assertEquals(".^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)89;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)71, (byte)18, (byte)36, (byte)64, (byte)27, (byte)34, (byte)116, (byte) (-1), (byte)89}, byteArray0);
      
      String string0 = "textarea";
      Element element0 = new Element("textarea");
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.text("textarea");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      Elements elements0 = element1.getElementsByTag("textarea");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("textarea", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element2 = element0.appendText("*tsmc68Q_\"");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("textarea", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(2, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals("textarea", element2.tagName());
      assertFalse(element2.hasParent());
      assertNotNull(element2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '[';
      charArray0[2] = 'o';
      charArray0[3] = '?';
      charArray0[4] = ']';
      charArray0[5] = '#';
      charArray0[6] = 'm';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("<[o?]#m", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(7, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'<', '[', 'o', '?', ']', '#', 'm'}, charArray0);
      
      // Undeclared exception!
      try { 
        element2.outerHtml((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5^Q#wt^", "5^Q#wt^");
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("5^Q#wt^");
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("5^q#wt^", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("5^q#wt^", element0.tagName());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertNotNull(element0);
      
      element0.siblingIndex = (-774);
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("5^q#wt^", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals((-774), element0.siblingIndex());
      assertEquals("5^q#wt^", element0.tagName());
      assertEquals("5^Q#wt^", element0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("i");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5^Q#wt^", "5^Q#wt^");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("br");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("br", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("5^Q#wt^", element1.baseUri());
      assertEquals("br", element1.tagName());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      
      String string0 = document0.html();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertNotNull(string0);
      assertEquals("<br><br></br>\n<html>\n <head></head>\n <body>\n  5^Q#wt^\n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("PX@3~a;:e", "PX@3~a;:e");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("default", "id");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements1 = document0.getElementsMatchingOwnText("PX@3~a;:e");
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("default", false);
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertNotNull(xmlDeclaration0);
      
      Document document1 = (Document)document0.doClone(xmlDeclaration0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.prependChild(document1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5^Q#wt^", "5^Q#wt^");
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertNotNull(element0);
      
      List<Node> list0 = Parser.parseFragment("", element0, "br");
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      element0.childNodes = list0;
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, element0.childNodes.size());
      assertTrue(element0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        element0.prepend("br");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WraVeset", "WraVeset");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("WraVeset", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("WraVeset", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      document0.childNodes = null;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("WraVeset", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("WraVeset", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("at", "V:^");
      assertFalse(document0.hasParent());
      assertEquals("V:^", document0.location());
      assertEquals("V:^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("V:^");
      assertFalse(document0.hasParent());
      assertEquals("V:^", document0.location());
      assertEquals("V:^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("V:^", element0.tagName());
      assertEquals("V:^", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("V:^", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.val("b.oq<q");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("V:^", document0.location());
      assertEquals("V:^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("V:^", element0.tagName());
      assertEquals("V:^", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("V:^", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("V:^", element1.nodeName());
      assertEquals("V:^", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("V:^", element1.tagName());
      assertNotNull(element1);
      
      document0.setParentNode(element0);
      assertSame(element0, element1);
      assertEquals("V:^", document0.location());
      assertEquals("V:^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("V:^", element0.tagName());
      assertEquals("V:^", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("V:^", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("V:^", document0.location());
      assertEquals("V:^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element2 = document0.parent();
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals("V:^", document0.location());
      assertEquals("V:^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertEquals("V:^", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("V:^", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("V:^", element2.nodeName());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5^Q#wt^", "5^Q#wt^");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasClass(">Xa:CsA>NnX;XRy*Y&v");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">Xa:CsA>NnX;XRy*Y&v");
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(19, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(19, charBuffer0.remaining());
      assertEquals(19, charBuffer0.capacity());
      assertEquals(19, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(">Xa:CsA>NnX;XRy*Y&v", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 26, document_OutputSettings2);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1( 5TP:`,K\"Be=k:Y;-", "1( 5TP:`,K\"Be=k:Y;-");
      assertEquals("#document", document0.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document1.location());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      document0.siblingIndex = (-1034);
      assertEquals((-1034), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document1.getElementsByIndexEquals(25);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals((-1034), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document1.location());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals((-1034), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.empty();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals((-1034), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document1.location());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals((-1034), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document2.baseUri());
      assertEquals((-1034), document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Map<String, String> map0 = document0.dataset();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals((-1034), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      List<TextNode> list0 = document1.textNodes();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals((-1034), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document1.location());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals((-1034), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document3 = (Document)document0.prependChild(document1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document1.location());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("1( 5TP:`,K\"Be=k:Y;-", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document0.selectFirst("1( 5TP:`,K\"Be=k:Y;-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '1( 5TP:`,K\"Be=k:Y;-': unexpected token at '( 5TP:`,K\"Be=k:Y;-'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5^H#t", "5^H#t");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("5^H#t", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^H#t", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Comment comment0 = new Comment("=L7I");
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      document0.setParentNode(comment0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("5^H#t", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^H#t", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      
      boolean boolean0 = document0.hasClass("=L7I");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("5^H#t", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("5^H#t", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document0.wrap("5^H#t");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5^Q#wt^", "5^Q#wt^");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("version");
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("version", element0.nodeName());
      assertEquals("version", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsMatchingOwnText(".");
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      Element element1 = element0.attr("version", false);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("version", element0.nodeName());
      assertEquals("version", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("version", element1.nodeName());
      assertEquals("version", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("5^Q#wt^", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      nodeArray0[1] = (Node) element0;
      Element element2 = element0.insertChildren(0, nodeArray0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("version", element0.nodeName());
      assertEquals("version", element0.tagName());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("5^Q#wt^", element2.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertEquals("version", element2.nodeName());
      assertEquals("version", element2.tagName());
      assertNotNull(element2);
      assertEquals(2, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Wrameset", "Wrameset");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Wrameset", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Wrameset", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode(":only-child", "Wrameset");
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      document0.setParentNode(textNode0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("Wrameset", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Wrameset", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(":only-child");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("]C/", "]C/");
      assertEquals("]C/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("]C/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals(2, document0.childNodeSize());
      assertEquals("]C/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("]C/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("]C/", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.appendElement("ismap");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals(2, document0.childNodeSize());
      assertEquals("]C/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("]C/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals("]C/", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("ismap", element1.tagName());
      assertEquals("]C/", element1.baseUri());
      assertEquals("ismap", element1.nodeName());
      assertNotNull(element1);
      
      element0.setSiblingIndex((-869));
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertEquals(2, document0.childNodeSize());
      assertEquals("]C/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("]C/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals("]C/", element0.baseUri());
      assertEquals((-869), element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5^Q#wt^", "5^Q#wt^");
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.prepend("br");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("br", element1.tagName());
      assertEquals("5^Q#wt^", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("br", element1.nodeName());
      assertNotNull(element1);
      
      String string0 = document0.html();
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertEquals("<br>br</br>\n<html>\n <head></head>\n <body>\n  5^Q#wt^\n </body>\n</html>", string0);
      
      String string1 = element1.val();
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("br", element1.tagName());
      assertEquals("5^Q#wt^", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("br", element1.nodeName());
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$@T.NVPNag8;cFn[>W", "$@T.NVPNag8;cFn[>W");
      assertEquals("$@T.NVPNag8;cFn[>W", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("$hm-gLGVJ^");
      assertEquals("$@T.NVPNag8;cFn[>W", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("$hm-glgvj^", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("$@T.NVPNag8;cFn[>W", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$hm-glgvj^", element0.tagName());
      assertNotNull(element0);
      
      document0.setParentNode(document0);
      assertTrue(document0.hasParent());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      
      String string0 = document0.text();
      assertTrue(document0.hasParent());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertNotNull(string0);
      assertEquals("$@T.NVPNag8;cFn[>W", string0);
      
      Element element1 = document0.nextElementSibling();
      assertSame(element1, element0);
      assertTrue(document0.hasParent());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertEquals("$hm-glgvj^", element1.nodeName());
      assertEquals("$hm-glgvj^", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("$@T.NVPNag8;cFn[>W", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "reversed");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("reversed", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.tagName("textarea");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.tagName());
      assertEquals("reversed", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.tagName());
      assertEquals("reversed", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      String string0 = document0.val();
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.tagName());
      assertEquals("reversed", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(string0);
      assertEquals("textarea", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5^Q#wt^", "5^Q#wt^");
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByTag("j1va.lang.string@0000000043");
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      element0.parentNode = (Node) document0;
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertEquals(0, element0.parentNode.siblingIndex());
      assertFalse(element0.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("$@T.NVPNag8;cFn[>W");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("$@T.NVPNag8;cFn[>W");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("$@T.NVPNag8;cFn[>W", element0.baseUri());
      assertEquals("$@t.nvpnag8;cfn[>w", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("$@t.nvpnag8;cfn[>w", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("$@T.NVPNag8;cFn[>W", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("$@T.NVPNag8;cFn[>W", element0.baseUri());
      assertEquals("$@t.nvpnag8;cfn[>w", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("$@t.nvpnag8;cfn[>w", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("$@T.NVPNag8;cFn[>W", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("$@t.nvpnag8;cfn[>w", element1.nodeName());
      assertEquals("$@t.nvpnag8;cfn[>w", element1.tagName());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5^Q#wt^", "5^Q#wt^");
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      element0.parentNode = (Node) document0;
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.parentNode.siblingIndex());
      assertFalse(element0.parentNode.hasParent());
      
      String string0 = element0.cssSelector();
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertNotNull(string0);
      assertEquals("body", string0);
      
      // Undeclared exception!
      try { 
        document0.getElementById("body");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5^H#t", "5^H#t");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("5^H#t", document0.location());
      assertEquals("5^H#t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("KR");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("5^H#t", document0.location());
      assertEquals("5^H#t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("kr", element0.tagName());
      assertEquals("5^H#t", element0.baseUri());
      assertEquals("kr", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByTag("#h");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("5^H#t", document0.location());
      assertEquals("5^H#t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("kr", element0.tagName());
      assertEquals("5^H#t", element0.baseUri());
      assertEquals("kr", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element1 = element0.selectFirst("KR");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("5^H#t", document0.location());
      assertEquals("5^H#t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("kr", element0.tagName());
      assertEquals("5^H#t", element0.baseUri());
      assertEquals("kr", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertEquals("5^H#t", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("kr", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("kr", element1.tagName());
      assertNotNull(element1);
      
      List<Node> list0 = Parser.parseFragment("lp6<jos", element0, "#h");
      assertSame(element0, element1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("5^H#t", document0.location());
      assertEquals("5^H#t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("kr", element0.tagName());
      assertEquals("5^H#t", element0.baseUri());
      assertEquals("kr", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      element1.childNodes = list0;
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("5^H#t", document0.location());
      assertEquals("5^H#t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("kr", element0.tagName());
      assertEquals("5^H#t", element0.baseUri());
      assertEquals("kr", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertEquals("5^H#t", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("kr", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("kr", element1.tagName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(element1.childNodes.isEmpty());
      assertEquals(1, element1.childNodes.size());
      
      Element element2 = element1.before((Node) document0);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("5^H#t", document0.location());
      assertEquals("5^H#t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("kr", element0.tagName());
      assertEquals("5^H#t", element0.baseUri());
      assertEquals("kr", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertEquals("5^H#t", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("kr", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("kr", element1.tagName());
      assertEquals("kr", element2.tagName());
      assertEquals("5^H#t", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("kr", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Wrameset", "Wrameset");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Wrameset", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Wrameset", document0.location());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.tagName("Wrameset");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Wrameset", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("wrameset", document0.tagName());
      assertEquals("Wrameset", document0.location());
      assertEquals("wrameset", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Wrameset", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Wrameset", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.selectFirst("Wrameset");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Wrameset", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("wrameset", document0.tagName());
      assertEquals("Wrameset", document0.location());
      assertEquals("wrameset", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Wrameset", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Wrameset", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("wrameset", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("Wrameset", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("Wrameset", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("^(R]adf&B4@yP_RV)");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(R]adf&B4@yP_RV)", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.text("hp;Te?!UI08");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^(R]adf&B4@yP_RV)", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("^(R]adf&B4@yP_RV)", document1.location());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.prependText("E;&=>sR9%L4W<\"T:'");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("^(R]adf&B4@yP_RV)", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^(R]adf&B4@yP_RV)", document2.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsContainingText("O!sUP8.}TO+KOkVzS");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("^(R]adf&B4@yP_RV)", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^(R]adf&B4@yP_RV)", document2.location());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Element element1 = element0.firstElementSibling();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(R]adf&B4@yP_RV)", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("^(R]adf&B4@yP_RV)", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("br", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        document2.after("71$7e$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("qP,'amH4Pt");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("qP,'amH4Pt", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("qP,'amH4Pt", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("qP,'amH4Pt");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("qP,'amH4Pt"));
      
      Document document1 = (Document)document0.classNames(set0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("qP,'amH4Pt", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("qP,'amH4Pt", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("qP,'amH4Pt", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("qP,'amH4Pt", document1.baseUri());
      assertNotNull(document1);
      assertFalse(set0.contains("qP,'amH4Pt"));
      
      document0.setParentNode(cDataNode0);
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("qP,'amH4Pt", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("qP,'amH4Pt", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!--", "9(5");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("9(5", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("9(5", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string0 = document0.data();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("9(5", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("9(5", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("LR4}7KO^93ZSA");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LR4}7KO^93ZSA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("LR4}7KO^93ZSA", document0.location());
      assertNotNull(document0);
      
      String string0 = document0.val();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LR4}7KO^93ZSA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("LR4}7KO^93ZSA", document0.location());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element0 = document0.appendElement("LR4}7KO^93ZSA");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LR4}7KO^93ZSA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("LR4}7KO^93ZSA", document0.location());
      assertEquals("lr4}7ko^93zsa", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("LR4}7KO^93ZSA", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("lr4}7ko^93zsa", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Attributes attributes0 = document0.attributes();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LR4}7KO^93ZSA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("LR4}7KO^93ZSA", document0.location());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Element element1 = element0.clone();
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LR4}7KO^93ZSA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("LR4}7KO^93ZSA", document0.location());
      assertEquals("lr4}7ko^93zsa", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("LR4}7KO^93ZSA", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("lr4}7ko^93zsa", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("lr4}7ko^93zsa", element1.nodeName());
      assertEquals("lr4}7ko^93zsa", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("LR4}7KO^93ZSA", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      int int0 = element0.elementSiblingIndex();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LR4}7KO^93ZSA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("LR4}7KO^93ZSA", document0.location());
      assertEquals("lr4}7ko^93zsa", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("LR4}7KO^93ZSA", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("lr4}7ko^93zsa", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, int0);
      
      element0.setSiblingIndex((-2241));
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LR4}7KO^93ZSA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("LR4}7KO^93ZSA", document0.location());
      assertEquals("lr4}7ko^93zsa", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("LR4}7KO^93ZSA", element0.baseUri());
      assertEquals((-2241), element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("lr4}7ko^93zsa", element0.nodeName());
      assertTrue(element0.hasParent());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~,'VWQg3+M34^JK");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)60;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)60}, byteArray0);
      
      Elements elements0 = element0.nextElementSiblings();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LR4}7KO^93ZSA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("LR4}7KO^93ZSA", document0.location());
      assertEquals("lr4}7ko^93zsa", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("LR4}7KO^93ZSA", element0.baseUri());
      assertEquals((-2241), element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("lr4}7ko^93zsa", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        element0.getAllElements();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("Wrameset", "Wrameset");
      assertEquals("Wrameset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Wrameset", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.tagName("Wrameset");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Wrameset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("wrameset", document0.tagName());
      assertEquals("Wrameset", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Wrameset", document1.baseUri());
      assertEquals("wrameset", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Wrameset", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      String string0 = document0.val();
      assertSame(document0, document1);
      assertEquals("Wrameset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("wrameset", document0.tagName());
      assertEquals("Wrameset", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.text();
      assertSame(document0, document1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Wrameset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("wrameset", document0.tagName());
      assertEquals("Wrameset", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string1);
      assertEquals("Wrameset", string1);
      
      // Undeclared exception!
      try { 
        document1.is("fv[LT%CZ=pS.Um,\"P");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%C'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("5^Q#wt^", "5^Q#wt^");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("2ri^omyae:1b=lr8");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      document0.parentNode = (Node) textNode0;
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertNotNull(string0);
      assertEquals("html > body", string0);
      
      Document document1 = Parser.parseBodyFragment("5^Q#wt^", "5^Q#wt^");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("5^Q#wt^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("5^Q#wt^", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.appendTo(document1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = new Document("$@T.NVPNag;Fb{\"W");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("$@T.NVPNag;Fb{\"W", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("$@T.NVPNag;Fb{\"W", document0.baseUri());
      assertNotNull(document0);
      
      MockPrintWriter mockPrintWriter0 = document0.html((MockPrintWriter) null);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("$@T.NVPNag;Fb{\"W", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("$@T.NVPNag;Fb{\"W", document0.baseUri());
      assertNull(mockPrintWriter0);
      
      document0.setParentNode(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("$@T.NVPNag;Fb{\"W", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("$@T.NVPNag;Fb{\"W", document0.baseUri());
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("$@T.NVPNag;Fb{\"W", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("$@T.NVPNag;Fb{\"W", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("<!doctype", "class");
      assertEquals("class", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals("class", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("class", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("class", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("org.jsoup.nodes.Element$2");
      assertEquals("class", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("class", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("Pattern syntax error: "));
      
      Document document1 = (Document)document0.classNames(set0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Pattern syntax error: ", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertFalse(set0.contains("Pattern syntax error: "));
      
      Elements elements0 = document1.getElementsByClass("java.lang.string@0000000038");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Pattern syntax error: ", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Pattern syntax error: ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertFalse(set0.contains("Pattern syntax error: "));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("k", "I$sert plsitionoutMof bounds.");
      assertEquals("I$sert plsitionoutMof bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("I$sert plsitionoutMof bounds.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals("I$sert plsitionoutMof bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("I$sert plsitionoutMof bounds.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("I$sert plsitionoutMof bounds.", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      String string0 = element0.outerHtml();
      assertEquals("I$sert plsitionoutMof bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("I$sert plsitionoutMof bounds.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("I$sert plsitionoutMof bounds.", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(string0);
      assertEquals("<br>", string0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("I$sert plsitionoutMof bounds.");
      assertEquals("I$sert plsitionoutMof bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("I$sert plsitionoutMof bounds.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.wrap("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "5^H#t";
      Document document0 = Parser.parseBodyFragmentRelaxed("5^H#t", "5^H#t");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("5^H#t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^H#t", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = Parser.parse("5^H#t", "5^H#t");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("5^H#t", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("5^H#t", document1.baseUri());
      assertNotNull(document1);
      
      Element element0 = document0.prependElement("br");
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("5^H#t", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("5^H#t", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("5^H#t", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals("G", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'G'}, charArray0);
      
      // Undeclared exception!
      try { 
        element0.outerHtml((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("9C/", "k");
      assertFalse(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("k", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertFalse(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("k", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("k", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertFalse(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("k", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element1 = element0.previousElementSibling();
      assertFalse(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("k", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("k", element0.baseUri());
      assertNull(element1);
      
      Tag tag0 = element0.tag();
      assertFalse(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("k", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("k", element0.baseUri());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertEquals("br", tag0.getName());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$@T.^Nag;F{\"W", "$@T.^Nag;F{\"W");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("$@T.^Nag;F{\"W", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$@T.^Nag;F{\"W", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("$@T.^Nag;F{\"W", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("$@T.^Nag;F{\"W", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.text();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("$@T.^Nag;F{\"W", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("$@T.^Nag;F{\"W", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("$@T.^Nag;F{\"W", string0);
      
      DataNode dataNode0 = new DataNode("$@T.^Nag;F{\"W");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      DataNode dataNode1 = dataNode0.setWholeData("$@T.^Nag;F{\"W");
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals(0, dataNode1.siblingIndex());
      assertFalse(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      assertNotNull(dataNode1);
      
      document0.parentNode = (Node) dataNode1;
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("$@T.^Nag;F{\"W", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("$@T.^Nag;F{\"W", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals(0, dataNode1.siblingIndex());
      assertFalse(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("body");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = Parser.parse("Wr3eset", "Wr3eset");
      assertEquals("Wr3eset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Wr3eset", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Set<String> set0 = charset0.aliases();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("Wr3eset"));
      
      Document document1 = (Document)document0.classNames(set0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("Wr3eset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Wr3eset", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(document1.hasParent());
      assertEquals("Wr3eset", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Wr3eset", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(set0.contains("Wr3eset"));
      
      Elements elements0 = document1.getElementsByClass("body");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("Wr3eset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Wr3eset", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(document1.hasParent());
      assertEquals("Wr3eset", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Wr3eset", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(set0.contains("Wr3eset"));
      
      boolean boolean0 = document1.hasClass("cp367");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("Wr3eset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Wr3eset", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(document1.hasParent());
      assertEquals("Wr3eset", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Wr3eset", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(boolean0);
      assertTrue(set0.contains("cp367"));
      assertFalse(set0.contains("body"));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("frameset", "frameset");
      assertEquals("frameset", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("frameset", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = Document.createShell("frameset");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("frameset", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("frameset", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("frameset"));
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document2 = (Document)document0.classNames(set0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertEquals("frameset", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("frameset", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("frameset", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("frameset", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertFalse(set0.contains("frameset"));
      
      Elements elements0 = document2.getElementsByClass("class");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertEquals("frameset", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("frameset", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("frameset", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("frameset", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(set0.contains("class"));
      
      Elements elements1 = document0.getElementsByAttribute("class");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("frameset", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("frameset", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("5^H#t", "5^H#t");
      assertEquals("5^H#t", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("5^H#t", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.nextElementSibling();
      assertEquals("5^H#t", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("5^H#t", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(element0);
      
      Element element1 = document0.prependElement("KR");
      assertEquals("5^H#t", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("5^H#t", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("kr", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("kr", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("5^H#t", element1.baseUri());
      assertNotNull(element1);
      
      Element element2 = element1.attr("}M\"e", "KR");
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertEquals("5^H#t", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("5^H#t", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("kr", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("kr", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("5^H#t", element1.baseUri());
      assertEquals("kr", element2.tagName());
      assertEquals("5^H#t", element2.baseUri());
      assertEquals("kr", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
      
      Elements elements0 = document0.getElementsMatchingOwnText("KR");
      assertEquals("5^H#t", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("5^H#t", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document0.select("KR");
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("5^H#t", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("5^H#t", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("5^Q#t", "5^Q#t");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#t", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("5^Q#t", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#t", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("5^Q#t", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("5^Q#t", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#t", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("5^Q#t", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("5^Q#t", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Element element1 = element0.html("5^Q#t");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("5^Q#t", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("5^Q#t", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("5^Q#t", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("5^Q#t", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us $3h}l> 646 us", "java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us $3h}l> 646 us");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(string0);
      assertEquals("html > head", string0);
      
      Element element1 = element0.html(":%s(%dn)");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      Element element2 = element0.prependChild(document0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element2.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("KR", "Wrameset");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Wrameset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Wrameset", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Wrameset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Wrameset", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("Wrameset", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("Wrameset");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Wrameset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Wrameset", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uMK", "4LO,>d&j#}r1ZYw>n");
      assertEquals("4LO,>d&j#}r1ZYw>n", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("4LO,>d&j#}r1ZYw>n", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      List<Node> list0 = Parser.parseXmlFragment("4LO,>d&j#}r1ZYw>n", "br");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document0.childNodes = list0;
      assertEquals("4LO,>d&j#}r1ZYw>n", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("4LO,>d&j#}r1ZYw>n", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      boolean boolean0 = document0.hasText();
      assertEquals("4LO,>d&j#}r1ZYw>n", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("4LO,>d&j#}r1ZYw>n", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document0.prependText("3{j\"&W6^`.?EJ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "map");
      assertFalse(boolean0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("map", parseSettings0);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("map", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("map", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("g:");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "map", attributes0);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("map", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("map", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("map", formElement0.nodeName());
      assertEquals("map", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("map", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertNotNull(formElement0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element0 = new Element(tag0, " ", attributes0);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("map", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("map", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("map", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(" ", element0.baseUri());
      assertEquals("map", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      FormElement formElement1 = formElement0.addElement(element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("map", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("map", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("map", formElement0.nodeName());
      assertEquals("map", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("map", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("map", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(" ", element0.baseUri());
      assertEquals("map", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("map", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("map", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("map", formElement1.tagName());
      assertNotNull(formElement1);
      
      String string0 = "5^q#wt^";
      TextNode textNode0 = TextNode.createFromEncoded("5^q#wt^");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      String string1 = "Insert position out of bounds.";
      Element element1 = formElement1.append("Insert position out of bounds.");
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element1);
      assertSame(element1, formElement0);
      assertSame(element1, formElement1);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("map", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("map", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("map", formElement0.nodeName());
      assertEquals("map", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("map", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("map", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(" ", element0.baseUri());
      assertEquals("map", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("map", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("map", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("map", formElement1.tagName());
      assertEquals("map", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("map", element1.baseUri());
      assertEquals("map", element1.nodeName());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      
      Map<String, String> map0 = element1.dataset();
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element1);
      assertSame(element1, formElement0);
      assertSame(element1, formElement1);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("map", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("map", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("map", formElement0.nodeName());
      assertEquals("map", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("map", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("map", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(" ", element0.baseUri());
      assertEquals("map", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("map", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("map", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("map", formElement1.tagName());
      assertEquals("map", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("map", element1.baseUri());
      assertEquals("map", element1.nodeName());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      FormElement formElement2 = (FormElement)formElement1.removeClass("g:");
      assertSame(formElement0, formElement2);
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element1);
      assertSame(formElement1, formElement2);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, formElement0);
      assertSame(formElement2, element1);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("map", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("map", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("map", formElement0.nodeName());
      assertEquals("map", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("map", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("map", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(" ", element0.baseUri());
      assertEquals("map", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("map", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals("map", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("map", formElement1.tagName());
      assertEquals("map", formElement2.nodeName());
      assertEquals("map", formElement2.baseUri());
      assertEquals(1, formElement2.childNodeSize());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.isBlock());
      assertEquals("map", formElement2.tagName());
      assertFalse(formElement2.hasParent());
      assertNotNull(formElement2);
      
      String string2 = parseSettings0.normalizeAttribute("8}uw[GKBSM[{ WU?");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("8}uw[GKBSM[{ WU?", string2);
      
      formElement2.setParentNode(textNode0);
      assertSame(formElement0, formElement2);
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element1);
      assertSame(formElement1, formElement2);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, formElement0);
      assertSame(formElement2, element1);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("map", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("map", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("map", formElement0.nodeName());
      assertEquals("map", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("map", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("map", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(" ", element0.baseUri());
      assertEquals("map", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("map", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertTrue(formElement1.hasParent());
      assertEquals("map", formElement1.baseUri());
      assertEquals("map", formElement1.tagName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals("map", formElement2.nodeName());
      assertEquals("map", formElement2.baseUri());
      assertTrue(formElement2.hasParent());
      assertEquals(1, formElement2.childNodeSize());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.isBlock());
      assertEquals("map", formElement2.tagName());
      
      formElement2.nodelistChanged();
      assertSame(formElement0, formElement2);
      assertSame(formElement0, element1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element1);
      assertSame(formElement1, formElement2);
      assertSame(formElement2, formElement1);
      assertSame(formElement2, formElement0);
      assertSame(formElement2, element1);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("map", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("map", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("map", formElement0.nodeName());
      assertEquals("map", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("map", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("map", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(" ", element0.baseUri());
      assertEquals("map", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("map", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertTrue(formElement1.hasParent());
      assertEquals("map", formElement1.baseUri());
      assertEquals("map", formElement1.tagName());
      assertEquals("map", formElement2.nodeName());
      assertEquals("map", formElement2.baseUri());
      assertTrue(formElement2.hasParent());
      assertEquals(1, formElement2.childNodeSize());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.isBlock());
      assertEquals("map", formElement2.tagName());
      
      FormElement formElement3 = (FormElement)formElement2.clone();
      assertNotSame(formElement3, formElement2);
      assertNotSame(formElement3, formElement1);
      assertNotSame(formElement3, element1);
      assertNotSame(formElement3, formElement0);
      assertSame(formElement0, formElement2);
      assertSame(formElement0, element1);
      assertNotSame(formElement0, formElement3);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element1);
      assertSame(formElement1, formElement2);
      assertNotSame(formElement1, formElement3);
      assertSame(formElement2, formElement1);
      assertNotSame(formElement2, formElement3);
      assertSame(formElement2, formElement0);
      assertSame(formElement2, element1);
      assertFalse(formElement3.equals((Object)formElement2));
      assertFalse(formElement3.equals((Object)formElement1));
      assertFalse(formElement3.equals((Object)element1));
      assertFalse(formElement3.equals((Object)formElement0));
      assertEquals(1, formElement3.childNodeSize());
      assertEquals(0, formElement3.siblingIndex());
      assertFalse(formElement3.isBlock());
      assertFalse(formElement3.hasParent());
      assertEquals("map", formElement3.tagName());
      assertEquals("map", formElement3.baseUri());
      assertEquals("map", formElement3.nodeName());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("map", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("map", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("map", formElement0.nodeName());
      assertEquals("map", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("map", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("map", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(" ", element0.baseUri());
      assertEquals("map", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("map", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertTrue(formElement1.hasParent());
      assertEquals("map", formElement1.baseUri());
      assertEquals("map", formElement1.tagName());
      assertEquals("map", formElement2.nodeName());
      assertEquals("map", formElement2.baseUri());
      assertTrue(formElement2.hasParent());
      assertEquals(1, formElement2.childNodeSize());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.isBlock());
      assertEquals("map", formElement2.tagName());
      assertNotNull(formElement3);
      
      Elements elements0 = formElement1.getElementsByClass("g:");
      assertSame(formElement0, formElement2);
      assertSame(formElement0, element1);
      assertNotSame(formElement0, formElement3);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element1);
      assertSame(formElement1, formElement2);
      assertNotSame(formElement1, formElement3);
      assertFalse(formElement0.equals((Object)formElement3));
      assertFalse(formElement1.equals((Object)formElement3));
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("map", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertEquals("map", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("map", formElement0.nodeName());
      assertEquals("map", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("map", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals("map", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(" ", element0.baseUri());
      assertEquals("map", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("map", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertTrue(formElement1.hasParent());
      assertEquals("map", formElement1.baseUri());
      assertEquals("map", formElement1.tagName());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        formElement2.prepend("map");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("Insert plsition outMof bounds.", "Insert plsition outMof bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert plsition outMof bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Insert plsition outMof bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert plsition outMof bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Insert plsition outMof bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert plsition outMof bounds.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.wrap("Insert plsition outMof bounds.");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert plsition outMof bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Insert plsition outMof bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert plsition outMof bounds.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Insert plsition outMof bounds.", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
      
      String string0 = document0.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert plsition outMof bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Insert plsition outMof bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("\"#Kxx}NBOK-'0");
      assertFalse(document0.hasParent());
      assertEquals("\"#Kxx}NBOK-'0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("\"#Kxx}NBOK-'0", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("\"#Kxx}NBOK-'0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("\"#Kxx}NBOK-'0", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("\"#Kxx}NBOK-'0", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("\"#Kxx}NBOK-'0", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Document document2 = Document.createShell("\"#Kxx}NBOK-'0");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("\"#Kxx}NBOK-'0", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("\"#Kxx}NBOK-'0", document2.location());
      assertNotNull(document2);
      
      Element element0 = document1.parent();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("\"#Kxx}NBOK-'0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("\"#Kxx}NBOK-'0", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("\"#Kxx}NBOK-'0", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("\"#Kxx}NBOK-'0", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNull(element0);
      
      String string0 = "nth-child";
      document1.childNodes = null;
      assertFalse(document0.hasParent());
      assertEquals("\"#Kxx}NBOK-'0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("\"#Kxx}NBOK-'0", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("\"#Kxx}NBOK-'0", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("\"#Kxx}NBOK-'0", document1.location());
      assertEquals("#document", document1.nodeName());
      
      // Undeclared exception!
      try { 
        document1.prependText("nth-child");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parse("5^Q#wt^", "5^Q#wt^");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      DocumentType documentType0 = new DocumentType("5^Q#wt^", "I", "5^Q#wt^", "sAXZ?p[#A", "<nQ`2A HCYFN");
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertNotNull(documentType0);
      
      Document document1 = (Document)document0.doClone(documentType0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("5^Q#wt^", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("5^Q#wt^", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Element element0 = document0.prependElement("KR");
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("kr", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kr", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.after(".");
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("kr", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kr", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertEquals("kr", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("5^Q#wt^", element1.baseUri());
      assertEquals("kr", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      Document document2 = (Document)document0.prependText("5^Q#wt^");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(4, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("5^Q#wt^", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("5^Q#wt^", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      String string0 = document0.text();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertEquals("5^Q#wt^. 5^Q#wt^", string0);
      
      Elements elements0 = element0.getElementsMatchingOwnText("KR");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element1);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("5^Q#wt^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("5^Q#wt^", document0.baseUri());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("kr", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kr", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("5^Q#wt^", element0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$3H}l>", "$3H}l>");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("$3H}l>", document0.location());
      assertEquals("$3H}l>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("ME+MUf<X0;tlE?]0zI", "D>;sW:w7Y|:hGLY*7h");
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      Document document1 = (Document)document0.prependChild(dataNode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("$3H}l>", document0.location());
      assertEquals("$3H}l>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("$3H}l>", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("$3H}l>", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Elements elements0 = document0.getElementsByClass("ME+MUf<X0;tlE?]0zI");
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("$3H}l>", document0.location());
      assertEquals("$3H}l>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      boolean boolean0 = document0.hasText();
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("$3H}l>", document0.location());
      assertEquals("$3H}l>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("i8;3=l+;rh", "BC&y0VD!&[JJc4`");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("BC&y0VD!&[JJc4`", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BC&y0VD!&[JJc4`", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("BC&y0VD!&[JJc4`", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BC&y0VD!&[JJc4`", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("BC&y0VD!&[JJc4`", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      String string0 = element0.wholeText();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("BC&y0VD!&[JJc4`", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BC&y0VD!&[JJc4`", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("BC&y0VD!&[JJc4`", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = element0.getElementsByIndexLessThan(2329);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("BC&y0VD!&[JJc4`", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("BC&y0VD!&[JJc4`", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("BC&y0VD!&[JJc4`", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element1 = element0.appendTo(document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("BC&y0VD!&[JJc4`", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("BC&y0VD!&[JJc4`", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("BC&y0VD!&[JJc4`", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("BC&y0VD!&[JJc4`", element1.baseUri());
      assertNotNull(element1);
      
      Element element2 = element0.firstElementSibling();
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("BC&y0VD!&[JJc4`", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("BC&y0VD!&[JJc4`", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("BC&y0VD!&[JJc4`", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("html", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("BC&y0VD!&[JJc4`", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
      
      Elements elements1 = element1.getElementsByAttributeValueNot("i8;3=l+;rh", "BC&y0VD!&[JJc4`");
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("BC&y0VD!&[JJc4`", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("BC&y0VD!&[JJc4`", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("BC&y0VD!&[JJc4`", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("BC&y0VD!&[JJc4`", element1.baseUri());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document document0 = Parser.parse("-Sl&G8SQSZv}@c", "t?.q,&zng");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("t?.q,&zng", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("t?.q,&zng", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = "xmC;wwGw";
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        document0.outerHtmlTail(pipedWriter0, (-1601), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parse(",8;#`g'azi6)", ",8;#`g'azi6)");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(",8;#`g'azi6)", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(",8;#`g'azi6)", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode(",8;#`g'azi6)");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.clone();
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.equals((Object)cDataNode0));
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.hasParent());
      assertNotNull(node0);
      
      document0.setParentNode(node0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(",8;#`g'azi6)", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(",8;#`g'azi6)", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.hasParent());
      
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      String string0 = "frameset";
      Document document0 = new Document("frameset");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("frameset", document0.location());
      assertEquals("frameset", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("frameset", document0.location());
      assertEquals("frameset", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("frameset", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("frameset", document1.baseUri());
      assertNotNull(document1);
      
      Document document2 = document1.parser(parser1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("frameset", document0.location());
      assertEquals("frameset", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("frameset", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("frameset", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("frameset", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("frameset", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      String string1 = document2.val();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("frameset", document0.location());
      assertEquals("frameset", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("frameset", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("frameset", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("frameset", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("frameset", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("frameset", document0.location());
      assertEquals("frameset", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("frameset", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("frameset", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("frameset", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("frameset", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(boolean0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        document1.outerHtmlHead(pipedWriter0, (-1), document_OutputSettings1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tfoot", "prompt");
      assertFalse(document0.hasParent());
      assertEquals("prompt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("prompt", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.tagName("tfoot");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertTrue(document0.isBlock());
      assertEquals("prompt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("prompt", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfoot", document0.tagName());
      assertEquals("prompt", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("tfoot", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("prompt", document1.baseUri());
      assertNotNull(document1);
      
      String string0 = document0.val();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertTrue(document0.isBlock());
      assertEquals("prompt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("prompt", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfoot", document0.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertTrue(document0.isBlock());
      assertEquals("prompt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("prompt", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfoot", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string1 = document0.id();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertTrue(document0.isBlock());
      assertEquals("prompt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("prompt", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfoot", document0.tagName());
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("Insert plsition outMof bounds.", "Insert plsition outMof bounds.");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert plsition outMof bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert plsition outMof bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("+$\r`h");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert plsition outMof bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert plsition outMof bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Insert plsition outMof bounds.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert plsition outMof bounds.", document1.baseUri());
      assertNotNull(document1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert plsition outMof bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert plsition outMof bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert plsition outMof bounds.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Insert plsition outMof bounds.", document2.location());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.attr("+$\r`h", "t9hJS<");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert plsition outMof bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert plsition outMof bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert plsition outMof bounds.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Insert plsition outMof bounds.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("Insert plsition outMof bounds.", document3.location());
      assertEquals("Insert plsition outMof bounds.", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      
      boolean boolean0 = document2.hasClass("Insert plsition outMof bounds.");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert plsition outMof bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert plsition outMof bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert plsition outMof bounds.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Insert plsition outMof bounds.", document2.location());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^(R]adf&B4@yP_RV)", "^(R]adf&B4@yP_RV)");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("^(R]adf&B4@yP_RV)", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.prependText("^(R]adf&B4@yP_RV)");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("^(R]adf&B4@yP_RV)", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals("^(R]adf&B4@yP_RV)", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      
      String string0 = document0.text();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("^(R]adf&B4@yP_RV)^(R]adf&B4@yP_RV)", string0);
      
      Element element2 = element0.doClone((Node) null);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("^(R]adf&B4@yP_RV)", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element2.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals("^(R]adf&B4@yP_RV)", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("body", element2.tagName());
      assertNotNull(element2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "^(R]adf&B4@yP_RV)^(R]adf&B4@yP_RV)");
      assertEquals(34, charBuffer0.remaining());
      assertEquals(34, charBuffer0.capacity());
      assertEquals("^(R]adf&B4@yP_RV)^(R]adf&B4@yP_RV)", charBuffer0.toString());
      assertEquals(34, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(34, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertNotNull(document_OutputSettings3);
      
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings3.coreCharset = entities_CoreCharset0;
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(true);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertNotNull(document_OutputSettings4);
      
      // Undeclared exception!
      try { 
        element2.outerHtmlTail(charBuffer0, 2259, document_OutputSettings4);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Tag tag0 = Tag.valueOf("font");
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("font", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("font", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      Attribute attribute0 = Attribute.createFromEncoded("Wrameset", "font");
      assertEquals("Wrameset", attribute0.getKey());
      assertEquals("font", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("Wrameset", attribute0.getKey());
      assertEquals("font", attribute0.getValue());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      Attributes attributes3 = attributes2.put("Wrameset", false);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("Wrameset", attribute0.getKey());
      assertEquals("font", attribute0.getValue());
      assertEquals(0, attributes2.size());
      assertEquals(0, attributes3.size());
      assertNotNull(attributes3);
      
      FormElement formElement0 = new FormElement(tag0, "Wrameset", attributes3);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("font", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("font", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("Wrameset", attribute0.getKey());
      assertEquals("font", attribute0.getValue());
      assertEquals(0, attributes2.size());
      assertEquals(0, attributes3.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("Wrameset", formElement0.baseUri());
      assertEquals("font", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("font", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      Elements elements0 = formElement0.getElementsByAttributeValueContaining("0 ;{5>6ow(BrwV.aL{^", "cK");
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("font", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("font", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("Wrameset", attribute0.getKey());
      assertEquals("font", attribute0.getValue());
      assertEquals(0, attributes2.size());
      assertEquals(0, attributes3.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("Wrameset", formElement0.baseUri());
      assertEquals("font", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("font", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Tag tag1 = formElement0.tag();
      assertSame(tag0, tag1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes3, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(tag1, tag0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("font", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("font", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("Wrameset", attribute0.getKey());
      assertEquals("font", attribute0.getValue());
      assertEquals(0, attributes2.size());
      assertEquals(0, attributes3.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("Wrameset", formElement0.baseUri());
      assertEquals("font", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("font", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(tag1.isInline());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isData());
      assertTrue(tag1.isKnownTag());
      assertEquals("font", tag1.getName());
      assertFalse(tag1.formatAsBlock());
      assertEquals("font", tag1.toString());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isFormListed());
      assertNotNull(tag1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("^(R]adf&B4@yP_", "^(R]adf&B4@yP_");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]adf&B4@yP_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("^(R]adf&B4@yP_", false);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertNotNull(xmlDeclaration0);
      
      Document document1 = (Document)document0.doClone(xmlDeclaration0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("^(R]adf&B4@yP_", document1.baseUri());
      assertEquals("^(R]adf&B4@yP_", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Elements elements0 = document1.getElementsByAttribute("l){is&:m\"#55hne");
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("^(R]adf&B4@yP_", document1.baseUri());
      assertEquals("^(R]adf&B4@yP_", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.text();
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("^(R]adf&B4@yP_", string0);
      
      Element element0 = document0.lastElementSibling();
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document1.before("^(R]adf&B4@yP_");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = new Element("Tag name must not be empty.");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Tag name must not be empty.", element0.tagName());
      assertEquals("Tag name must not be empty.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.addClass("Tag name must not be empty.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      boolean boolean1 = document0.hasClass("Tag name must not be empty.");
      assertSame(document0, document1);
      assertTrue(boolean1 == boolean0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(boolean1);
      
      String string0 = element0.wholeText();
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Tag name must not be empty.", element0.tagName());
      assertEquals("Tag name must not be empty.", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element1 = document1.parent();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(element1);
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue("", "Insert position out of bounds.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax1 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings_Syntax1, document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings_Syntax1.equals((Object)document_OutputSettings_Syntax0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(121);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings_Syntax1, document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings_Syntax1.equals((Object)document_OutputSettings_Syntax0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(121, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(121, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(121, document_OutputSettings4.indentAmount());
      assertNotNull(document_OutputSettings4);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.syntax(document_OutputSettings_Syntax0);
      assertNotSame(document_OutputSettings_Syntax0, document_OutputSettings_Syntax1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings_Syntax1, document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertFalse(document_OutputSettings_Syntax0.equals((Object)document_OutputSettings_Syntax1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings_Syntax1.equals((Object)document_OutputSettings_Syntax0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(121, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(121, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertEquals(121, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertEquals(121, document_OutputSettings5.indentAmount());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertNotNull(document_OutputSettings5);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("_3|u)8n 3hc?V/a", "kPvo[9lsh0;]F 9");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kPvo[9lsh0;]F 9", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("kPvo[9lsh0;]F 9", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings2.charset(charset0);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings6);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertSame(document_OutputSettings6, document_OutputSettings5);
      assertSame(document_OutputSettings6, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings2);
      assertSame(document_OutputSettings6, document_OutputSettings3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings1));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(121, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(121, document_OutputSettings6.indentAmount());
      assertTrue(document_OutputSettings6.prettyPrint());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings6.syntax());
      assertNotNull(document_OutputSettings6);
      
      Document document1 = document0.outputSettings(document_OutputSettings6);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings6);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertSame(document_OutputSettings6, document_OutputSettings5);
      assertSame(document_OutputSettings6, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings2);
      assertSame(document_OutputSettings6, document_OutputSettings3);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings1));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(121, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kPvo[9lsh0;]F 9", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("kPvo[9lsh0;]F 9", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(121, document_OutputSettings6.indentAmount());
      assertTrue(document_OutputSettings6.prettyPrint());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings6.syntax());
      assertEquals("kPvo[9lsh0;]F 9", document1.location());
      assertEquals("kPvo[9lsh0;]F 9", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Charset charset1 = document1.charset();
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings6);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(charset0, charset1);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertSame(document_OutputSettings6, document_OutputSettings5);
      assertSame(document_OutputSettings6, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings2);
      assertSame(document_OutputSettings6, document_OutputSettings3);
      assertSame(document1, document0);
      assertSame(charset1, charset0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings1));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(121, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kPvo[9lsh0;]F 9", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("kPvo[9lsh0;]F 9", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(121, document_OutputSettings6.indentAmount());
      assertTrue(document_OutputSettings6.prettyPrint());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings6.syntax());
      assertEquals("kPvo[9lsh0;]F 9", document1.location());
      assertEquals("kPvo[9lsh0;]F 9", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.name());
      assertNotNull(charset1);
      
      Set<String> set0 = charset0.aliases();
      assertSame(charset0, charset1);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("_3|u)8n 3hc?V/a"));
      
      Document document2 = (Document)document1.classNames(set0);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings6);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(charset0, charset1);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertSame(document_OutputSettings6, document_OutputSettings5);
      assertSame(document_OutputSettings6, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings2);
      assertSame(document_OutputSettings6, document_OutputSettings3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings1));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(121, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kPvo[9lsh0;]F 9", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("kPvo[9lsh0;]F 9", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(121, document_OutputSettings6.indentAmount());
      assertTrue(document_OutputSettings6.prettyPrint());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings6.syntax());
      assertEquals("kPvo[9lsh0;]F 9", document1.location());
      assertEquals("kPvo[9lsh0;]F 9", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("kPvo[9lsh0;]F 9", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("kPvo[9lsh0;]F 9", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertFalse(set0.contains("_3|u)8n 3hc?V/a"));
      
      Element element0 = document1.getElementById("$@T.NF^NsaAF{\"W");
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings6);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(charset0, charset1);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertSame(document_OutputSettings6, document_OutputSettings5);
      assertSame(document_OutputSettings6, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings2);
      assertSame(document_OutputSettings6, document_OutputSettings3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings1));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(121, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kPvo[9lsh0;]F 9", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("kPvo[9lsh0;]F 9", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(121, document_OutputSettings6.indentAmount());
      assertTrue(document_OutputSettings6.prettyPrint());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings6.syntax());
      assertEquals("kPvo[9lsh0;]F 9", document1.location());
      assertEquals("kPvo[9lsh0;]F 9", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNull(element0);
      
      Document document3 = Parser.parse("_3|u)8n 3hc?V/a", "$@T.NF^NsaAF{\"W");
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("$@T.NF^NsaAF{\"W", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("$@T.NF^NsaAF{\"W", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Elements elements0 = document3.children();
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals("$@T.NF^NsaAF{\"W", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("$@T.NF^NsaAF{\"W", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document4 = document1.ownerDocument();
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings6);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(charset0, charset1);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertSame(document_OutputSettings6, document_OutputSettings5);
      assertSame(document_OutputSettings6, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings2);
      assertSame(document_OutputSettings6, document_OutputSettings3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings6));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings1));
      assertFalse(document1.equals((Object)document3));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document4.isBlock());
      assertEquals("kPvo[9lsh0;]F 9", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("kPvo[9lsh0;]F 9", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(121, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kPvo[9lsh0;]F 9", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("kPvo[9lsh0;]F 9", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(121, document_OutputSettings6.indentAmount());
      assertTrue(document_OutputSettings6.prettyPrint());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings6.syntax());
      assertEquals("kPvo[9lsh0;]F 9", document1.location());
      assertEquals("kPvo[9lsh0;]F 9", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document4);
      
      boolean boolean0 = document4.hasClass("fHb/.W\"46`o{\"-Zh");
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings6);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(charset0, charset1);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertSame(document_OutputSettings6, document_OutputSettings5);
      assertSame(document_OutputSettings6, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings2);
      assertSame(document_OutputSettings6, document_OutputSettings3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings6));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings1));
      assertFalse(document1.equals((Object)document3));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document4.isBlock());
      assertEquals("kPvo[9lsh0;]F 9", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("kPvo[9lsh0;]F 9", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(121, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("kPvo[9lsh0;]F 9", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("kPvo[9lsh0;]F 9", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(121, document_OutputSettings6.indentAmount());
      assertTrue(document_OutputSettings6.prettyPrint());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings6.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings6.syntax());
      assertEquals("kPvo[9lsh0;]F 9", document1.location());
      assertEquals("kPvo[9lsh0;]F 9", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^(Ri]adf&B4@yP_RV)", "^(Ri]adf&B4@yP_RV)");
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertNotNull(document0);
      
      document0.siblingIndex = (-910);
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals((-910), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      
      Document document1 = (Document)document0.addClass("^(Ri]adf&B4@yP_RV)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals((-910), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.location());
      assertEquals((-910), document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = document1.val();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals((-910), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.location());
      assertEquals((-910), document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = document1.getElementsByClass("Unexpected token type: ");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals((-910), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.location());
      assertEquals((-910), document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "^(R]adf&B4@yP_RV)");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]adf&B4@yP_RV)", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("^(R]adf&B4@yP_RV)", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]adf&B4@yP_RV)", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("^(R]adf&B4@yP_RV)", document1.location());
      assertFalse(document1.isBlock());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("a41", parseSettings0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("a41", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("a41", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      CDataNode cDataNode0 = new CDataNode("");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes1 = cDataNode0.attributes();
      assertNotSame(attributes1, attributes0);
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      attributes0.addAll(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(1, attributes0.size());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes1.size());
      
      Attributes attributes2 = attributes0.put("h%.WfYR|LR", false);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes2.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "h%.WfYR|LR", attributes2);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("a41", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("a41", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("h%.WfYR|LR", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("a41", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("a41", pseudoTextElement0.nodeName());
      assertNotNull(pseudoTextElement0);
      
      Elements elements0 = pseudoTextElement0.previousElementSiblings();
      assertNotSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("a41", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals("a41", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes2.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("h%.WfYR|LR", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("a41", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("a41", pseudoTextElement0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      PipedReader pipedReader0 = new PipedReader(8);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(50);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(50, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(50, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(50, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(50, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(50, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(50, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(50, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(50, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(50, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(50, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(50, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(50, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings4);
      
      document1.outerHtmlTail(pipedWriter0, 8, document_OutputSettings4);
      assertSame(document0, document1);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(50, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(50, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]adf&B4@yP_RV)", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("^(R]adf&B4@yP_RV)", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(50, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(50, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(50, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^(Ri]adf&B4@yP_RV)", "^(Ri]adf&B4@yP_RV)");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("^(Ri]adf&B4@yP_RV)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.addClass("CYFFJ");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document2.baseUri());
      assertNotNull(document2);
      
      boolean boolean0 = document1.hasClass("CYFFJ");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("R<~l|C^ZF_0#]H");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("R<~l|C^ZF_0#]H", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("R<~l|C^ZF_0#]H", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R<~l|C^ZF_0#]H", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.prepend("5g^q#t^");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("R<~l|C^ZF_0#]H", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R<~l|C^ZF_0#]H", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("R<~l|C^ZF_0#]H", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      
      Element element2 = element1.wrap("7a*gwrjWHA,");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("R<~l|C^ZF_0#]H", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R<~l|C^ZF_0#]H", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("R<~l|C^ZF_0#]H", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals("R<~l|C^ZF_0#]H", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertNotNull(element2);
      
      document0.setParentNode(element0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertEquals("#root", document0.tagName());
      assertEquals("R<~l|C^ZF_0#]H", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R<~l|C^ZF_0#]H", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      String string0 = document0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals("R<~l|C^ZF_0#]H", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("html > head:nth-child(2) > body:nth-child(1) > #root", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")R<~l|C^ZF_0#]H", ")R<~l|C^ZF_0#]H");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Document document1 = document0.outputSettings(document_OutputSettings2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(")R<~l|C^ZF_0#]H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(")R<~l|C^ZF_0#]H", document1.location());
      assertNotNull(document1);
      
      Element element0 = document1.createElement("attributeValueUnquoted");
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(")R<~l|C^ZF_0#]H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(")R<~l|C^ZF_0#]H", document1.location());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("attributeValueUnquoted", element0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", element0.baseUri());
      assertEquals("attributeValueUnquoted", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Charset charset0 = document1.charset();
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(")R<~l|C^ZF_0#]H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(")R<~l|C^ZF_0#]H", document1.location());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(")R<~l|C^ZF_0#]H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(")R<~l|C^ZF_0#]H", document1.location());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("attributeValueUnquoted"));
      
      Document document2 = (Document)document1.classNames(set0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(")R<~l|C^ZF_0#]H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(")R<~l|C^ZF_0#]H", document1.location());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(1, document2.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertFalse(set0.contains("attributeValueUnquoted"));
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      
      Elements elements0 = document2.getElementsByClass("gTCg>C'");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(")R<~l|C^ZF_0#]H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(")R<~l|C^ZF_0#]H", document1.location());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(1, document2.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertFalse(set0.contains(")R<~l|C^ZF_0#]H"));
      
      Element element1 = document1.getElementById("Ja04hm@ s@ab7}WxF.");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(")R<~l|C^ZF_0#]H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(")R<~l|C^ZF_0#]H", document1.location());
      assertNull(element1);
      
      Elements elements1 = document0.children();
      assertNotSame(elements1, elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(elements1);
      
      Pattern pattern0 = Pattern.compile("Ja04hm@ s@ab7}WxF.", (-2816));
      assertEquals((-2752), pattern0.flags());
      assertNotNull(pattern0);
      
      boolean boolean0 = document1.hasClass("gTCg>C'");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(")R<~l|C^ZF_0#]H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(")R<~l|C^ZF_0#]H", document1.location());
      assertFalse(boolean0);
      
      Document document3 = (Document)document1.clone();
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(")R<~l|C^ZF_0#]H", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(")R<~l|C^ZF_0#]H", document1.location());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")R<~l|C^ZF_0#]H", ")R<~l|C^ZF_0#]H");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeAttr("Ja04hm@ s@ab7}WxF.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")R<~l|C^ZF_0#]H", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(")R<~l|C^ZF_0#]H", document1.location());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      Document document2 = document0.outputSettings(document_OutputSettings2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertNotNull(document2);
      
      Element element0 = document2.createElement("attributeValueUnquoted");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("attributeValueUnquoted", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(")R<~l|C^ZF_0#]H", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("attributeValueUnquoted", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      String string0 = element0.nodeName();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("attributeValueUnquoted", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(")R<~l|C^ZF_0#]H", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("attributeValueUnquoted", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(string0);
      assertEquals("attributeValueUnquoted", string0);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertNotNull(uS_ASCII0);
      
      Set<String> set0 = uS_ASCII0.aliases();
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("attributeValueUnquoted"));
      
      Document document3 = (Document)document2.classNames(set0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(")R<~l|C^ZF_0#]H", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertFalse(set0.contains("attributeValueUnquoted"));
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertNotNull(document_OutputSettings3);
      
      Elements elements0 = document3.getElementsByClass("gTCg>C'");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(")R<~l|C^ZF_0#]H", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(elements0);
      assertFalse(set0.contains("gTCg>C'"));
      
      Element element1 = document2.getElementById("Ja04hm@ s@ab7}WxF.");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertNull(element1);
      
      Elements elements1 = document0.children();
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      
      Pattern pattern0 = Pattern.compile("Ja04hm@ s@ab7}WxF.", (-2816));
      assertEquals((-2752), pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements2 = document3.getElementsMatchingText(pattern0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals((-2752), pattern0.flags());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(")R<~l|C^ZF_0#]H", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(")R<~l|C^ZF_0#]H", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(elements2);
      assertFalse(set0.contains("gTCg>C'"));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")R<~l|C^ZF_0#]H", ")R<~l|C^ZF_0#]H");
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeAttr("Ja04hm@ s@ab7}WxF.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      
      Document document2 = document0.outputSettings(document_OutputSettings2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      Element element0 = document2.createElement("attributeValueUnquoted");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("attributeValueUnquoted", element0.tagName());
      assertEquals("attributeValueUnquoted", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = element0.nodeName();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("attributeValueUnquoted", element0.tagName());
      assertEquals("attributeValueUnquoted", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", element0.baseUri());
      assertNotNull(string0);
      assertEquals("attributeValueUnquoted", string0);
      
      Charset charset0 = document2.charset();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(")R<~l|C^ZF_0#]H"));
      
      Document document3 = (Document)document2.classNames(set0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(")R<~l|C^ZF_0#]H", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertFalse(set0.contains(")R<~l|C^ZF_0#]H"));
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings3);
      
      Elements elements0 = document3.getElementsByClass("gTCg>C'");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(")R<~l|C^ZF_0#]H", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(elements0);
      assertFalse(set0.contains(")R<~l|C^ZF_0#]H"));
      
      Element element1 = document2.getElementById("Ja04hm@ s@ab7}WxF.");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNull(element1);
      
      Elements elements1 = document0.children();
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      
      Pattern pattern0 = Pattern.compile("Ja04hm@ s@ab7}WxF.", (-2816));
      assertEquals((-2752), pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements2 = document3.getElementsMatchingText(pattern0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals(")R<~l|C^ZF_0#]H", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document0.baseUri());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals((-2752), pattern0.flags());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")R<~l|C^ZF_0#]H", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(")R<~l|C^ZF_0#]H", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(")R<~l|C^ZF_0#]H", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(elements2);
      assertFalse(set0.contains("Ja04hm@ s@ab7}WxF."));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^(Ri]adf&B4@yP_RV)", "^(Ri]adf&B4@yP_RV)");
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.tagName("^(Ri]adf&B4@yP_RV)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(ri]adf&b4@yp_rv)", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.baseUri());
      assertEquals("^(ri]adf&b4@yp_rv)", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      document1.setSiblingIndex(2245);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2245, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(ri]adf&b4@yp_rv)", document0.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals(2245, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document1.baseUri());
      assertEquals("^(ri]adf&b4@yp_rv)", document1.tagName());
      assertFalse(document1.isBlock());
      
      Document document2 = (Document)document0.addClass("^(Ri]adf&B4@yP_RV)");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2245, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(ri]adf&b4@yp_rv)", document0.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("^(ri]adf&b4@yp_rv)", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("^(Ri]adf&B4@yP_RV)", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(2245, document2.siblingIndex());
      assertEquals("^(Ri]adf&B4@yP_RV)", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document2.getElementsByClass("Unexpected token type: ");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2245, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(ri]adf&b4@yp_rv)", document0.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("^(ri]adf&b4@yp_rv)", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("^(Ri]adf&B4@yP_RV)", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(2245, document2.siblingIndex());
      assertEquals("^(Ri]adf&B4@yP_RV)", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document2.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2245, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(ri]adf&b4@yp_rv)", document0.tagName());
      assertEquals("^(Ri]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("^(ri]adf&b4@yp_rv)", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("^(Ri]adf&B4@yP_RV)", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(2245, document2.siblingIndex());
      assertEquals("^(Ri]adf&B4@yP_RV)", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[[}NT", "^(R]adf&B0@yP_RV)");
      assertEquals("^(R]adf&B0@yP_RV)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("^(R]adf&B0@yP_RV)", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.getElementById("body");
      assertEquals("^(R]adf&B0@yP_RV)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("^(R]adf&B0@yP_RV)", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = '?';
      charArray0[2] = '(';
      charArray0[3] = ',';
      charArray0[4] = 'Q';
      charArray0[5] = '&';
      charArray0[6] = 'E';
      charArray0[7] = 'T';
      charArray0[8] = '\\';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(9, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(9, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("G?(,Q&ET\\", charBuffer0.toString());
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'G', '?', '(', ',', 'Q', '&', 'E', 'T', '\\'}, charArray0);
      
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(">-pod", parseSettings0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">-pod", tag0.toString());
      assertEquals(">-pod", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = parseSettings0.normalizeAttribute("#root");
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = Attribute.createFromEncoded(">-pod", "o3{$\"i$!T");
      assertEquals(">-pod", attribute0.getKey());
      assertEquals("o3{$\"i$!T", attribute0.getValue());
      assertNotNull(attribute0);
      
      String string1 = parseSettings0.normalizeTag("AfterDoctypeSystemIdentifier");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("afterdoctypesystemidentifier", string1);
      
      String string2 = parseSettings0.normalizeAttribute("_ib!wz6C_\"c'*m");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("_ib!wz6c_\"c'*m", string2);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(">-pod", attribute0.getKey());
      assertEquals("o3{$\"i$!T", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.clone();
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals(">-pod", attribute0.getKey());
      assertEquals("o3{$\"i$!T", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      FormElement formElement0 = new FormElement(tag0, ">-pod", attributes2);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">-pod", tag0.toString());
      assertEquals(">-pod", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(">-pod", attribute0.getKey());
      assertEquals("o3{$\"i$!T", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(">-pod", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">-pod", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(">-pod", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      String string3 = attributes1.html();
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, attributes0.size());
      assertEquals(">-pod", attribute0.getKey());
      assertEquals("o3{$\"i$!T", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertNotNull(string3);
      assertEquals(" >-pod=\"o3{$&quot;i$!T\"", string3);
      
      int int0 = (-995);
      Elements elements0 = formElement0.getElementsByIndexEquals((-995));
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">-pod", tag0.toString());
      assertEquals(">-pod", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(">-pod", attribute0.getKey());
      assertEquals("o3{$\"i$!T", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(">-pod", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">-pod", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(">-pod", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      List<Node> list0 = formElement0.ensureChildNodes();
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">-pod", tag0.toString());
      assertEquals(">-pod", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(">-pod", attribute0.getKey());
      assertEquals("o3{$\"i$!T", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(">-pod", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">-pod", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(">-pod", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      int int1 = formElement0.elementSiblingIndex();
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(int1 == int0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">-pod", tag0.toString());
      assertEquals(">-pod", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(">-pod", attribute0.getKey());
      assertEquals("o3{$\"i$!T", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(">-pod", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">-pod", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(">-pod", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, int1);
      
      String string4 = formElement0.html();
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">-pod", tag0.toString());
      assertEquals(">-pod", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(">-pod", attribute0.getKey());
      assertEquals("o3{$\"i$!T", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(">-pod", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">-pod", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(">-pod", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = formElement0.tagName();
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">-pod", tag0.toString());
      assertEquals(">-pod", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals(">-pod", attribute0.getKey());
      assertEquals("o3{$\"i$!T", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(">-pod", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">-pod", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(">-pod", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(string5);
      assertEquals(">-pod", string5);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Elements elements1 = formElement0.getElementsByAttributeStarting(">-pod");
      assertNotSame(elements1, elements0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">-pod", tag0.toString());
      assertEquals(">-pod", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(">-pod", attribute0.getKey());
      assertEquals("o3{$\"i$!T", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(">-pod", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">-pod", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(">-pod", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(elements1);
      
      // Undeclared exception!
      try { 
        formElement0.is("t]$mKHoyO>!,");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 't]$mKHoyO>!,': unexpected token at ']$mKHoyO>!,'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragment("V`pDF`$O`.=", "&amp;");
      assertFalse(document0.hasParent());
      assertEquals("&amp;", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("&amp;", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("&amp;", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("&amp;", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&amp;", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.after("%lAZY5g");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("&amp;", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("&amp;", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&amp;", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("&amp;", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^(R]adf&B4@yP_RV)", "^(R]adf&B4@yP_RV)");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Node[] nodeArray0 = document0.childNodesAsArray();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(nodeArray0);
      assertEquals(1, nodeArray0.length);
      
      CDataNode cDataNode0 = new CDataNode("@#!Q");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.doClone(document0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.equals((Object)cDataNode0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertNotNull(node0);
      
      Document document1 = (Document)document0.before(node0);
      assertSame(document0, document1);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertSame(document1, document0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("^(R]adf&B4@yP_RV)", document1.baseUri());
      assertNotNull(document1);
      
      String string0 = document0.text();
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("@#!Q", string0);
      
      String string1 = document0.ownText();
      assertSame(document0, document1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string1);
      assertEquals("@#!Q", string1);
      
      Element element0 = document0.shallowClone();
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", element0.baseUri());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Pattern pattern0 = Pattern.compile("/x", (-52));
      assertEquals("/x", pattern0.pattern());
      assertEquals((-52), pattern0.flags());
      assertEquals("/x", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", element0.baseUri());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("/x", pattern0.pattern());
      assertEquals((-52), pattern0.flags());
      assertEquals("/x", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^(R]adf&B0@yP_RV)", "org.jsoup.nodes.element$nodewist");
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.element$nodewist", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.element$nodewist", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.doClone((Node) null);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.element$nodewist", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.element$nodewist", document0.baseUri());
      assertEquals("org.jsoup.nodes.element$nodewist", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.element$nodewist", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.setParentNode((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$Nodewist");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("XW");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$Nodewist", element0.baseUri());
      assertEquals("xw", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("xw", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.firstElementSibling();
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$Nodewist", element0.baseUri());
      assertEquals("xw", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("xw", element0.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.nodes.Element$Nodewist", element1.baseUri());
      assertEquals("xw", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("xw", element1.tagName());
      assertNotNull(element1);
      
      Element element2 = document0.getElementById("org.jsoup.nodes.Element$Nodewist");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mJkCB>O@NP%Hj", "mJkCB>O@NP%Hj");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("mJkCB>O@NP%Hj", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("mJkCB>O@NP%Hj", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("mJkCB>O@NP%Hj", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("mJkCB>O@NP%Hj", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mJkCB>O@NP%Hj", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.append("mJkCB>O@NP%Hj");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("mJkCB>O@NP%Hj", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("mJkCB>O@NP%Hj", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mJkCB>O@NP%Hj", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals("mJkCB>O@NP%Hj", element1.baseUri());
      assertNotNull(element1);
      
      Elements elements0 = element0.previousElementSiblings();
      assertSame(element0, element1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("mJkCB>O@NP%Hj", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("mJkCB>O@NP%Hj", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mJkCB>O@NP%Hj", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("oV[ c' ApAV", "oV[ c' ApAV");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("oV[ c' ApAV", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("oV[ c' ApAV", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("oV[ c' ApAV", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("oV[ c' ApAV", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("oV[ c' ApAV", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("oV[ c' ApAV", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      List<Node> list0 = document1.ensureChildNodes();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("oV[ c' ApAV", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("oV[ c' ApAV", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("oV[ c' ApAV", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("oV[ c' ApAV", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Element element0 = document1.head();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("oV[ c' ApAV", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("oV[ c' ApAV", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("oV[ c' ApAV", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("oV[ c' ApAV", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("oV[ c' ApAV", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("~pFF^DR0e");
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("oV[ c' ApAV", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("oV[ c' ApAV", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("oV[ c' ApAV", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("oV[ c' ApAV", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("oV[ c' ApAV", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("~pff^dr0e", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("oV[ c' ApAV", element1.baseUri());
      assertEquals("~pff^dr0e", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      Pattern pattern0 = Pattern.compile("oV[ c' ApAV", 56);
      assertEquals("oV[ c' ApAV", pattern0.pattern());
      assertEquals(56, pattern0.flags());
      assertEquals("oV[ c' ApAV", pattern0.toString());
      assertNotNull(pattern0);
      
      document0.title("oV[ c' ApAV");
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("oV[ c' ApAV", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("oV[ c' ApAV", document0.baseUri());
      assertFalse(document0.isBlock());
      
      String string0 = null;
      Element element2 = element0.attr("oV[ c' ApAV", (String) null);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("oV[ c' ApAV", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("oV[ c' ApAV", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("oV[ c' ApAV", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("oV[ c' ApAV", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("oV[ c' ApAV", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("oV[ c' ApAV", element2.baseUri());
      assertEquals("head", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("oV[ c' ApAV", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("oV[ c' ApAV", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("oV[ c' ApAV", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("oV[ c' ApAV", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("oV[ c' ApAV", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("oV[ c' ApAV", pattern0.pattern());
      assertEquals(56, pattern0.flags());
      assertEquals("oV[ c' ApAV", pattern0.toString());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsMatchingText(pattern0);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("oV[ c' ApAV", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("oV[ c' ApAV", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("oV[ c' ApAV", pattern0.pattern());
      assertEquals(56, pattern0.flags());
      assertEquals("oV[ c' ApAV", pattern0.toString());
      assertEquals(5, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      
      Element element3 = document1.nextElementSibling();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("oV[ c' ApAV", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("oV[ c' ApAV", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("oV[ c' ApAV", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("oV[ c' ApAV", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNull(element3);
      
      Node[] nodeArray0 = new Node[6];
      Set<String> set0 = document1.classNames();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("oV[ c' ApAV", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("oV[ c' ApAV", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("oV[ c' ApAV", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("oV[ c' ApAV", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("oV[ c' ApAV"));
      
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) document0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document1;
      // Undeclared exception!
      try { 
        document0.insertChildren(56, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("id", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("id", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("id", "br");
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      FormElement formElement0 = new FormElement(tag0, "header", attributes2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("id", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("id", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("id", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("header", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("id", formElement0.tagName());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("id", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("id", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("id", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("header", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("id", formElement0.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals("header", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("id", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("id", formElement1.tagName());
      assertNotNull(formElement1);
      
      formElement1.setParentNode(element0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("id", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("id", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("id", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("header", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.hasParent());
      assertEquals("id", formElement0.tagName());
      assertEquals("header", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertTrue(formElement1.hasParent());
      assertEquals("id", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("id", formElement1.tagName());
      
      String string0 = document0.cssSelector();
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      Element element1 = formElement1.html("header");
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element1);
      assertSame(formElement1, element1);
      assertSame(formElement1, formElement0);
      assertSame(element1, formElement0);
      assertSame(element1, formElement1);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("id", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("id", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("id", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("header", formElement0.baseUri());
      assertTrue(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("id", formElement0.tagName());
      assertEquals("header", formElement1.baseUri());
      assertTrue(formElement1.hasParent());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("id", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("id", formElement1.tagName());
      assertEquals("id", element1.nodeName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("header", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("id", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("ZJCd>O@NP%Hj", "ZJCd>O@NP%Hj");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ZJCd>O@NP%Hj", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("ZJCd>O@NP%Hj", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("6GcB:XP>6");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ZJCd>O@NP%Hj", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("ZJCd>O@NP%Hj", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ZJCd>O@NP%Hj", document1.location());
      assertEquals("ZJCd>O@NP%Hj", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasClass("ZJCd>O@NP%Hj");
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ZJCd>O@NP%Hj", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("ZJCd>O@NP%Hj", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(boolean0);
      
      Elements elements0 = document1.getElementsByAttributeStarting("6GcB:XP>6");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("ZJCd>O@NP%Hj", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("ZJCd>O@NP%Hj", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("ZJCd>O@NP%Hj", document1.location());
      assertEquals("ZJCd>O@NP%Hj", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("?:!");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("?:!", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("?:!", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("?:!");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("?:!", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("?:!", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("?:!", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("?:!", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("?:!", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("?:!", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("?:!"));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("ez~VU>\"", "ez~VU>\"");
      assertEquals("ez~VU>\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("XW");
      assertEquals("ez~VU>\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ez~VU>\"", element0.baseUri());
      assertEquals("xw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("xw", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      boolean boolean0 = element0.is("XW");
      assertEquals("ez~VU>\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ez~VU>\"", element0.baseUri());
      assertEquals("xw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("xw", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XW");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document1 = (Document)document0.text("XW");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("ez~VU>\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("ez~VU>\"", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ez~VU>\"", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.prependText("DoctypePublicIdentifier_doubleQuoted");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("ez~VU>\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("ez~VU>\"", document2.baseUri());
      assertEquals("ez~VU>\"", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Element element1 = document0.body();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("ez~VU>\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("ez~VU>\"", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
      
      Elements elements0 = document2.getElementsContainingText("ez~VU>\"");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("ez~VU>\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("ez~VU>\"", document2.baseUri());
      assertEquals("ez~VU>\"", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element2 = document2.head();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals("ez~VU>\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("ez~VU>\"", document2.baseUri());
      assertEquals("ez~VU>\"", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertEquals("ez~VU>\"", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$Nodewist");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("XW");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.baseUri());
      assertEquals("xw", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("xw", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$Nodewist", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      element0.setSiblingIndex((-2068));
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$Nodewist", document0.baseUri());
      assertEquals("xw", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("xw", element0.tagName());
      assertEquals((-2068), element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$Nodewist", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$Nodewist", (-1422));
      assertEquals("org.jsoup.nodes.Element$Nodewist", pattern0.pattern());
      assertEquals((-1422), pattern0.flags());
      assertEquals("org.jsoup.nodes.Element$Nodewist", pattern0.toString());
      assertNotNull(pattern0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(pattern0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "8Jo0*t13@\"7";
      Document document0 = Document.createShell("8Jo0*t13@\"7");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      DataNode dataNode0 = new DataNode("8Jo0*t13@\"7");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      document0.setParentNode(dataNode0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      
      String string1 = document0.text();
      assertFalse(string1.equals((Object)string0));
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = Node.EmptyString;
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Document document1 = (Document)document0.val("#");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("8Jo0*t13@\"7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("8Jo0*t13@\"7", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^(R]adf&B4@yP_RV)", "^(R]adf&B4@yP_RV)");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      boolean boolean0 = element0.hasSameValue(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(boolean0);
      
      document0.setParentNode(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      String string0 = document0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("html > body > #root", string0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charArrayWriter0, (-906021636), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("ez~VU>\"");
      assertEquals("ez~VU>\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("XW");
      assertEquals("ez~VU>\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("xw", element0.tagName());
      assertEquals("xw", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ez~VU>\"", element0.baseUri());
      assertNotNull(element0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpectedly reached end of file (EOF) in input state [%s]");
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.text("XW");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("ez~VU>\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("ez~VU>\"", document1.baseUri());
      assertEquals("ez~VU>\"", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.prependText("DoctypePublicIdentifier_doubleQuoted");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("ez~VU>\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("ez~VU>\"", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("ez~VU>\"", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      document2.title("option");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("ez~VU>\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("ez~VU>\"", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("ez~VU>\"", document2.location());
      assertFalse(document2.isBlock());
      
      Elements elements0 = document2.getElementsContainingText("ez~VU>\"");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("ez~VU>\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ez~VU>\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("ez~VU>\"", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("ez~VU>\"", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"NMz-T#@[+{3&", "\"NMz-T#@[+{3&");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz-T#@[+{3&", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("\"NMz-T#@[+{3&", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz-T#@[+{3&", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("\"NMz-T#@[+{3&", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("\"NMz-T#@[+{3&", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.toggleClass("\"NMz-T#@[+{3&");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz-T#@[+{3&", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("\"NMz-T#@[+{3&", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("\"NMz-T#@[+{3&", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("\"NMz-T#@[+{3&", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
      
      Elements elements0 = document0.getElementsContainingText("\"NMz-T#@[+{3&");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz-T#@[+{3&", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("\"NMz-T#@[+{3&", document0.baseUri());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      document0.setParentNode(element0);
      assertSame(element0, element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"NMz-T#@[+{3&", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("\"NMz-T#@[+{3&", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("\"NMz-T#@[+{3&", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000181': unexpected token at '@0000000181'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document document2 = document1.ownerDocument();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      List<DataNode> list0 = document0.dataNodes();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document3 = (Document)document1.addClass("");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      
      Elements elements0 = document3.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document4 = Parser.parseBodyFragment(":>&atfg(L", "");
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.childNodeSize());
      assertEquals("", document4.location());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document5 = (Document)document2.prepend("");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertNotSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document5.equals((Object)document4));
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertEquals(0, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertEquals("", document5.baseUri());
      assertFalse(document5.isBlock());
      assertNotNull(document5);
      
      // Undeclared exception!
      try { 
        document4.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("F", "textarea");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      element0.setParentNode(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      String string0 = document0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      Document document1 = (Document)element0.parent();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"NMz-T#@[+{3&", "\"NMz-T#@[+{3&");
      assertFalse(document0.hasParent());
      assertEquals("\"NMz-T#@[+{3&", document0.location());
      assertEquals("\"NMz-T#@[+{3&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertFalse(document0.hasParent());
      assertEquals("\"NMz-T#@[+{3&", document0.location());
      assertEquals("\"NMz-T#@[+{3&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Document document1 = Parser.parseBodyFragment("O", "class");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertEquals("class", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("class", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("\"NMz-T#@[+{3&", document0.location());
      assertEquals("\"NMz-T#@[+{3&", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertEquals("class", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("class", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("\"NMz-T#@[+{3&", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("\"NMz-T#@[+{3&", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.after("\"NMz-T#@[+{3&");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertEquals("\"NMz-T#@[+{3&", document0.location());
      assertEquals("\"NMz-T#@[+{3&", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertEquals("class", document1.baseUri());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("class", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("\"NMz-T#@[+{3&", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("\"NMz-T#@[+{3&", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("\"NMz-T#@[+{3&", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("\"NMz-T#@[+{3&", document3.baseUri());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.getElementById("org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^(R]adf&B4@yP_RV)", "^(R]adf&B4@yP_RV)");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element0 = document0.createElement("textarea");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^(R]adf&B4@yP_RV)", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.val("\"NMz2T#@[+{3&");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^(R]adf&B4@yP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(R]adf&B4@yP_RV)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]adf&B4@yP_RV)", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element1.tagName());
      assertEquals("textarea", element1.nodeName());
      assertEquals("^(R]adf&B4@yP_RV)", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bEi70R");
      assertFalse(boolean0);
      
      Document document0 = parser1.parseInput("       ", "       ");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByAttributeValueNot("       ", "       ");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = element0.text("       ");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("       ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      
      Element element2 = element0.firstElementSibling();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("       ", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertNotNull(element2);
      
      Element element3 = element2.empty();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("       ", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertEquals("head", element3.tagName());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals("       ", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.childNodeSize());
      assertNotNull(element3);
      
      boolean boolean1 = element1.hasClass("       ");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element1, element3);
      assertSame(element1, element0);
      assertNotSame(element1, element2);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertTrue(boolean1 == boolean0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("       ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertFalse(boolean1);
      
      Element element4 = element0.val("r");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element4, element3);
      assertSame(element4, element1);
      assertNotSame(element4, element2);
      assertSame(element4, element0);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element4.equals((Object)element3));
      assertFalse(element4.equals((Object)element2));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element4.tagName());
      assertTrue(element4.isBlock());
      assertEquals("body", element4.nodeName());
      assertEquals("       ", element4.baseUri());
      assertTrue(element4.hasParent());
      assertEquals(1, element4.childNodeSize());
      assertEquals(1, element4.siblingIndex());
      assertNotNull(element4);
      
      Elements elements1 = element1.getElementsByIndexEquals(4);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element1, element3);
      assertSame(element1, element0);
      assertSame(element1, element4);
      assertNotSame(element1, element2);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("       ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      Elements elements2 = element2.getElementsByAttributeValueEnding("       ", "r");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element0, element4);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertNotSame(element2, element4);
      assertNotSame(element2, element1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element4));
      assertFalse(element2.equals((Object)element1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("       ", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      
      String string0 = element1.html();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element1, element3);
      assertSame(element1, element0);
      assertSame(element1, element4);
      assertNotSame(element1, element2);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("       ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element5 = element2.appendElement("(in8zL");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element5);
      assertSame(element0, element4);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertNotSame(element2, element4);
      assertNotSame(element2, element1);
      assertNotSame(element2, element5);
      assertNotSame(element5, element1);
      assertNotSame(element5, element0);
      assertNotSame(element5, element4);
      assertNotSame(element5, element3);
      assertNotSame(element5, element2);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element4));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element5.equals((Object)element1));
      assertFalse(element5.equals((Object)element0));
      assertFalse(element5.equals((Object)element4));
      assertFalse(element5.equals((Object)element3));
      assertFalse(element5.equals((Object)element2));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("       ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("       ", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element5.childNodeSize());
      assertEquals("(in8zL", element5.tagName());
      assertEquals("(in8zL", element5.nodeName());
      assertFalse(element5.isBlock());
      assertTrue(element5.hasParent());
      assertEquals("       ", element5.baseUri());
      assertEquals(0, element5.siblingIndex());
      assertNotNull(element5);
      
      int int0 = (-94);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("\"nmz2#@[+{3&", "\"nmz2#@[+{3&");
      assertEquals("#document", document0.nodeName());
      assertEquals("\"nmz2#@[+{3&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"nmz2#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("\"nmz2#@[+{3&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"nmz2#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      String string0 = document0.cssSelector();
      assertEquals("#document", document0.nodeName());
      assertEquals("\"nmz2#@[+{3&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"nmz2#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      // Undeclared exception!
      document0.is("#root");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)51;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte)51}, byteArray0);
      
      Document document0 = Document.createShell("yQ5_t/");
      assertEquals("yQ5_t/", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ5_t/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-1432352094));
      assertEquals("yQ5_t/", document0.location());
      assertEquals((-1432352094), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ5_t/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean1 = document0.hasText();
      assertTrue(boolean1 == boolean0);
      assertEquals("yQ5_t/", document0.location());
      assertEquals((-1432352094), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ5_t/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean1);
      
      Document document1 = (Document)document0.removeClass("yQ5_t/");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("yQ5_t/", document0.location());
      assertEquals((-1432352094), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ5_t/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yQ5_t/", document1.location());
      assertEquals((-1432352094), document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("yQ5_t/", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("yQ5_t/");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yQ5_t/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ5_t/", document0.baseUri());
      assertNotNull(document0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yQ5_t/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ5_t/", document0.baseUri());
      assertEquals("yQ5_t/", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("yQ5_t/", document1.baseUri());
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasText();
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yQ5_t/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ5_t/", document0.baseUri());
      assertFalse(boolean0);
      
      Document document2 = (Document)document0.toggleClass("yQ5_t/");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yQ5_t/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ5_t/", document0.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("yQ5_t/", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("yQ5_t/", document2.location());
      assertNotNull(document2);
      
      String string0 = document2.className();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yQ5_t/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ5_t/", document0.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("yQ5_t/", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("yQ5_t/", document2.location());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("0uKSqlVJf)C}X");
      assertFalse(document0.hasParent());
      assertEquals("0uKSqlVJf)C}X", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("0uKSqlVJf)C}X", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("0uKSqlVJf)C}X", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "0nh_ykDM";
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Document document0 = Document.createShell("0nh_ykDM");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("0nh_ykDM", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("0nh_ykDM", document0.baseUri());
      assertNotNull(document0);
      
      String string1 = "hgroup";
      List<Node> list0 = Parser.parseXmlFragment("r[x=y/?gun$(*;o`i2|", "hgroup");
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      document0.childNodes = list0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("0nh_ykDM", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("0nh_ykDM", document0.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("0nh_ykDM", "0nh_ykDM");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("0nh_ykDM", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("0nh_ykDM", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string2 = document0.nodeName();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("0nh_ykDM", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("0nh_ykDM", document0.baseUri());
      assertNotNull(string2);
      assertEquals("#document", string2);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("0nh_ykDM", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("0nh_ykDM", document0.baseUri());
      assertNull(element0);
      
      String string3 = "=:)";
      // Undeclared exception!
      try { 
        document0.appendText("=:)");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("body");
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string0 = document0.html();
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("body", document1.baseUri());
      assertEquals("body", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      List<Node> list0 = document1.childNodes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("body", document1.baseUri());
      assertEquals("body", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      document1.setSiblingIndex((-1168624650));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals((-1168624650), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("body", document1.baseUri());
      assertEquals((-1168624650), document1.siblingIndex());
      assertEquals("body", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Elements elements0 = document1.getElementsContainingOwnText("body");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals((-1168624650), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("body", document1.baseUri());
      assertEquals((-1168624650), document1.siblingIndex());
      assertEquals("body", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document2 = (Document)document0.tagName("<html>\n <head></head>\n <body></body>\n</html>");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals((-1168624650), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("body", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals((-1168624650), document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("body", document2.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("body", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document0.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "x=y/?gun$(*t;o`i2|";
      Document document0 = new Document("8Jo0*t13@\"7");
      assertEquals("#root", document0.tagName());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("meta");
      assertEquals("#root", document0.tagName());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("meta", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("meta", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8Jo0*t13@\"7", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.before("gl%+C<");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("meta", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("meta", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8Jo0*t13@\"7", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("meta", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("meta", element1.nodeName());
      assertEquals("8Jo0*t13@\"7", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Element element2 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNull(element2);
      
      // Undeclared exception!
      try { 
        document0.text("8Jo0*t13@\"7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$1");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text("org.jsoup.nodes.Element$1");
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals("#cdata", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      document0.setParentNode(textNode0);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals("#cdata", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.removeClass("Rn");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(boolean0);
      
      Document document1 = new Document("org.jsoup.nodes.Element$NodeList");
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "ngU%)i(";
      Document document0 = new Document("ngU%)i(");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ngU%)i(", document0.baseUri());
      assertEquals("ngU%)i(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document1 = (Document)document0.filter(nodeFilter0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ngU%)i(", document0.baseUri());
      assertEquals("ngU%)i(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("ngU%)i(", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ngU%)i(", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ngU%)i(", document0.baseUri());
      assertEquals("ngU%)i(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("ngU%)i(", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("ngU%)i(", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Elements elements0 = document2.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ngU%)i(", document0.baseUri());
      assertEquals("ngU%)i(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("ngU%)i(", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("ngU%)i(", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string1 = document2.id();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ngU%)i(", document0.baseUri());
      assertEquals("ngU%)i(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("ngU%)i(", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("ngU%)i(", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document document3 = (Document)document2.append("");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ngU%)i(", document0.baseUri());
      assertEquals("ngU%)i(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("ngU%)i(", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("ngU%)i(", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals("ngU%)i(", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("ngU%)i(", document3.location());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document2.title("+QJdpKt>TIobE0JGXH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d9|GCwL", "Insert position out of bounds.");
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = parser0.parseInput("\"NMz2T#@[+{3&", "#");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#", document1.location());
      assertEquals(1, document1.childNodeSize());
      
      Elements elements0 = document0.previousElementSiblings();
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document2 = (Document)document0.before("u=W");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Elements elements1 = document0.getElementsByIndexLessThan(2091);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(3, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "Mh VbUK&e}~%d0";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Document.createShell("Mh VbUK&e}~%d0");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Mh VbUK&e}~%d0", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Mh VbUK&e}~%d0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      document0.siblingIndex = (-1878);
      assertEquals("#root", document0.tagName());
      assertEquals((-1878), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Mh VbUK&e}~%d0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Mh VbUK&e}~%d0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Node node0 = document0.previousSibling();
      assertEquals("#root", document0.tagName());
      assertEquals((-1878), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Mh VbUK&e}~%d0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Mh VbUK&e}~%d0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNull(node0);
      
      Document document1 = (Document)document0.prependText("Mh VbUK&e}~%d0");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals((-1878), document0.siblingIndex());
      assertEquals("Mh VbUK&e}~%d0", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Mh VbUK&e}~%d0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Mh VbUK&e}~%d0", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Mh VbUK&e}~%d0", document1.location());
      assertFalse(document1.isBlock());
      assertEquals((-1878), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      String string1 = "Pattern syntax error:";
      document1.setBaseUri("Pattern syntax error:");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error:", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals((-1878), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Mh VbUK&e}~%d0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Mh VbUK&e}~%d0", document1.location());
      assertEquals("Pattern syntax error:", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals((-1878), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Elements elements0 = document1.getElementsByTag("Mh VbUK&e}~%d0");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error:", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals((-1878), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Mh VbUK&e}~%d0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Mh VbUK&e}~%d0", document1.location());
      assertEquals("Pattern syntax error:", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals((-1878), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string2 = "Tag name must not be empty.";
      Document document2 = (Document)document0.appendText("Tag name must not be empty.");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("Pattern syntax error:", document0.baseUri());
      assertEquals((-1878), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertEquals("Mh VbUK&e}~%d0", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("Pattern syntax error:", document2.baseUri());
      assertEquals((-1878), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Mh VbUK&e}~%d0", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      String string0 = document0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertNotNull(string0);
      assertEquals("html > body > #root", string0);
      
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.prepend("Yc%k-/;R7PYSq)C+7");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
      
      document0.setParentNode(element0);
      assertSame(element0, element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Elements elements0 = document0.getElementsByIndexEquals(46);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = document0.cssSelector();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("html > body > #root", string0);
      
      Elements elements1 = document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element", " ");
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      
      String string0 = document0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("html > body > #root", string0);
      
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = element0.attr(">S_ Epxc1T)z4#8, ", false);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8Jo0*t13@\"7", "d9|GtwL");
      assertEquals("d9|GtwL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("d9|GtwL", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getAllElements();
      assertEquals("d9|GtwL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("d9|GtwL", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.val((String) null);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("d9|GtwL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("d9|GtwL", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("d9|GtwL", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("d9|GtwL", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.addClass("8Jo0*t13@\"7");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("d9|GtwL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("d9|GtwL", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("d9|GtwL", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("d9|GtwL", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("d9|GtwL", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("d9|GtwL", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements1 = document1.getElementsByClass("Children collection to be inserted must not be null.");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("d9|GtwL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("d9|GtwL", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("d9|GtwL", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("d9|GtwL", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Document document3 = document0.clone();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals("d9|GtwL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("d9|GtwL", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("d9|GtwL", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("d9|GtwL", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      Elements elements2 = document0.getElementsContainingText("w1k");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertEquals("d9|GtwL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("d9|GtwL", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      
      String string0 = document0.cssSelector();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertFalse(document0.equals((Object)document3));
      assertEquals("d9|GtwL", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("d9|GtwL", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document("value");
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = new Document("value");
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Document document2 = new Document("value");
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Elements elements0 = document0.getElementsByTag("value");
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = document0.cssSelector();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      Document document3 = (Document)document0.toggleClass("#root");
      assertNotSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("value", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("value", document3.location());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      Elements elements1 = document2.children();
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      int int0 = document1.childNodeSize();
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("8Jo0*t13@\"7");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      DataNode dataNode0 = new DataNode("#", "#");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      document0.setParentNode(dataNode0);
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      
      String string0 = document0.text();
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Node.EmptyString;
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document document1 = (Document)document0.val("#");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("8Jo0*t13@\"7", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("8Jo0*t13@\"7", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.after("8Jo0*t13@\"7");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8Jo0*t13@\"7", "8Jo0*t13@\"7");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("8Jo0*t13@\"7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("8Jo0*t13@\"7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      String string0 = document0.cssSelector();
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string0);
      assertEquals("html > head > #root", string0);
      
      Tag tag0 = Tag.valueOf("html > head > #root");
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("html > head > #root", tag0.toString());
      assertEquals("html > head > #root", tag0.getName());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes1);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("html > head > #root", tag0.toString());
      assertEquals("html > head > #root", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("textarea", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("html > head > #root", formElement0.tagName());
      assertEquals("html > head > #root", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(element0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("8Jo0*t13@\"7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("html > head > #root", tag0.toString());
      assertEquals("html > head > #root", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("textarea", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("html > head > #root", formElement0.tagName());
      assertEquals("html > head > #root", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("html > head > #root", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("textarea", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals("html > head > #root", formElement1.tagName());
      assertNotNull(formElement1);
      
      boolean boolean0 = document0.hasSameValue(formElement1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("8Jo0*t13@\"7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("html > head > #root", tag0.toString());
      assertEquals("html > head > #root", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("textarea", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("html > head > #root", formElement0.tagName());
      assertEquals("html > head > #root", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("html > head > #root", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("textarea", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals("html > head > #root", formElement1.tagName());
      assertFalse(boolean0);
      
      Element element1 = element0.toggleClass("kL(={hl~z30G&<");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("8Jo0*t13@\"7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("8Jo0*t13@\"7", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      Pattern pattern0 = Pattern.compile("^(rxfb4myp_r9)");
      assertEquals("^(rxfb4myp_r9)", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("^(rxfb4myp_r9)", pattern0.pattern());
      assertNotNull(pattern0);
      
      Pattern pattern1 = Pattern.compile("html > head > #root");
      assertNotSame(pattern1, pattern0);
      assertFalse(pattern1.equals((Object)pattern0));
      assertEquals(0, pattern1.flags());
      assertEquals("html > head > #root", pattern1.toString());
      assertEquals("html > head > #root", pattern1.pattern());
      assertNotNull(pattern1);
      
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      assertSame(element0, element1);
      assertNotSame(pattern0, pattern1);
      assertFalse(pattern0.equals((Object)pattern1));
      assertFalse(document0.isBlock());
      assertEquals("8Jo0*t13@\"7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("8Jo0*t13@\"7", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("8Jo0*t13@\"7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^(rxfb4myp_r9)", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("^(rxfb4myp_r9)", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("yQ_t/", "yQ_t/");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("yQ_t/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ_t/", document0.location());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-2262));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals((-2262), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("yQ_t/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ_t/", document0.location());
      
      String string0 = document0.html();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals((-2262), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("yQ_t/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ_t/", document0.location());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  yQ_t/\n </body>\n</html>", string0);
      
      Document document1 = (Document)document0.toggleClass("yQ_t/");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals((-2262), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("yQ_t/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ_t/", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals((-2262), document1.siblingIndex());
      assertEquals("yQ_t/", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("yQ_t/", document1.location());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.prependChild(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yQ_t/", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yQ_t/", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals("yQ_t/", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("yQ_t/", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("yQ_t/", document2.baseUri());
      assertEquals("yQ_t/", document2.location());
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"NMz2T#@[+{3&", "\"NMz2T#@[+{3&");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("\"NMz2T#@[+{3&", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("\"NMz2T#@[+{3&"));
      
      Element element1 = element0.classNames(set0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("\"NMz2T#@[+{3&", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, element1.childNodeSize());
      assertEquals("\"NMz2T#@[+{3&", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
      assertFalse(set0.contains("\"NMz2T#@[+{3&"));
      
      Elements elements0 = document0.getElementsContainingText("\"NMz2T#@[+{3&");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      
      List<TextNode> list0 = element0.textNodes();
      assertSame(element0, element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("\"NMz2T#@[+{3&", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("Uroot", "Uroot");
      assertEquals("Uroot", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Uroot", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals("Uroot", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Uroot", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Uroot", element0.baseUri());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertEquals("Uroot", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Uroot", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Uroot", element0.baseUri());
      
      String string0 = document0.cssSelector();
      assertEquals("Uroot", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Uroot", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(string0);
      assertEquals("html > head > #root", string0);
      
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6%kZv", "6%kZv");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("6%kZv", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6%kZv", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("6%kZv", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("6%kZv", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("6%kZv", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("6%kZv", document1.location());
      assertNotNull(document1);
      
      Pattern pattern0 = Pattern.compile("6%kZv");
      assertEquals("6%kZv", pattern0.toString());
      assertEquals("6%kZv", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document1.getElementsMatchingText(pattern0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("6%kZv", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("6%kZv", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("6%kZv", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("6%kZv", document1.location());
      assertEquals("6%kZv", pattern0.toString());
      assertEquals("6%kZv", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"NMz2#@[+{3&", "\"NMz2#@[+{3&");
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("\"NMz2#@[+{3&");
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("\"nmz2#@[+{3&", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"nmz2#@[+{3&", element0.tagName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Document document1 = Parser.parse("1 okIFd9-p", "1 okIFd9-p");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1 okIFd9-p", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("1 okIFd9-p", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = element0.ownerDocument();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("\"nmz2#@[+{3&", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"nmz2#@[+{3&", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("\"NMz2#@[+{3&", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      int int0 = document0.elementSiblingIndex();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, int0);
      
      Elements elements0 = document1.getElementsContainingOwnText("1 okIFd9-p");
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1 okIFd9-p", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("1 okIFd9-p", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = document1.head();
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("1 okIFd9-p", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("1 okIFd9-p", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals("1 okIFd9-p", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
      
      String string0 = element0.outerHtml();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("\"nmz2#@[+{3&", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"nmz2#@[+{3&", element0.tagName());
      assertTrue(element0.hasParent());
      assertNotNull(string0);
      assertEquals("<\"nmz2#@[+{3&></\"nmz2#@[+{3&>", string0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      StringBuilder stringBuilder0 = new StringBuilder("\"NMz2#@[+{3&");
      assertEquals("\"NMz2#@[+{3&", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("\"NMz2#@[+{3&0.0", stringBuilder0.toString());
      assertEquals("\"NMz2#@[+{3&0.0", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuilder1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(15, charArrayWriter0.size());
      assertEquals("\"NMz2#@[+{3&0.0", charArrayWriter0.toString());
      assertEquals("\"NMz2#@[+{3&0.0", stringBuilder0.toString());
      assertEquals("\"NMz2#@[+{3&0.0", stringBuilder1.toString());
      assertEquals(15, charArrayWriter1.size());
      assertEquals("\"NMz2#@[+{3&0.0", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('X');
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertEquals(16, charArrayWriter0.size());
      assertEquals("\"NMz2#@[+{3&0.0X", charArrayWriter0.toString());
      assertEquals("\"NMz2#@[+{3&0.0", stringBuilder0.toString());
      assertEquals("\"NMz2#@[+{3&0.0", stringBuilder1.toString());
      assertEquals("\"NMz2#@[+{3&0.0X", charArrayWriter1.toString());
      assertEquals(16, charArrayWriter1.size());
      assertEquals("\"NMz2#@[+{3&0.0X", charArrayWriter2.toString());
      assertEquals(16, charArrayWriter2.size());
      assertNotNull(charArrayWriter2);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings2);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings4);
      
      document2.outerHtmlTail(charArrayWriter2, 0, document_OutputSettings4);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document2.equals((Object)document1));
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("\"nmz2#@[+{3&", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"nmz2#@[+{3&", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("\"NMz2#@[+{3&", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("\"NMz2#@[+{3&0.0X\n</#root>", charArrayWriter0.toString());
      assertEquals(25, charArrayWriter0.size());
      assertEquals("\"NMz2#@[+{3&0.0", stringBuilder0.toString());
      assertEquals("\"NMz2#@[+{3&0.0", stringBuilder1.toString());
      assertEquals(25, charArrayWriter1.size());
      assertEquals("\"NMz2#@[+{3&0.0X\n</#root>", charArrayWriter1.toString());
      assertEquals(25, charArrayWriter2.size());
      assertEquals("\"NMz2#@[+{3&0.0X\n</#root>", charArrayWriter2.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      String string0 = "       ";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bEi70R");
      assertFalse(boolean0);
      
      Document document0 = parser1.parseInput("       ", "       ");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByAttributeValueNot("       ", "       ");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element1 = element0.text("       ");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("       ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      
      Element element2 = element0.firstElementSibling();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertEquals("       ", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertNotNull(element2);
      
      Element element3 = element2.empty();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertEquals("       ", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertTrue(element3.hasParent());
      assertEquals("       ", element3.baseUri());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals("head", element3.tagName());
      assertNotNull(element3);
      
      boolean boolean1 = element1.hasClass("       ");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element1, element3);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertTrue(boolean1 == boolean0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("       ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(boolean1);
      
      Element element4 = element0.val("r");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element0, element3);
      assertSame(element4, element1);
      assertNotSame(element4, element2);
      assertSame(element4, element0);
      assertNotSame(element4, element3);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element4.equals((Object)element2));
      assertFalse(element4.equals((Object)element3));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element4.tagName());
      assertTrue(element4.isBlock());
      assertEquals("body", element4.nodeName());
      assertEquals(1, element4.siblingIndex());
      assertEquals("       ", element4.baseUri());
      assertTrue(element4.hasParent());
      assertEquals(1, element4.childNodeSize());
      assertNotNull(element4);
      
      Elements elements1 = element1.getElementsByIndexEquals(4);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element0, element3);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element1, element3);
      assertSame(element1, element4);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("       ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      String string1 = element1.html();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element0, element3);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element1, element3);
      assertSame(element1, element4);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("       ", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "(\\in8zL";
      Element element5 = element2.appendElement("(in8zL");
      assertNotSame(element5, element0);
      assertNotSame(element5, element3);
      assertNotSame(element5, element1);
      assertNotSame(element5, element4);
      assertNotSame(element5, element2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element0, element3);
      assertNotSame(element0, element5);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element5);
      assertSame(element2, element3);
      assertNotSame(element2, element4);
      assertFalse(element5.equals((Object)element0));
      assertFalse(element5.equals((Object)element3));
      assertFalse(element5.equals((Object)element1));
      assertFalse(element5.equals((Object)element4));
      assertFalse(element5.equals((Object)element2));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element4));
      assertEquals("(in8zL", element5.nodeName());
      assertFalse(element5.isBlock());
      assertEquals(0, element5.siblingIndex());
      assertEquals(0, element5.childNodeSize());
      assertEquals("       ", element5.baseUri());
      assertTrue(element5.hasParent());
      assertEquals("(in8zL", element5.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("       ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("       ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("       ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertEquals("       ", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertNotNull(element5);
      
      // Undeclared exception!
      try { 
        element2.insertChildren((-94), (Collection<? extends Node>) elements1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(boolean0);
      
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Elements elements0 = document1.getElementsContainingText("org.jsoup.nodes.Entities$CoreCharset");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      document0.title(",`9");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.className();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element1 = element0.addClass("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      Element element2 = element1.before((Node) document0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(2, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      
      String string1 = element2.attr("");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(2, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = element0.nodeName();
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(string2);
      assertEquals("body", string2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("\"NMz2#@[+{3&");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("l*");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("\"NMz2#@[+{3&", document1.location());
      assertEquals("\"NMz2#@[+{3&", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Set<String> set0 = document1.classNames();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("\"NMz2#@[+{3&", document1.location());
      assertEquals("\"NMz2#@[+{3&", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("\"NMz2#@[+{3&"));
      
      Document document2 = Parser.parseBodyFragment("kKNtiqjZ", "T#<JwM7N8p");
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("T#<JwM7N8p", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("T#<JwM7N8p", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Document document3 = (Document)document0.append("org.jsoup.nodes.Element$1");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("\"NMz2#@[+{3&", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      
      Elements elements0 = document2.getAllElements();
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("T#<JwM7N8p", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("T#<JwM7N8p", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document4 = new Document("x[=y/?gun$(*t;o`i2|");
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertEquals("x[=y/?gun$(*t;o`i2|", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("x[=y/?gun$(*t;o`i2|", document4.baseUri());
      assertNotNull(document4);
      
      Elements elements1 = document2.getElementsContainingText("x[=y/?gun$(*t;o`i2|");
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("T#<JwM7N8p", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("T#<JwM7N8p", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Document document5 = (Document)document0.insertChildren(0, (Collection<? extends Node>) elements1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document5);
      assertNotSame(elements1, elements0);
      assertNotSame(document5, document2);
      assertSame(document5, document1);
      assertNotSame(document5, document4);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("T#<JwM7N8p", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("T#<JwM7N8p", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertEquals("\"NMz2#@[+{3&", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals("\"NMz2#@[+{3&", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      
      Elements elements2 = document3.getElementsContainingText("x[=y/?gun$(*t;o`i2|");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document4);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("\"NMz2#@[+{3&", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"NMz2#@[+{3&", "\"NMz2#@[+{3&");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("\"NMz2#@[+{3&");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"nmz2#@[+{3&", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"nmz2#@[+{3&", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("\"NMz2#@[+{3&", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("\"NMz2#@[+{3&", document1.baseUri());
      assertNotNull(document1);
      
      Map<String, String> map0 = document1.dataset();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("\"NMz2#@[+{3&", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("\"NMz2#@[+{3&", document1.baseUri());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Document document2 = (Document)document1.prependText("\"NMz2#@[+{3&");
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("\"NMz2#@[+{3&", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("\"NMz2#@[+{3&", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("\"NMz2#@[+{3&", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("\"NMz2#@[+{3&", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Elements elements0 = document0.getElementsContainingText("\"NMz2#@[+{3&");
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      int int0 = document0.elementSiblingIndex();
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, int0);
      
      Elements elements1 = document1.getElementsContainingOwnText("1 okIFd9-p");
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("\"NMz2#@[+{3&", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("\"NMz2#@[+{3&", document1.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      // Undeclared exception!
      try { 
        document1.outerHtmlTail((Appendable) null, 0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "^(R]fB4TyP_RV)";
      Document document0 = Document.createShell("^(R]fB4TyP_RV)");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(R]fB4TyP_RV)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(R]fB4TyP_RV)", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("^(R]fB4TyP_RV)", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(R]fB4TyP_RV)", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      // Undeclared exception!
      document1.after("^(R]fB4TyP_RV)");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("he`=I", "he`=I");
      assertEquals("he`=I", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.empty();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "he`=I");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document2 = (Document)document1.toggleClass("ih.l,#8&!>");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("he`=I", document2.location());
      assertEquals("he`=I", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = document2.data();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("he`=I", document2.location());
      assertEquals("he`=I", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Map<String, String> map0 = document1.dataset();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      document2.siblingIndex = 6826;
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(6826, document1.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("he`=I", document2.location());
      assertEquals("he`=I", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(6826, document2.siblingIndex());
      
      Elements elements0 = document2.getElementsByTag("ih.l,#8&!>");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(6826, document1.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("he`=I", document2.location());
      assertEquals("he`=I", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(6826, document2.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Attributes attributes0 = document0.attributes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      List<Node> list0 = document2.ensureChildNodes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(6826, document1.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("he`=I", document2.location());
      assertEquals("he`=I", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(6826, document2.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Node> list1 = document2.ensureChildNodes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(list1, list0);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(6826, document1.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("he`=I", document2.location());
      assertEquals("he`=I", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(6826, document2.siblingIndex());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<DataNode> list2 = document0.dataNodes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      String string1 = document0.wholeText();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = document2.elementSiblingIndex();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(6826, document1.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("he`=I", document2.location());
      assertEquals("he`=I", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(6826, document2.siblingIndex());
      assertEquals(0, int0);
      
      String string2 = document2.data();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(6826, document1.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("he`=I", document2.location());
      assertEquals("he`=I", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(6826, document2.siblingIndex());
      assertNotNull(string2);
      assertEquals("", string2);
      
      Document document3 = (Document)document1.attr("ih.l,#8&!>", "");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("he`=I", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(6826, document3.siblingIndex());
      assertEquals("he`=I", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(6826, document1.siblingIndex());
      assertNotNull(document3);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Element element0 = document3.getElementById("U<uvRnSYhm");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("he`=I", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(6826, document3.siblingIndex());
      assertEquals("he`=I", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(6826, document1.siblingIndex());
      assertNull(element0);
      
      String string3 = document2.id();
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(6826, document1.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("he`=I", document2.location());
      assertEquals("he`=I", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(6826, document2.siblingIndex());
      assertNotNull(string3);
      assertEquals("", string3);
      
      Elements elements1 = document3.children();
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("he`=I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(6826, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("he`=I", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(6826, document3.siblingIndex());
      assertEquals("he`=I", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(6826, document1.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Document document4 = (Document)document2.appendTo(document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertEquals("he`=I", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("he`=I", document0.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("he`=I", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("he`=I", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("he`=I", document2.location());
      assertEquals("he`=I", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("he`=I", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertEquals("he`=I", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      
      // Undeclared exception!
      try { 
        document2.child(6826);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6826, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsContainingText(":mathes");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      document0.setSiblingIndex(1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.prependText("value");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(document1);
      
      String string0 = document0.cssSelector();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      Document document2 = (Document)document0.toggleClass("value");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("value", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.appendText("value");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("value", document2.baseUri());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("value", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("value", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Element element0 = new Element("he`=I");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("he`=I", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("he`=I", element0.tagName());
      assertNotNull(element0);
      
      String string0 = "d(TK`j*38";
      Element element1 = element0.attr("d(TK`j*38", true);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("he`=I", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("he`=I", element0.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("he`=I", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("he`=I", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      CDataNode cDataNode0 = new CDataNode("RX@D]2M%4");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.parent();
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNull(node0);
      
      // Undeclared exception!
      try { 
        element0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("W|#root", "W|#root");
      assertEquals("W|#root", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("W|#root", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("W|#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("W|#root", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("W|#root", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("W|#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("W|#root", document1.baseUri());
      
      boolean boolean0 = document1.hasText();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("W|#root", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("W|#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("W|#root", document1.baseUri());
      assertTrue(boolean0);
      
      Elements elements0 = document1.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("W|#root", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("W|#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("W|#root", document1.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document2 = (Document)document1.before((Node) document0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("W|#root", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("W|#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("W|#root", document1.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("W|#root", document2.location());
      assertEquals("W|#root", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("\"NMz2#@[+{3&", "\"NMz2#@[+{3&");
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      DataNode dataNode0 = new DataNode("\"NMz2#@[+{3&", "fyJc<GroA`AWS&$");
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      document0.setParentNode(dataNode0);
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      
      Document document1 = (Document)document0.prependText("\"NMz2#@[+{3&");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("\"NMz2#@[+{3&", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("\"NMz2#@[+{3&", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("\"NMz2#@[+{3&", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("W|#root", "W|#root");
      assertEquals("W|#root", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("W|#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("W|#root", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("W|#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("W|#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("W|#root", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document document2 = Parser.parseBodyFragment("TPuWiYH=Hi\"Cz+bAFh", "X=y/?GUn$(*t;o`i2|");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("X=y/?GUn$(*t;o`i2|", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("X=y/?GUn$(*t;o`i2|", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      Element element0 = document1.getElementById(">FRAY+dR/ZKBX+");
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertEquals("W|#root", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("W|#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("W|#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("W|#root", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueNot("body", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("^(RxfB4myP_R9)");
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("^(RxfB4myP_R9)"));
      
      Document document2 = Parser.parseBodyFragment("^(RxfB4myP_R9)", "^(RxfB4myP_R9)");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.append("^(RxfB4myP_R9)");
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("^(RxfB4myP_R9)", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document3.location());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      Elements elements0 = document2.getAllElements();
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document4 = (Document)document0.val("^(RxfB4myP_R9)");
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(RxfB4myP_R9)", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("^(RxfB4myP_R9)", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      
      Element element0 = document2.createElement("U<uvRnSYhm");
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element0.hasParent());
      assertEquals("U<uvRnSYhm", element0.tagName());
      assertEquals("^(RxfB4myP_R9)", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("U<uvRnSYhm", element0.nodeName());
      assertNotNull(element0);
      
      List<Node> list0 = element0.childNodes();
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element0.hasParent());
      assertEquals("U<uvRnSYhm", element0.tagName());
      assertEquals("^(RxfB4myP_R9)", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("U<uvRnSYhm", element0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = document2.text();
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string0);
      assertEquals("^(RxfB4myP_R9) ^(RxfB4myP_R9)", string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = Node.EmptyString;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Element element1 = element0.val("org.jsoup.nodes.Element$1");
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(element0.hasParent());
      assertEquals("U<uvRnSYhm", element0.tagName());
      assertEquals("^(RxfB4myP_R9)", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("U<uvRnSYhm", element0.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("U<uvRnSYhm", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("^(RxfB4myP_R9)", element1.baseUri());
      assertEquals("U<uvRnSYhm", element1.tagName());
      assertNotNull(element1);
      
      String string2 = document2.data();
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(string2);
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        document3.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("W|#root", "W|#root");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("W|#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("W|#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("W|#root", document1.location());
      assertEquals("W|#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("W|#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("W|#root", document1.location());
      assertEquals("W|#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      
      boolean boolean0 = document1.hasText();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("W|#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("W|#root", document1.location());
      assertEquals("W|#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(boolean0);
      
      Elements elements0 = document1.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("W|#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("W|#root", document1.location());
      assertEquals("W|#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element0 = document0.child(0);
      assertSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("W|#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("W|#root", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.tagName());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("W|#root", "W|#root");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("W|#root", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("W|#root", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("W|#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("W|#root", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("W|#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("W|#root", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("W|#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("W|#root", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("W|#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      
      Elements elements0 = document1.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("W|#root", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("W|#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("W|#root", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("W|#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      document1.wrap("W|#root");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"NMz2T#@[+{3&", "\"NMz2T#@[+{3&");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = new Element("\"NMz2T#@[+{3&");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("\"NMz2T#@[+{3&", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", element0.tagName());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("\"NMz2T#@[+{3&", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", element0.tagName());
      
      Document document1 = (Document)document0.prependText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("\"NMz2T#@[+{3&", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Element element1 = document0.body();
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("\"NMz2T#@[+{3&", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      
      Element element2 = element1.appendChild(element0);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("\"NMz2T#@[+{3&", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"NMz2T#@[+{3&", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("\"NMz2T#@[+{3&", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("\"NMz2T#@[+{3&", element2.baseUri());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.tagName());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(".{5tV!}XA7?", parseSettings0);
      assertEquals(".{5tv!}xa7?", tag0.getName());
      assertEquals(".{5tv!}xa7?", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("e#&k\"..,W|zAD}|N");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Tag tag1 = Tag.valueOf("e#&k\"..,W|zAD}|N", parseSettings0);
      assertNotSame(tag1, tag0);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("e#&k\"..,w|zad}|n", tag1.getName());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isData());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isBlock());
      assertEquals("e#&k\"..,w|zad}|n", tag1.toString());
      assertNotNull(tag1);
      
      Tag tag2 = Tag.valueOf("#root", parseSettings0);
      assertNotSame(tag2, tag0);
      assertNotSame(tag2, tag1);
      assertFalse(tag2.equals((Object)tag0));
      assertFalse(tag2.equals((Object)tag1));
      assertFalse(tag2.preserveWhitespace());
      assertFalse(tag2.isBlock());
      assertFalse(tag2.isKnownTag());
      assertFalse(tag2.isSelfClosing());
      assertEquals("#root", tag2.toString());
      assertFalse(tag2.isFormListed());
      assertFalse(tag2.isEmpty());
      assertTrue(tag2.formatAsBlock());
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.canContainBlock());
      assertFalse(tag2.isData());
      assertTrue(tag2.isInline());
      assertEquals("#root", tag2.getName());
      assertNotNull(tag2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e#&k\"..,W|zAD}|N";
      attributes0.vals = stringArray0;
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ".{5tV!}XA7?", attributes0);
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      assertEquals(".{5tv!}xa7?", tag0.getName());
      assertEquals(".{5tv!}xa7?", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(".{5tv!}xa7?", pseudoTextElement0.nodeName());
      assertEquals(".{5tv!}xa7?", pseudoTextElement0.tagName());
      assertEquals(".{5tV!}XA7?", pseudoTextElement0.baseUri());
      assertNotNull(pseudoTextElement0);
      
      String string0 = pseudoTextElement0.wholeText();
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      assertEquals(".{5tv!}xa7?", tag0.getName());
      assertEquals(".{5tv!}xa7?", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(".{5tv!}xa7?", pseudoTextElement0.nodeName());
      assertEquals(".{5tv!}xa7?", pseudoTextElement0.tagName());
      assertEquals(".{5tV!}XA7?", pseudoTextElement0.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Attributes attributes1 = pseudoTextElement0.attributes();
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      assertEquals(".{5tv!}xa7?", tag0.getName());
      assertEquals(".{5tv!}xa7?", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(".{5tv!}xa7?", pseudoTextElement0.nodeName());
      assertEquals(".{5tv!}xa7?", pseudoTextElement0.tagName());
      assertEquals(".{5tV!}XA7?", pseudoTextElement0.baseUri());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      String string1 = pseudoTextElement0.data();
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes1);
      assertFalse(tag0.equals((Object)tag2));
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(".{5tv!}xa7?", tag0.getName());
      assertEquals(".{5tv!}xa7?", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(".{5tv!}xa7?", pseudoTextElement0.nodeName());
      assertEquals(".{5tv!}xa7?", pseudoTextElement0.tagName());
      assertEquals(".{5tV!}XA7?", pseudoTextElement0.baseUri());
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("^(R]fB4TyP_RV)");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(R]fB4TyP_RV)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]fB4TyP_RV)", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]fB4TyP_RV)", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Document document2 = (Document)document1.prependText("(<p(*xz[POwO6");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]fB4TyP_RV)", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("^(R]fB4TyP_RV)", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      Elements elements0 = document1.getElementsContainingText("^(R]fB4TyP_RV)");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]fB4TyP_RV)", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.cssSelector();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      Document document3 = (Document)document1.doClone(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]fB4TyP_RV)", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("^(R]fB4TyP_RV)", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^(R]fB4TyP_RV)", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertNotNull(document3);
      
      Charset charset0 = document2.charset();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]fB4TyP_RV)", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("^(R]fB4TyP_RV)", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]fB4TyP_RV)", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("^(R]fB4TyP_RV)", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Document document4 = (Document)document3.classNames(set0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^(R]fB4TyP_RV)", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("^(R]fB4TyP_RV)", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^(R]fB4TyP_RV)", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("^(R]fB4TyP_RV)", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals("^(R]fB4TyP_RV)", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("^(R]fB4TyP_RV)", document4.baseUri());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      assertFalse(set0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      assertFalse(tag0.isData());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("br", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "Gnc1+/u/iRf/%";
      String string1 = parseSettings0.normalizeAttribute("Gnc1+/u/iRf/%");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("gnc1+/u/irf/%", string1);
      
      Attribute attribute0 = new Attribute("E", "E");
      assertEquals("E", attribute0.getKey());
      assertEquals("E", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("E", attribute0.getKey());
      assertEquals("E", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.clone();
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertEquals(1, attributes0.size());
      assertEquals("E", attribute0.getKey());
      assertEquals("E", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      FormElement formElement0 = new FormElement(tag0, "br", attributes2);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isData());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("br", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertEquals("E", attribute0.getKey());
      assertEquals("E", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("br", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("br", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("br", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isData());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("br", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertEquals("E", attribute0.getKey());
      assertEquals("E", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("br", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("br", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("br", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("br", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals("br", formElement1.nodeName());
      assertEquals("br", formElement1.tagName());
      assertEquals(0, formElement1.childNodeSize());
      assertNotNull(formElement1);
      
      Element element0 = formElement1.selectFirst("br");
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, formElement0);
      assertSame(formElement1, element0);
      assertSame(element0, formElement1);
      assertSame(element0, formElement0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(tag0.isData());
      assertEquals("br", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("br", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, attributes0.size());
      assertEquals("E", attribute0.getKey());
      assertEquals("E", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("br", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("br", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("br", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("br", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals("br", formElement1.nodeName());
      assertEquals("br", formElement1.tagName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("br", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        formElement1.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("^(RxfB4myP_R9)");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertTrue(document1.hasParent());
      
      Document document2 = (Document)document1.prependText("(<p(*xz[POwO6");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Elements elements0 = document1.getElementsContainingText("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertTrue(document1.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.cssSelector();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(2590);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(2590, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2590, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(2590, document_OutputSettings2.indentAmount());
      assertEquals(2590, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(2590, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(2590, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(2590, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(2590, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(2590, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertNotNull(document_OutputSettings4);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.clone();
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings5);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(2590, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(2590, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(2590, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(2590, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(2590, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals(2590, document_OutputSettings5.indentAmount());
      assertTrue(document_OutputSettings5.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings5.escapeMode());
      assertNotNull(document_OutputSettings5);
      
      // Undeclared exception!
      try { 
        document2.outerHtmlHead((Appendable) null, 2590, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("^(RxfB4myP_R9)");
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("^(RxfB4myP_R9)"));
      
      Document document2 = Parser.parseBodyFragment("^(RxfB4myP_R9)", "B'ErT8ZV(,q-5r");
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("B'ErT8ZV(,q-5r", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("B'ErT8ZV(,q-5r", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Element element0 = document0.getElementById("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document1.html((StringWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"NMz2T#@[+{3&", "\"NMz2T#@[+{3&");
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = element0.tagName("\"NMz2T#@[+{3&");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("\"nmz2t#@[+{3&", element0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("\"nmz2t#@[+{3&", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("\"NMz2T#@[+{3&", element1.baseUri());
      assertEquals("\"nmz2t#@[+{3&", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("\"nmz2t#@[+{3&", element1.nodeName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-\"NMz2T#{[+{3&", "-\"NMz2T#{[+{3&");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("-\"NMz2T#{[+{3&", document0.baseUri());
      assertEquals("-\"NMz2T#{[+{3&", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Node.EmptyString;
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Hahhg;eqn[A}>V)g7");
      assertFalse(boolean0);
      
      String string2 = document0.val();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("-\"NMz2T#{[+{3&", document0.baseUri());
      assertEquals("-\"NMz2T#{[+{3&", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string2);
      assertEquals("", string2);
      
      Element element0 = document0.selectFirst("UI");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("-\"NMz2T#{[+{3&", document0.baseUri());
      assertEquals("-\"NMz2T#{[+{3&", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Jc+48D N", "^(RxfB4myP_R9)");
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.appendText("^(RxfB4myP_R9)");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("^(RxfB4myP_R9)", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      
      Elements elements0 = element0.previousElementSiblings();
      assertSame(element0, element1);
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      int int0 = element0.elementSiblingIndex();
      assertSame(element0, element1);
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "J7?st`%OvARS7FN5EbK";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J7?st`%OvARS7FN5EbK");
      assertFalse(boolean0);
      
      String string1 = "org.jsoup.parser.TokenQueue";
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.TokenQueue", "J7?st`%OvARS7FN5EbK");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.baseUri());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(124);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Document document2 = document1.parser(parser1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.baseUri());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("J7?st`%OvARS7FN5EbK", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("J7?st`%OvARS7FN5EbK", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Element element0 = document2.createElement("org.jsoup.parser.TokenQueue");
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.baseUri());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("J7?st`%OvARS7FN5EbK", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("J7?st`%OvARS7FN5EbK", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("J7?st`%OvARS7FN5EbK", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.parser.TokenQueue", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.parser.TokenQueue", element0.nodeName());
      assertNotNull(element0);
      
      Attributes attributes0 = element0.attributes();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.baseUri());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("J7?st`%OvARS7FN5EbK", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("J7?st`%OvARS7FN5EbK", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("J7?st`%OvARS7FN5EbK", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.parser.TokenQueue", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.parser.TokenQueue", element0.nodeName());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "typemustmatch");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Elements elements0 = element0.getElementsByTag("org.jsoup.parser.TokenQueue");
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.baseUri());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("J7?st`%OvARS7FN5EbK", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("J7?st`%OvARS7FN5EbK", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("J7?st`%OvARS7FN5EbK", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.parser.TokenQueue", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.parser.TokenQueue", element0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Document document3 = (Document)document2.appendTo(document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("J7?st`%OvARS7FN5EbK", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.baseUri());
      assertEquals("J7?st`%OvARS7FN5EbK", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("J7?st`%OvARS7FN5EbK", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("J7?st`%OvARS7FN5EbK", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals("J7?st`%OvARS7FN5EbK", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("J7?st`%OvARS7FN5EbK", document3.location());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      String string2 = "";
      // Undeclared exception!
      document3.prependElement("");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"NMz2T#@[+{3&", "\"NMz2T#@[+{3&");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("\"NMz2T#@[+{3&");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", element0.tagName());
      assertEquals("\"NMz2T#@[+{3&", element0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", element0.tagName());
      assertEquals("\"NMz2T#@[+{3&", element0.nodeName());
      assertEquals("\"NMz2T#@[+{3&", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      Document document1 = (Document)document0.prependText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"NMz2T#@[+{3&", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("\"NMz2T#@[+{3&", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      String string0 = document0.cssSelector();
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("\"NMz2T#@[+{3& > #root", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"NMz2T#@[+{3&", "\"NMz2T#@[+{3&");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasClass("\"NMz2T#@[+{3&");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(boolean0);
      
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("\"NMz2T#@[+{3&", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"NMz2T#@[+{3&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("\"NMz2T#@[+{3&", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("\"NMz2T#@[+{3&", element0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("X=y/?GUn$(*t;o`i2|");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      
      Element element2 = element0.prependText("X=y/?GUn$(*t;o`i2|");
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(2, element2.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
      
      String string0 = element1.absUrl("0MN7Ng5v(Z");
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = element2.getElementsContainingText("X=y/?GUn$(*t;o`i2|");
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(2, element2.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Element element3 = element1.appendText("X=y/?GUn$(*t;o`i2|");
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element0, element3);
      assertSame(element1, element3);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element3, element1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("", element3.baseUri());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element3.tagName());
      assertEquals(1, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals("x=y/?gun$(*t;o`i2|", element3.nodeName());
      assertNotNull(element3);
      
      Elements elements1 = element3.getElementsByAttributeValueContaining("0MN7Ng5v(Z", "|");
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element0, element3);
      assertSame(element1, element3);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element3, element1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("", element3.baseUri());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element3.tagName());
      assertEquals(1, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals("x=y/?gun$(*t;o`i2|", element3.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      String string0 = document0.wholeText();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasText();
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        element0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("^(RxfB4myP_R9)");
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("^(RxfB4myP_R9)"));
      
      Elements elements0 = document0.getElementsContainingText(":nth-child(%d)");
      assertSame(document0, document1);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document2 = (Document)document0.prependText(":nth-child(%d)");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      DataNode dataNode0 = DataNode.createFromEncoded("^(RxfB4myP_R9)", "^(RxfB4myP_R9)");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      DataNode dataNode1 = dataNode0.setWholeData("^(RxfB4myP_R9)");
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertFalse(dataNode1.hasParent());
      assertNotNull(dataNode1);
      
      Document document3 = (Document)document2.appendChild(dataNode1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(2, dataNode0.siblingIndex());
      assertEquals(2, dataNode1.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertTrue(dataNode1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("^(RxfB4myP_R9)", document3.baseUri());
      assertNotNull(document3);
      
      Elements elements1 = document0.getElementsContainingText("he`=I");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      Element element0 = document1.previousElementSibling();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNull(element0);
      
      Document document4 = (Document)document0.addClass("b2XB,#h?7");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^(RxfB4myP_R9)", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("^(RxfB4myP_R9)", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      String string0 = document0.wholeText();
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.outerHtml();
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      
      Element element1 = element0.previousElementSibling();
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Element element0 = new Element("F\"");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("F\"", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("F\"", element0.nodeName());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.attr((String) null, "F\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "value";
      Document document0 = Document.createShell("value");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("value", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Document document1 = element0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("value", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document document2 = document1.normalise();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("value", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertNotNull(document2);
      
      String string1 = "figure";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Elements elements0 = document2.getElementsByAttributeValueEnding("value", "figure");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("value", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document1.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("^(RxfB4myP_R9)");
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertFalse(document1.isBlock());
      
      // Undeclared exception!
      document0.val("^(RxfB4myP_R9)");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("^(RxfB4myP_R9)");
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("^(RxfB4myP_R9)"));
      
      Document document2 = Parser.parseBodyFragment("^(RxfB4myP_R9)", "^(RxfB4myP_R9)");
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.append("^(RxfB4myP_R9)");
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("^(RxfB4myP_R9)", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("^(RxfB4myP_R9)", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Elements elements0 = document2.getAllElements();
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      
      Document document4 = (Document)document0.val("^(RxfB4myP_R9)");
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      
      boolean boolean0 = document4.hasClass("^(RxfB4myP_R9)");
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(boolean0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements1 = document3.previousElementSiblings();
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(elements1, elements0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("^(RxfB4myP_R9)", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("^(RxfB4myP_R9)", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Elements elements2 = document0.children();
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertNotNull(elements2);
      
      Document document5 = (Document)document4.attr("^(RxfB4myP_R9)", false);
      assertSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document4, document3);
      assertSame(document5, document4);
      assertNotSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertNotSame(document5, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("^(RxfB4myP_R9)", document5.location());
      assertNotNull(document5);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("^(RxfB4myP_R9)");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = (Document)document1.prependText("(<p(*xz[POwO6");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertNotNull(document2);
      
      Elements elements0 = document2.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document2.children();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      
      Elements elements2 = document0.nextElementSiblings();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      
      // Undeclared exception!
      document1.prependElement("^(RxfB4myP_R9)");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("w", parseSettings0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("w", tag0.toString());
      assertEquals("w", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      attributes0.removeIgnoreCase("VV*|Sn0p:~Nv,T0V8G");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Tag tag1 = Tag.valueOf("yNd7I.JPz3p;+PSECd", parseSettings0);
      assertNotSame(tag1, tag0);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", tag1.getName());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertEquals("yNd7I.JPz3p;+PSECd", tag1.toString());
      assertFalse(tag1.isKnownTag());
      assertNotNull(tag1);
      
      Attribute attribute0 = Attribute.createFromEncoded("w", "K");
      assertEquals("w", attribute0.getKey());
      assertEquals("K", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("w", attribute0.getKey());
      assertEquals("K", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertNotNull(attributes1);
      
      Element element0 = new Element(tag1, "VV*|Sn0p:~Nv,T0V8G", attributes1);
      assertFalse(tag1.equals((Object)tag0));
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", tag1.getName());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertEquals("yNd7I.JPz3p;+PSECd", tag1.toString());
      assertFalse(tag1.isKnownTag());
      assertEquals("w", attribute0.getKey());
      assertEquals("K", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals("yNd7I.JPz3p;+PSECd", element0.nodeName());
      assertEquals("VV*|Sn0p:~Nv,T0V8G", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsContainingText("K");
      assertSame(attributes0, attributes1);
      assertNotSame(tag1, tag0);
      assertSame(attributes1, attributes0);
      assertFalse(tag1.equals((Object)tag0));
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", tag1.getName());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertEquals("yNd7I.JPz3p;+PSECd", tag1.toString());
      assertFalse(tag1.isKnownTag());
      assertEquals("w", attribute0.getKey());
      assertEquals("K", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals("yNd7I.JPz3p;+PSECd", element0.nodeName());
      assertEquals("VV*|Sn0p:~Nv,T0V8G", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "~";
      stringArray0[2] = "";
      stringArray0[3] = "body";
      stringArray0[4] = "VV*|Sn0p:~Nv,T0V8G";
      stringArray0[5] = "K";
      stringArray0[6] = "5yS;E&$]{AQCvUl^";
      stringArray0[7] = "yNd7I.JPz3p;+PSECd";
      attributes0.keys = stringArray0;
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      
      Element element1 = element0.appendElement("body");
      assertSame(attributes0, attributes1);
      assertNotSame(element1, element0);
      assertNotSame(tag1, tag0);
      assertSame(attributes1, attributes0);
      assertNotSame(element0, element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(tag1.equals((Object)tag0));
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(0, element1.childNodeSize());
      assertEquals("VV*|Sn0p:~Nv,T0V8G", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", tag1.getName());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertEquals("yNd7I.JPz3p;+PSECd", tag1.toString());
      assertFalse(tag1.isKnownTag());
      assertEquals("w", attribute0.getKey());
      assertEquals("K", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals("yNd7I.JPz3p;+PSECd", element0.nodeName());
      assertEquals("VV*|Sn0p:~Nv,T0V8G", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", element0.tagName());
      assertNotNull(element1);
      
      Element element2 = element1.previousElementSibling();
      assertSame(attributes0, attributes1);
      assertNotSame(element1, element0);
      assertNotSame(tag1, tag0);
      assertSame(attributes1, attributes0);
      assertNotSame(element0, element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(0, element1.childNodeSize());
      assertEquals("VV*|Sn0p:~Nv,T0V8G", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.isInline());
      assertTrue(tag1.formatAsBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", tag1.getName());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertEquals("yNd7I.JPz3p;+PSECd", tag1.toString());
      assertFalse(tag1.isKnownTag());
      assertEquals("w", attribute0.getKey());
      assertEquals("K", attribute0.getValue());
      assertEquals(2, attributes1.size());
      assertEquals("yNd7I.JPz3p;+PSECd", element0.nodeName());
      assertEquals("VV*|Sn0p:~Nv,T0V8G", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", element0.tagName());
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("^(RxfB4myP_R9)");
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      
      Document document2 = (Document)document1.prependText("(<p(*xz[POwO6");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.appendText("(<p(*xz[POwO6");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("^(RxfB4myP_R9)", document3.baseUri());
      assertEquals("^(RxfB4myP_R9)", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      
      Elements elements0 = document1.getElementsContainingText("org.jsoup.nodes.Comment");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document2.previousElementSiblings();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("^(RxfB4myP_R9)");
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("^(RxfB4myP_R9)"));
      
      Document document2 = Parser.parseBodyFragment("^(RxfB4myP_R9)", "^(RxfB4myP_R9)");
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.append("^(RxfB4myP_R9)");
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("^(RxfB4myP_R9)", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("^(RxfB4myP_R9)", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      
      Elements elements0 = document2.getAllElements();
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      
      Document document4 = (Document)document0.val("^(RxfB4myP_R9)");
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("^(RxfB4myP_R9)", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("^(RxfB4myP_R9)", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertNotNull(document4);
      
      Elements elements1 = document3.getElementsContainingText("^(RxfB4myP_R9)");
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(elements1, elements0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("^(RxfB4myP_R9)", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("^(RxfB4myP_R9)", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(elements1.isEmpty());
      assertEquals(3, elements1.size());
      assertNotNull(elements1);
      
      Element element0 = document1.body();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Elements elements2 = document3.previousElementSiblings();
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("^(RxfB4myP_R9)", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("^(RxfB4myP_R9)", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      
      List<Node> list0 = document4.ensureChildNodes();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("^(RxfB4myP_R9)", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("^(RxfB4myP_R9)", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "e#&k\"..,W|zAD}|N";
      Document document0 = new Document("e#&k\"..,W|zAD}|N");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("e#&k\"..,W|zAD}|N", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("e#&k\"..,W|zAD}|N", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Comment comment0 = new Comment("e#&k\"..,W|zAD}|N");
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      document0.setParentNode(comment0);
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      
      boolean boolean0 = document0.hasText();
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document("e#&k\"..,W|zAD}|N");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e#&k\"..,W|zAD}|N", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("e#&k\"..,W|zAD}|N", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e#&k\"..,W|zAD}|N", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("e#&k\"..,W|zAD}|N", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = (Document)document1.prependText("?2%1{:&@kcYqwJ{+h");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e#&k\"..,W|zAD}|N", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("e#&k\"..,W|zAD}|N", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("e#&k\"..,W|zAD}|N", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertNotNull(document2);
      
      Elements elements0 = document1.getElementsContainingText("e#&k\"..,W|zAD}|N");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e#&k\"..,W|zAD}|N", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("e#&k\"..,W|zAD}|N", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document0.previousElementSiblings();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      Document document3 = (Document)document0.attr("html", true);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("e#&k\"..,W|zAD}|N", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("e#&k\"..,W|zAD}|N", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsContainingText(":matches");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals("value", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      String string0 = element0.id();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals("value", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals("value", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      
      Set<String> set0 = element0.classNames();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals("value", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("value"));
      
      Element element1 = element0.val(":matches");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals("value", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("value", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = new Document("e#&k\"..,W|zAD}|N");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("e#&k\"..,W|zAD}|N");
      assertFalse(element0.isBlock());
      assertEquals("e#&k\"..,W|zAD}|N", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e#&k\"..,W|zAD}|N", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("e#&k\"..,W|zAD}|N");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element0.isBlock());
      assertEquals("e#&k\"..,W|zAD}|N", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e#&k\"..,W|zAD}|N", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("e#&k\"..,w|zad}|n", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("e#&k\"..,w|zad}|n", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      Element element2 = element1.prependText("e#&k\"..,W|zAD}|N");
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element0.isBlock());
      assertEquals("e#&k\"..,W|zAD}|N", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e#&k\"..,W|zAD}|N", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("e#&k\"..,w|zad}|n", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("e#&k\"..,w|zad}|n", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("e#&k\"..,w|zad}|n", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("e#&k\"..,w|zad}|n", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertNotNull(element2);
      
      Elements elements0 = element1.parents();
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element0.isBlock());
      assertEquals("e#&k\"..,W|zAD}|N", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e#&k\"..,W|zAD}|N", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("e#&k\"..,w|zad}|n", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("e#&k\"..,w|zad}|n", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element2.previousElementSiblings();
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(element0.isBlock());
      assertEquals("e#&k\"..,W|zAD}|N", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("e#&k\"..,W|zAD}|N", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("e#&k\"..,w|zad}|n", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("e#&k\"..,w|zad}|n", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("e#&k\"..,w|zad}|n", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("e#&k\"..,w|zad}|n", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "e#&k\"..,W|zAD}|N";
      Document document0 = Document.createShell("e#&k\"..,W|zAD}|N");
      assertFalse(document0.isBlock());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("e#&k\"..,W|zAD}|N");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("e#&k\"..,W|zAD}|N", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("e#&k\"..,W|zAD}|N", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("e#&k\"..,W|zAD}|N", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Document document2 = Parser.parseBodyFragment("e#&k\"..,W|zAD}|N", "e#&k\"..,W|zAD}|N");
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("e#&k\"..,W|zAD}|N", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("e#&k\"..,W|zAD}|N", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("X=y/?GUn$(*t;o`i2|");
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      boolean boolean1 = element0.hasText();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertTrue(boolean1 == boolean0);
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(boolean1);
      
      String string0 = element0.outerHtml();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(string0);
      assertEquals("<X=y/?GUn$(*t;o`i2|>\n <x=y/?gun$(*t;o`i2|></x=y/?gun$(*t;o`i2|>\n</X=y/?GUn$(*t;o`i2|>", string0);
      
      Elements elements0 = element1.previousElementSiblings();
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element2 = element1.val("ol");
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("x=y/?gun$(*t;o`i2|", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6v", "6v");
      assertEquals("6v", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("6v", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string0 = document0.data();
      assertEquals("6v", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("6v", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = document0.getElementsByIndexEquals((-47));
      assertEquals("6v", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("6v", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Comment comment0 = new Comment("X=y/?GUn$(*t;o`i2|");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      document0.setParentNode(comment0);
      assertEquals("6v", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("6v", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      Document document1 = (Document)document0.prependText(".");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("6v", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("6v", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("6v", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("6v", document1.baseUri());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.getElementsContainingText(".");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("X=y/?GUn$(*t;o`i2|");
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      Element element2 = element1.tagName("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("x=y/?gun$(*t;o`i2|", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      
      Element element3 = element0.prependText("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertNotSame(element3, element2);
      assertNotSame(element3, element1);
      assertSame(element3, element0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals(2, element3.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element3.tagName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element3.nodeName());
      assertNotNull(element3);
      
      Elements elements0 = element3.getElementsContainingText("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertNotSame(element3, element2);
      assertNotSame(element3, element1);
      assertSame(element3, element0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals(2, element3.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element3.tagName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element3.nodeName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document document0 = Document.createShell("QP-LBx");
      assertEquals("QP-LBx", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("QP-LBx", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = new Document("Ty>_1HTBf");
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertEquals("Ty>_1HTBf", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Ty>_1HTBf", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      List<Node> list0 = document1.childNodes();
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertEquals("Ty>_1HTBf", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Ty>_1HTBf", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      document0.reparentChild(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("QP-LBx", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("QP-LBx", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ty>_1HTBf", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Ty>_1HTBf", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Document document2 = (Document)document1.append("Ty>_1HTBf");
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ty>_1HTBf", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ty>_1HTBf", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("Ty>_1HTBf", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Ty>_1HTBf", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Pattern pattern0 = Pattern.compile("Ty>_1HTBf", 11);
      assertEquals(11, pattern0.flags());
      assertEquals("Ty>_1HTBf", pattern0.toString());
      assertEquals("Ty>_1HTBf", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document2.getElementsByAttributeValueMatching("Ty>_1HTBf", pattern0);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ty>_1HTBf", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ty>_1HTBf", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("Ty>_1HTBf", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Ty>_1HTBf", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(11, pattern0.flags());
      assertEquals("Ty>_1HTBf", pattern0.toString());
      assertEquals("Ty>_1HTBf", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      List<Node> list1 = document1.childNodes();
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(list1, list0);
      assertFalse(document1.equals((Object)document0));
      assertTrue(list1.equals((Object)list0));
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ty>_1HTBf", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ty>_1HTBf", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      String string0 = document1.text();
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ty>_1HTBf", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ty>_1HTBf", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(string0);
      assertEquals("Ty>_1HTBf", string0);
      
      String string1 = document1.val();
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Ty>_1HTBf", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Ty>_1HTBf", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("X=y/?GUn$(*t;o`i2|");
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      
      Element element2 = element0.prependText("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(2, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      
      Elements elements0 = element2.getElementsContainingText("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(2, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(2, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("^(RxfB4myP_R9)");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("^(RxfB4myP_R9)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Set<String> set0 = new LinkedHashSet<String>();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("^(RxfB4myP_R9)"));
      
      Document document2 = Document.createShell("^(RxfB4myP_R9)");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("^(RxfB4myP_R9)", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("^(RxfB4myP_R9)", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      String string0 = document0.cssSelector();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      String string1 = document0.val();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Element element0 = document1.shallowClone();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^(RxfB4myP_R9)", document1.baseUri());
      assertEquals("^(RxfB4myP_R9)", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("^(RxfB4myP_R9)", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      boolean boolean0 = document0.is("#root");
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^(RxfB4myP_R9)", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("^(RxfB4myP_R9)", document0.baseUri());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string0 = "Ty>_1HTBf";
      Document document1 = new Document("Ty>_1HTBf");
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Ty>_1HTBf", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Ty>_1HTBf", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      List<Node> list0 = document1.childNodes();
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Ty>_1HTBf", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Ty>_1HTBf", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      document0.reparentChild(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Ty>_1HTBf", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("Ty>_1HTBf", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document1.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      
      Document document2 = (Document)document0.prependText("\"NMz2T#@[+{3&");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("value", document2.location());
      assertNotNull(document2);
      
      Elements elements0 = document1.getElementsContainingText(":matches");
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = document1.body();
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("value", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      Elements elements1 = element0.previousElementSiblings();
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("value", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "Gnc1+/u/iRf/%";
      Document document0 = Parser.parseBodyFragmentRelaxed(":>o(*lI>~ 1% ", "Gnc1+/u/iRf/%");
      assertFalse(document0.isBlock());
      assertEquals("Gnc1+/u/iRf/%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Gnc1+/u/iRf/%", document0.baseUri());
      assertNotNull(document0);
      
      List<Node> list0 = document0.childNodesCopy();
      assertFalse(document0.isBlock());
      assertEquals("Gnc1+/u/iRf/%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Gnc1+/u/iRf/%", document0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      String string1 = "`BX|V+";
      Document document1 = (Document)document0.prependText("`BX|V+");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("Gnc1+/u/iRf/%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Gnc1+/u/iRf/%", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Gnc1+/u/iRf/%", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Gnc1+/u/iRf/%", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      String string2 = document0.ownText();
      assertSame(document0, document1);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.isBlock());
      assertEquals("Gnc1+/u/iRf/%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Gnc1+/u/iRf/%", document0.baseUri());
      assertNotNull(string2);
      assertEquals("`BX|V+", string2);
      
      document1.setSiblingIndex(43);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("Gnc1+/u/iRf/%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(43, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Gnc1+/u/iRf/%", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Gnc1+/u/iRf/%", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Gnc1+/u/iRf/%", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(43, document1.siblingIndex());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TextNode textNode0 = new TextNode(":>o(*lI>~ 1% ", "`BX|V+");
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      document1.parentNode = (Node) textNode0;
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Gnc1+/u/iRf/%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(43, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Gnc1+/u/iRf/%", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Gnc1+/u/iRf/%", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Gnc1+/u/iRf/%", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(43, document1.siblingIndex());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertFalse(document1.parentNode.hasParent());
      
      document1.siblingIndex = 8249;
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Gnc1+/u/iRf/%", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals(8249, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Gnc1+/u/iRf/%", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("Gnc1+/u/iRf/%", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(8249, document1.siblingIndex());
      assertEquals("Gnc1+/u/iRf/%", document1.baseUri());
      assertFalse(document1.isBlock());
      
      // Undeclared exception!
      try { 
        document1.getElementsByIndexEquals((-1618280579));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("ZPF&${J3|");
      assertEquals("ZPF&${J3|", element0.nodeName());
      assertEquals("ZPF&${J3|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.toggleClass(":nth-of-type(");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("ZPF&${J3|", element0.nodeName());
      assertEquals("ZPF&${J3|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("ZPF&${J3|", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("ZPF&${J3|", element1.nodeName());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        element0.before("br");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("clyss");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("clyss", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("clyss", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("clyss", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("clyss", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      document1.setParentNode(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("clyss", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("clyss", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("clyss", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document1.prependText("\"NMz2T#@[+{3&");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("clyss", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("clyss", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("clyss", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("clyss", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("clyss", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      document0.nodelistChanged();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("clyss", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "eL7#v=m{");
      assertFalse(boolean0);
      
      Elements elements0 = document1.getElementsContainingText("eL7#v=m{");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("clyss", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("clyss", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("clyss", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element0 = document1.previousElementSibling();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("clyss", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("clyss", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("clyss", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "cl0y6s";
      Document document0 = new Document("cl0y6s");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("cl0y6s", document0.location());
      assertEquals("cl0y6s", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("cl0y6s", document0.location());
      assertEquals("cl0y6s", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("cl0y6s", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("cl0y6s", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      document1.setParentNode(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("cl0y6s", document0.location());
      assertEquals("cl0y6s", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("cl0y6s", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("cl0y6s", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      Element element0 = document1.firstElementSibling();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("cl0y6s", document0.location());
      assertEquals("cl0y6s", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("cl0y6s", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("cl0y6s", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(element0);
      
      List<DataNode> list0 = document1.dataNodes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("cl0y6s", document0.location());
      assertEquals("cl0y6s", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("cl0y6s", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("cl0y6s", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Element element1 = document0.createElement("body");
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("cl0y6s", document0.location());
      assertEquals("cl0y6s", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("cl0y6s", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        element1.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Element element1 = element0.doClone(document1);
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(document1, document0);
      assertNotSame(element1, element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      
      String string0 = document0.wholeText();
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document2 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Elements elements0 = document0.getElementsContainingText("");
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.insertChildren((int) (byte)4, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Element element0 = new Element("d/T\u0004 h");
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      TextNode textNode0 = TextNode.createFromEncoded("d/T\u0004 h");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Element element1 = new Element("head");
      assertFalse(element1.equals((Object)element0));
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertNotNull(element1);
      
      Document document0 = new Document("head");
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsContainingText("br");
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.nextElementSiblings();
      assertNotSame(element0, element1);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element1));
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      Element element2 = element0.prepend("9yFBL");
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
      
      element2.setParentNode(element0);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      
      Elements elements2 = element2.getElementsByAttributeValueContaining("[eLluy", "[eLluy");
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      
      Element element3 = element2.firstElementSibling();
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertNull(element3);
      
      List<DataNode> list0 = element2.dataNodes();
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = "Children collection to be inserted must not be null.";
      Document document1 = (Document)document0.addClass("Children collection to be inserted must not be null.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("head", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("head", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      int int0 = 2147483645;
      Elements elements3 = document1.getElementsByClass("d/T\u0004 h");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("head", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("head", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertNotNull(elements3);
      
      Document document2 = document0.clone();
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("head", document2.baseUri());
      assertEquals("head", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        element1.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      List<Node> list0 = document1.childNodes();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      document0.reparentChild(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document0.append("Ty>_1HTBf");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      List<Node> list1 = document2.childNodes();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(list1, list0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(list1.equals((Object)list0));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      String string0 = document0.text();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("Ty>_1HTBf", string0);
      
      Elements elements0 = document2.getElementsByAttributeValueMatching("i&", "i&");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document2.getElementsMatchingOwnText("i&");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Document document3 = (Document)document1.text("&t?rbgM#=N");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = new Document("clyss");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals("clyss", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = document0.id();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals("clyss", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Set<String> set0 = document0.classNames();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals("clyss", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("clyss"));
      
      Document document1 = Parser.parseBodyFragment("clyss", "");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.addClass("eof");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals("clyss", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("clyss", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("clyss", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Parser parser2 = parser1.setTrackErrors(118);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertNotNull(parser2);
      
      Document document2 = document1.parser(parser2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Element element0 = document2.head();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Elements elements0 = element0.nextElementSiblings();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_H^Vv.", "_H^Vv.");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("_H^Vv.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_H^Vv.", document0.location());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("_H^Vv.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("_H^Vv.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_H^Vv.", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("_H^Vv.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("_H^Vv.", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("_H^Vv."));
      
      Document document2 = (Document)document1.prependChild(document0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("_H^Vv.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_H^Vv.", document0.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("_H^Vv.", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("_H^Vv.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("_H^Vv.", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("_H^Vv.", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Document document3 = document2.parser(parser1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("_H^Vv.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_H^Vv.", document0.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("_H^Vv.", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("_H^Vv.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("_H^Vv.", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("_H^Vv.", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("_H^Vv.", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("_H^Vv.", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      
      Document document4 = (Document)document3.addClass("_H^Vv.");
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertEquals("_H^Vv.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_H^Vv.", document0.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("_H^Vv.", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("_H^Vv.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("_H^Vv.", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("_H^Vv.", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("_H^Vv.", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("_H^Vv.", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("_H^Vv.", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("_H^Vv.", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      
      Document document5 = (Document)document2.toggleClass(">S_ Epxc1T)z4#8, ");
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document3);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertEquals("_H^Vv.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_H^Vv.", document0.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("_H^Vv.", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("_H^Vv.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("_H^Vv.", document2.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("_H^Vv.", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document5.tagName());
      assertEquals("_H^Vv.", document5.baseUri());
      assertTrue(document5.hasParent());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertEquals("_H^Vv.", document5.location());
      assertFalse(document5.isBlock());
      assertNotNull(document5);
      
      Element element0 = document0.lastElementSibling();
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertEquals("_H^Vv.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("_H^Vv.", document0.location());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("_H^Vv.", element0.baseUri());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Document document6 = Parser.parse(">S_ Epxc1T)z4#8, ", ">S_ Epxc1T)z4#8, ");
      assertNotSame(document6, document2);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document0);
      assertNotSame(document6, document3);
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(">S_ Epxc1T)z4#8, ", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertEquals(">S_ Epxc1T)z4#8, ", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertNotNull(document6);
      
      String string0 = document6.text();
      assertNotSame(document6, document2);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document5);
      assertNotSame(document6, document0);
      assertNotSame(document6, document3);
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document3));
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(">S_ Epxc1T)z4#8, ", document6.baseUri());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertEquals(">S_ Epxc1T)z4#8, ", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertNotNull(string0);
      assertEquals(">S_ Epxc1T)z4#8,", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("X=y/?GUn$(*t;o`i2|", parseSettings0);
      assertFalse(tag0.isEmpty());
      assertEquals("X=y/?GUn$(*t;o`i2|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("X=y/?GUn$(*t;o`i2|", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("nth-last-child");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "X=y/?GUn$(*t;o`i2|", attributes0);
      assertFalse(tag0.isEmpty());
      assertEquals("X=y/?GUn$(*t;o`i2|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("X=y/?GUn$(*t;o`i2|", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("X=y/?GUn$(*t;o`i2|", formElement0.baseUri());
      assertEquals("X=y/?GUn$(*t;o`i2|", formElement0.nodeName());
      assertNotNull(formElement0);
      
      Document document0 = Parser.parse(" ", "X=y/?GUn$(*t;o`i2|");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("X=y/?GUn$(*t;o`i2|", document1.baseUri());
      assertEquals("X=y/?GUn$(*t;o`i2|", document1.location());
      assertNotNull(document1);
      
      FormElement formElement1 = formElement0.addElement(document1);
      assertSame(formElement0, formElement1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(formElement1, formElement0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(tag0.isEmpty());
      assertEquals("X=y/?GUn$(*t;o`i2|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("X=y/?GUn$(*t;o`i2|", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("X=y/?GUn$(*t;o`i2|", formElement0.baseUri());
      assertEquals("X=y/?GUn$(*t;o`i2|", formElement0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("X=y/?GUn$(*t;o`i2|", document1.baseUri());
      assertEquals("X=y/?GUn$(*t;o`i2|", document1.location());
      assertEquals("X=y/?GUn$(*t;o`i2|", formElement1.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertNotNull(formElement1);
      
      Element element0 = formElement1.tagName("U`oFB");
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertSame(element0, formElement0);
      assertSame(element0, formElement1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(tag0.isEmpty());
      assertEquals("X=y/?GUn$(*t;o`i2|", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("X=y/?GUn$(*t;o`i2|", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("u`ofb", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("u`ofb", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("X=y/?GUn$(*t;o`i2|", formElement0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("X=y/?GUn$(*t;o`i2|", document1.baseUri());
      assertEquals("X=y/?GUn$(*t;o`i2|", document1.location());
      assertEquals("X=y/?GUn$(*t;o`i2|", formElement1.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("u`ofb", formElement1.nodeName());
      assertEquals("u`ofb", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("u`ofb", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("u`ofb", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("clyss");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("clyss", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("clyss", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document document2 = (Document)document0.removeClass("</");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("clyss", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("clyss", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Set<String> set0 = document2.classNames();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("clyss", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("clyss", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("clyss"));
      
      // Undeclared exception!
      try { 
        document1.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      String string0 = document0.wholeText();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element1 = element0.prependText("Tag name must not be empty.");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
      
      Elements elements0 = element1.getElementsContainingText("eL7#v=m{");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = Parser.parseBodyFragment("Csi!{y|[2RWwwx 8h", "eL7#v=m{");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("eL7#v=m{", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("eL7#v=m{", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("#root");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = (Document)document0.removeClass("br");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.val("br");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      document0.nodelistChanged();
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      
      String string0 = document1.id();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Document document2 = (Document)document1.addClass("");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.toggleClass(" ");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      String string0 = document0.wholeText();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Document document2 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("Insert position out of bounds.", document2.location());
      assertNotNull(document2);
      
      Elements elements0 = element0.getElementsByIndexGreaterThan(0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      String string1 = document1.tagName();
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(string1);
      assertEquals("#root", string1);
      
      Element element1 = element0.appendTo(document1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(element0, element1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(element1, element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("formnovalidate", "formnovalidate");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("formnovalidate", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("formnovalidate", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.wrap("formnovalidate");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("formnovalidate", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("formnovalidate", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Tag name must not be empty.");
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = document1.clone();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Element element0 = document2.head();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      Tag tag0 = element0.tag();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertEquals("head", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("head", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(true);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertNotNull(document_OutputSettings4);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.syntax(document_OutputSettings_Syntax0);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings5.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertTrue(document_OutputSettings5.outline());
      assertNotNull(document_OutputSettings5);
      
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings5.prettyPrint(false);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings6);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings6);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertSame(document_OutputSettings4, document_OutputSettings6);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings6);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings3);
      assertSame(document_OutputSettings6, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings4);
      assertSame(document_OutputSettings6, document_OutputSettings5);
      assertSame(document_OutputSettings6, document_OutputSettings2);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings5.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertTrue(document_OutputSettings5.outline());
      assertEquals(1, document_OutputSettings6.indentAmount());
      assertTrue(document_OutputSettings6.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings6.syntax());
      assertFalse(document_OutputSettings6.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings6.escapeMode());
      assertNotNull(document_OutputSettings6);
      
      Tag tag0 = Tag.valueOf("^w6RxfB4[yPhR9)");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("^w6RxfB4[yPhR9)", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertEquals("^w6RxfB4[yPhR9)", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("@rX 6^<(F{", "&quot;");
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      Attributes attributes3 = attributes2.put("val8e", true);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      
      Element element0 = new Element(tag0, "&quot;", attributes3);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("^w6RxfB4[yPhR9)", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertEquals("^w6RxfB4[yPhR9)", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(0, element0.siblingIndex());
      assertEquals("&quot;", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^w6RxfB4[yPhR9)", element0.nodeName());
      assertEquals("^w6RxfB4[yPhR9)", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      boolean boolean0 = attributes3.hasKeyIgnoreCase("rys*WrvxV#)=oA7}Dy");
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2L1_K4g2C\".x$yGi_,", "2L1_K4g2C\".x$yGi_,");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("2L1_K4g2C\".x$yGi_,", document1.location());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document document2 = (Document)document1.text("X=y/?GUn$(*t;o`i2|");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("2L1_K4g2C\".x$yGi_,", document1.location());
      assertEquals("2L1_K4g2C\".x$yGi_,", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("2L1_K4g2C\".x$yGi_,", document2.location());
      assertNotNull(document2);
      
      int int0 = document0.elementSiblingIndex();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText("X=y/?GUn$(*t;o`i2|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: X=y/?GUn$(*t;o`i2|
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = new Document("clyss");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("clyss", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Document document1 = (Document)document0.prependText("\"NMz2T#@[+{3&");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("clyss", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("clyss", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("clyss", document1.location());
      assertNotNull(document1);
      
      Document document2 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("clyss", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("clyss", document2.location());
      assertEquals("clyss", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Document document3 = (Document)document1.appendTo(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("clyss", document0.location());
      assertEquals("clyss", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("clyss", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("clyss", document1.location());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("clyss", document2.location());
      assertEquals("clyss", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("clyss", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("clyss", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Document document4 = Parser.parseBodyFragment("h_ lC>X$Lc", "org.jsoup.nodes.Element$1");
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document4.location());
      assertNotNull(document4);
      
      Elements elements0 = document4.getElementsContainingText("br");
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("org.jsoup.nodes.Element$1", document4.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document5 = Parser.parseBodyFragment("html", "clyss");
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertEquals("clyss", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertEquals("clyss", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertNotNull(document5);
      
      Element element0 = document5.nextElementSibling();
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertEquals("clyss", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertEquals("clyss", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertNull(element0);
      
      // Undeclared exception!
      document0.tagName("h_ lC>X$Lc");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "clyss";
      Document document0 = new Document("clyss");
      assertEquals("clyss", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("clyss", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("clyss", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("clyss", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      Document document2 = (Document)document1.text("clyss");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("clyss", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("clyss", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("clyss", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("clyss", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("clyss", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueEnding((String) null, "clyss");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "Gnc1+/u/iRf/%";
      String string1 = "textarea";
      Document document0 = Parser.parse("Gnc1+/u/iRf/%", "textarea");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      int int0 = (-29);
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jsoup.nodes.Element$2");
      assertFalse(boolean0);
      
      Elements elements0 = document0.getElementsByIndexLessThan((-29));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string2 = document0.nodeName();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string2);
      assertEquals("#document", string2);
      
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-29));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = new Document.OutputSettings();
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Tag tag0 = Tag.valueOf("c");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertEquals("c", tag0.toString());
      assertEquals("c", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "R]FlR(3?tCblm", (Attributes) null);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertEquals("c", tag0.toString());
      assertEquals("c", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("R]FlR(3?tCblm", formElement0.baseUri());
      assertEquals("c", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("c", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      Document document0 = Document.createShell("c");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("c", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("c", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertEquals("c", tag0.toString());
      assertEquals("c", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("R]FlR(3?tCblm", formElement0.baseUri());
      assertEquals("c", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("c", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("c", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("c", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals("R]FlR(3?tCblm", formElement1.baseUri());
      assertEquals("c", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.hasParent());
      assertEquals("c", formElement1.tagName());
      assertNotNull(formElement1);
      
      Tag tag1 = formElement1.tag();
      assertSame(tag0, tag1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(tag1, tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertEquals("c", tag0.toString());
      assertEquals("c", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("R]FlR(3?tCblm", formElement0.baseUri());
      assertEquals("c", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("c", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("c", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("c", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals("R]FlR(3?tCblm", formElement1.baseUri());
      assertEquals("c", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.hasParent());
      assertEquals("c", formElement1.tagName());
      assertTrue(tag1.isInline());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isData());
      assertEquals("c", tag1.getName());
      assertFalse(tag1.isFormListed());
      assertEquals("c", tag1.toString());
      assertFalse(tag1.isBlock());
      assertNotNull(tag1);
      
      Element element0 = formElement1.appendChild(formElement0);
      assertSame(tag0, tag1);
      assertSame(formElement0, element0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertSame(element0, formElement0);
      assertSame(element0, formElement1);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertEquals("c", tag0.toString());
      assertEquals("c", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("R]FlR(3?tCblm", formElement0.baseUri());
      assertEquals("c", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("c", formElement0.tagName());
      assertTrue(formElement0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("c", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("c", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(formElement1.hasParent());
      assertEquals(1, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals("R]FlR(3?tCblm", formElement1.baseUri());
      assertEquals("c", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("c", formElement1.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("c", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("R]FlR(3?tCblm", element0.baseUri());
      assertEquals("c", element0.nodeName());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("23-{.UTX&+", "23-{.UTX&+");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("23-{.UTX&+", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("23-{.UTX&+", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("23-{.UTX&+", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("23-{.UTX&+", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("23-{.UTX&+", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("23-{.UTX&+", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasText();
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("23-{.UTX&+", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("23-{.UTX&+", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("clyss");
      assertFalse(document0.isBlock());
      assertEquals("clyss", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("clyss", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("clyss", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("clyss", document1.baseUri());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      document0.setSiblingIndex((-1281));
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("clyss", document0.location());
      assertEquals((-1281), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      Document document2 = (Document)document1.text("clyss");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("clyss", document0.location());
      assertEquals((-1281), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("clyss", document1.location());
      assertEquals((-1281), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("clyss", document1.baseUri());
      assertEquals("clyss", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("clyss", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals((-1281), document2.siblingIndex());
      assertNotNull(document2);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document.OutputSettings document_OutputSettings2 = new Document.OutputSettings();
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertNotNull(uS_ASCII0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.charset((Charset) uS_ASCII0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertNotNull(document_OutputSettings3);
      
      Document document3 = (Document)document1.val("clyss");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertFalse(document0.isBlock());
      assertEquals("clyss", document0.location());
      assertEquals((-1281), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("clyss", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("clyss", document1.location());
      assertEquals((-1281), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("clyss", document1.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("clyss", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("clyss", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals((-1281), document3.siblingIndex());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("clyss", "body");
      assertEquals("body", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-1));
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Document document1 = document0.parser(parser1);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertEquals("body", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("body", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("body", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      String string0 = "head";
      Document document2 = (Document)document1.prependText("head");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("body", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("body", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("body", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("body", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("body", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      boolean boolean0 = document2.hasText();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("body", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("body", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("body", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("body", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("body", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document2.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.removeClass("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(80);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(80, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(80, charBuffer0.capacity());
      assertEquals(80, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(80, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      Document document1 = (Document)document0.prependText("\"NMz2T#@[+{3&");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Elements elements0 = document1.getElementsContainingText("\"NMz2T#@[+{3&");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Document document2 = Parser.parseBodyFragment("\"NMz2T#@[+{3&", "numeric reference with no numerals");
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("numeric reference with no numerals", document2.location());
      assertEquals("numeric reference with no numerals", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Element element2 = document0.nextElementSibling();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document2));
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = "";
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Document document3 = (Document)document2.prependChild(document1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertNotNull(document3);
      
      // Undeclared exception!
      document2.prepend("");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      element0.setParentNode(element0);
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      
      String string0 = "";
      Element element1 = element0.removeClass("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      
      Set<String> set0 = element1.classNames();
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      // Undeclared exception!
      try { 
        element0.prependChild(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Element element1 = document0.createElement("ascii");
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ascii", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ascii", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      
      Element element2 = element0.shallowClone();
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("body", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.nodeName());
      assertNotNull(element2);
      
      String string1 = document0.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string1);
      
      Element element3 = document0.parent();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNull(element3);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = new Document("value");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      int int0 = 1;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertNotNull(document_OutputSettings3);
      
      Document document2 = document0.outputSettings(document_OutputSettings2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document2.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("X=y/?GUn$(*t;o`i2|", "K66a_Sq,:P=#5+K.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("K66a_Sq,:P=#5+K.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(1, document0.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("K66a_Sq,:P=#5+K.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("K66a_Sq,:P=#5+K.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      Document document1 = element0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("K66a_Sq,:P=#5+K.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("K66a_Sq,:P=#5+K.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("K66a_Sq,:P=#5+K.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document document2 = document1.outputSettings(document_OutputSettings1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("K66a_Sq,:P=#5+K.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("K66a_Sq,:P=#5+K.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("K66a_Sq,:P=#5+K.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Document document3 = (Document)document0.val("K66a_Sq,:P=#5+K.");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("K66a_Sq,:P=#5+K.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document3.location());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      
      Document document4 = document2.normalise();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertEquals(1, document0.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("K66a_Sq,:P=#5+K.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("K66a_Sq,:P=#5+K.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("K66a_Sq,:P=#5+K.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("K66a_Sq,:P=#5+K.", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertNotNull(document4);
      
      Document document5 = (Document)document4.text("IvDxjp");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertEquals(1, document0.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("K66a_Sq,:P=#5+K.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("K66a_Sq,:P=#5+K.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("K66a_Sq,:P=#5+K.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("K66a_Sq,:P=#5+K.", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("K66a_Sq,:P=#5+K.", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("K66a_Sq,:P=#5+K.", document5.location());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertNotNull(document5);
      
      String string0 = document5.val();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertSame(document4, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertEquals(1, document0.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("K66a_Sq,:P=#5+K.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("K66a_Sq,:P=#5+K.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("K66a_Sq,:P=#5+K.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("K66a_Sq,:P=#5+K.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("K66a_Sq,:P=#5+K.", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("K66a_Sq,:P=#5+K.", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document5.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("K66a_Sq,:P=#5+K.", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("K66a_Sq,:P=#5+K.", document5.location());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertNotNull(string0);
      assertEquals("K66a_Sq,:P=#5+K.", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pattern pattern0 = Pattern.compile("textarea", 80);
      assertEquals("textarea", pattern0.toString());
      assertEquals(80, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document1.getElementsMatchingText(pattern0);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("textarea", pattern0.toString());
      assertEquals(80, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      document0.setParentNode(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      
      Document document2 = (Document)document0.prependText("\"NMz2T#@[+{3&");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals("value", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Elements elements1 = document2.getElementsContainingText("jHg$[SQD_4?");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals("value", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Document document3 = Parser.parseBodyFragment("\"NMz2T#@[+{3&", "\"NMz2T#@[+{3&");
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("\"NMz2T#@[+{3&", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("\"NMz2T#@[+{3&", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Element element0 = document0.nextElementSibling();
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Tag tag0 = Tag.valueOf("C4\"c#");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("C4\"c#", tag0.toString());
      assertEquals("C4\"c#", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("C4\"c#");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("C4\"c#", tag0.toString());
      assertEquals("C4\"c#", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals("C4\"c#", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("C4\"c#", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertNotNull(pseudoTextElement0);
      
      PseudoTextElement pseudoTextElement1 = (PseudoTextElement)pseudoTextElement0.html("head");
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("C4\"c#", tag0.toString());
      assertEquals("C4\"c#", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals("C4\"c#", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("C4\"c#", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(1, pseudoTextElement1.childNodeSize());
      assertEquals("", pseudoTextElement1.baseUri());
      assertEquals("C4\"c#", pseudoTextElement1.nodeName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals("C4\"c#", pseudoTextElement1.tagName());
      assertFalse(pseudoTextElement1.hasParent());
      assertNotNull(pseudoTextElement1);
      
      Document document0 = Parser.parse("d", "");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      pseudoTextElement1.setParentNode(document1);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("C4\"c#", tag0.toString());
      assertEquals("C4\"c#", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals("C4\"c#", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("C4\"c#", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(1, pseudoTextElement1.childNodeSize());
      assertEquals("", pseudoTextElement1.baseUri());
      assertEquals("C4\"c#", pseudoTextElement1.nodeName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals("C4\"c#", pseudoTextElement1.tagName());
      assertTrue(pseudoTextElement1.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document0.prependText("2L1_K4g2C\".x$yGi_,");
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PseudoTextElement pseudoTextElement2 = (PseudoTextElement)pseudoTextElement1.addClass("N3gqfBzte,4");
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertSame(pseudoTextElement2, pseudoTextElement1);
      assertSame(pseudoTextElement2, pseudoTextElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("C4\"c#", tag0.toString());
      assertEquals("C4\"c#", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals("C4\"c#", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("C4\"c#", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(1, pseudoTextElement1.childNodeSize());
      assertEquals("", pseudoTextElement1.baseUri());
      assertEquals("C4\"c#", pseudoTextElement1.nodeName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals("C4\"c#", pseudoTextElement1.tagName());
      assertTrue(pseudoTextElement1.hasParent());
      assertEquals("", pseudoTextElement2.baseUri());
      assertEquals("C4\"c#", pseudoTextElement2.tagName());
      assertEquals("C4\"c#", pseudoTextElement2.nodeName());
      assertEquals(0, pseudoTextElement2.siblingIndex());
      assertFalse(pseudoTextElement2.isBlock());
      assertEquals(1, pseudoTextElement2.childNodeSize());
      assertTrue(pseudoTextElement2.hasParent());
      assertNotNull(pseudoTextElement2);
      
      Element element0 = pseudoTextElement1.lastElementSibling();
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("C4\"c#", tag0.toString());
      assertEquals("C4\"c#", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals("C4\"c#", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("C4\"c#", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(1, pseudoTextElement1.childNodeSize());
      assertEquals("", pseudoTextElement1.baseUri());
      assertEquals("C4\"c#", pseudoTextElement1.nodeName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals("C4\"c#", pseudoTextElement1.tagName());
      assertTrue(pseudoTextElement1.hasParent());
      assertNull(element0);
      
      String string0 = pseudoTextElement1.text();
      assertSame(pseudoTextElement0, pseudoTextElement2);
      assertSame(pseudoTextElement0, pseudoTextElement1);
      assertSame(pseudoTextElement1, pseudoTextElement0);
      assertSame(pseudoTextElement1, pseudoTextElement2);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("C4\"c#", tag0.toString());
      assertEquals("C4\"c#", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("", pseudoTextElement0.baseUri());
      assertEquals("C4\"c#", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertTrue(pseudoTextElement0.hasParent());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("C4\"c#", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(1, pseudoTextElement1.childNodeSize());
      assertEquals("", pseudoTextElement1.baseUri());
      assertEquals("C4\"c#", pseudoTextElement1.nodeName());
      assertEquals(0, pseudoTextElement1.siblingIndex());
      assertFalse(pseudoTextElement1.isBlock());
      assertEquals("C4\"c#", pseudoTextElement1.tagName());
      assertTrue(pseudoTextElement1.hasParent());
      assertNotNull(string0);
      assertEquals("head", string0);
      
      Elements elements0 = document2.getElementsByIndexGreaterThan(1268);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertNotNull(element0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("2L1_K4g2C\".x$yGi_,", "2L1_K4g2C\".x$yGi_,");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element1 = document0.body();
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      
      Document document1 = (Document)document0.removeClass("Kxb JB@\"fVc3y-W=~c-");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("2L1_K4g2C\".x$yGi_,", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Set<String> set0 = element1.classNames();
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("2L1_K4g2C\".x$yGi_,"));
      
      Element element2 = element1.prependChild(document0);
      assertSame(document0, document1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertNotNull(element2);
      
      Document document2 = (Document)document1.after((Node) element1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(3, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("2L1_K4g2C\".x$yGi_,", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      String string0 = document0.val();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Element element1 = document1.head();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      Set<String> set1 = element1.classNames();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      assertNotSame(set1, set0);
      assertFalse(element1.equals((Object)element0));
      assertTrue(set1.equals((Object)set0));
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      assertFalse(set1.contains(""));
      
      Element element2 = element1.prependChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      
      Element element3 = element2.text("Eps\"\" j4tA7^uz");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element1, element3);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertNotSame(element3, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element3.equals((Object)element0));
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("head", element3.tagName());
      assertEquals("", element3.baseUri());
      assertEquals(1, element3.childNodeSize());
      assertEquals("head", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertTrue(element3.isBlock());
      assertNotNull(element3);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element4 = document1.nextElementSibling();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNull(element4);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, int0);
      
      String string0 = Node.EmptyString;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.className();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Element element0 = document0.previousElementSibling();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNull(element0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings1.encoder();
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Comment comment0 = new Comment((String) null);
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Document document1 = (Document)document0.insertChildren(0, nodeArray0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertEquals(1, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document0.prependText("\"NMz2T#@[+{3&");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("value", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsContainingText("jHg$[SQD_4?");
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("value", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document3 = Parser.parseBodyFragment("\"NMz2T#@[+{3&", "\"NMz2T#@[+{3&");
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("\"NMz2T#@[+{3&", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals("\"NMz2T#@[+{3&", document3.baseUri());
      assertNotNull(document3);
      
      Element element0 = document0.nextElementSibling();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertNull(element0);
      
      String string0 = document1.ownText();
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = document1.childNodeSize();
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = new Document("clyss");
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("clyss", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("clyss", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("clyss", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("clyss", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document document2 = (Document)document1.text("clyss");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("clyss", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("clyss", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("clyss", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("clyss", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("clyss", document2.location());
      assertNotNull(document2);
      
      String string0 = document2.outerHtml();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("clyss", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("clyss", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("clyss", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("clyss", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("clyss", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("clyss", document2.location());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  clyss\n </body>\n</html>", string0);
      
      // Undeclared exception!
      try { 
        document2.child((-2547));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      
      String string0 = "\"NMz2T#@[+{3&";
      Document document2 = (Document)document0.prependText("\"NMz2T#@[+{3&");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsContainingText("jHg$[SQD_4?");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document1.getElementsContainingText("\"NMz2T#@[+{3&");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      
      Elements elements2 = document0.siblingElements();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertNotNull(elements2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4260);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("!by(VWp.&D<^##'", "value");
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertEquals("#root", document3.tagName());
      assertEquals("value", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("value", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      
      CharArrayWriter charArrayWriter1 = document3.html(charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertEquals(72, charArrayWriter0.size());
      assertEquals("\n<html>\n <head></head>\n <body>\n  !by(VWp.&amp;D&lt;^##'\n </body>\n</html>", charArrayWriter0.toString());
      assertEquals("#root", document3.tagName());
      assertEquals("value", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("value", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("\n<html>\n <head></head>\n <body>\n  !by(VWp.&amp;D&lt;^##'\n </body>\n</html>", charArrayWriter1.toString());
      assertEquals(72, charArrayWriter1.size());
      assertNotNull(charArrayWriter1);
      
      String string1 = document1.ownText();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertTrue(string1.equals((Object)string0));
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertNotNull(string1);
      assertEquals("\"NMz2T#@[+{3&", string1);
      
      Elements elements3 = document1.select("#root");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements1));
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertNotNull(elements3);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(4260);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(4260, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(4260, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(4260, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(4260, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(4260, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(4260, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(4260, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(4260, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(4260, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(4260, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(4260, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(4260, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings4);
      
      // Undeclared exception!
      document2.outerHtmlHead(charArrayWriter1, 4260, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.text("hX~E`DIx|=QP\"soL'MC");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      
      Tag tag0 = Tag.valueOf("img");
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("img", tag0.toString());
      assertEquals("img", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertNotNull(tag0);
      
      Element element2 = new Element(tag0, "body");
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("img", tag0.toString());
      assertEquals("img", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("img", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("img", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("body", element2.baseUri());
      assertNotNull(element2);
      
      Element element3 = element2.shallowClone();
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element3);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("img", tag0.toString());
      assertEquals("img", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("img", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("img", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("body", element2.baseUri());
      assertEquals("img", element3.tagName());
      assertFalse(element3.hasParent());
      assertEquals("img", element3.nodeName());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals(0, element3.childNodeSize());
      assertEquals("body", element3.baseUri());
      assertNotNull(element3);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element4 = element3.html("Gnc1+/u/iRf/%");
      assertNotSame(element2, element1);
      assertNotSame(element2, element4);
      assertNotSame(element2, element0);
      assertNotSame(element2, element3);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
      assertSame(element3, element4);
      assertNotSame(element3, element2);
      assertNotSame(element4, element1);
      assertNotSame(element4, element0);
      assertNotSame(element4, element2);
      assertSame(element4, element3);
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element3));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element0));
      assertFalse(element4.equals((Object)element2));
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("img", tag0.toString());
      assertEquals("img", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("img", element2.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("img", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("body", element2.baseUri());
      assertEquals("img", element3.tagName());
      assertFalse(element3.hasParent());
      assertEquals("img", element3.nodeName());
      assertFalse(element3.isBlock());
      assertEquals(1, element3.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertEquals("body", element3.baseUri());
      assertEquals("body", element4.baseUri());
      assertFalse(element4.isBlock());
      assertFalse(element4.hasParent());
      assertEquals(1, element4.childNodeSize());
      assertEquals("img", element4.nodeName());
      assertEquals(0, element4.siblingIndex());
      assertEquals("img", element4.tagName());
      assertNotNull(element4);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      
      Element element2 = element0.prependText("");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertNotNull(element2);
      
      Elements elements0 = element2.nextElementSiblings();
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Element element3 = element2.addClass("iM41gKSSo?sR>");
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element2, element3);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element3, element1);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(1, element3.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element3.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals("", element3.baseUri());
      assertNotNull(element3);
      
      Element element4 = element3.lastElementSibling();
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element2, element3);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element3, element1);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(1, element3.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element3.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals("", element3.baseUri());
      assertNull(element4);
      
      String string0 = element0.text();
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements1 = element1.getElementsByIndexGreaterThan(1268);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element1, element3);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "2L1_K4g2C\".x$yGi_,";
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("X=y/?GUn$(*t;o`i2|");
      assertEquals(0, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Elements elements0 = element1.children();
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertTrue(element1.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = element0.outerHtml();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(string0);
      assertEquals("<X=y/?GUn$(*t;o`i2|>\n <x=y/?gun$(*t;o`i2|></x=y/?gun$(*t;o`i2|>\n</X=y/?GUn$(*t;o`i2|>", string0);
      
      Element element2 = element0.nextElementSibling();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNull(element2);
      
      Document document0 = Parser.parseBodyFragment("<X=y/?GUn$(*t;o`i2|>\n <x=y/?gun$(*t;o`i2|></x=y/?gun$(*t;o`i2|>\n</X=y/?GUn$(*t;o`i2|>", "data");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("data", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("data", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string1 = document0.cssSelector();
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("data", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("data", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string1);
      assertEquals("#root", string1);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("X=y/?GUn$(*t;o`i2|", "<X=y/?GUn$(*t;o`i2|>\n <x=y/?gun$(*t;o`i2|></x=y/?gun$(*t;o`i2|>\n</X=y/?GUn$(*t;o`i2|>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: <X=y/?GUn$(*t;o`i2|>
         //  <x=y/?gun$(*t;o`i2|></x=y/?gun$(*t;o`i2|>
         // </X=y/?GUn$(*t;o`i2|>
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      
      Element element2 = element0.prependText("");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      
      boolean boolean0 = element2.hasText();
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertFalse(boolean0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("2L1_K4g2C\".x$yGi_,");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 2L1_K4g2C\".x$yGi_,
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("X=y/?GUn$(*t;o`i2|");
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      
      boolean boolean1 = element0.hasText();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertTrue(boolean1 == boolean0);
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(boolean1);
      
      Elements elements0 = element1.previousElementSiblings();
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document0 = Parser.parseBodyFragment("X=y/?GUn$(*t;o`i2|", "X=y/?GUn$(*t;o`i2|");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.tagName("X=y/?GUn$(*t;o`i2|");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x=y/?gun$(*t;o`i2|", document0.tagName());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X=y/?GUn$(*t;o`i2|", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("x=y/?gun$(*t;o`i2|", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("X=y/?GUn$(*t;o`i2|", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      String string0 = document0.cssSelector();
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("x=y/?gun$(*t;o`i2|", document0.tagName());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string0);
      assertEquals("x=y/?gun$(*t;o`i2|", string0);
      
      Element element2 = element0.val("                   ");
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("X=y/?GUn$(*t;o`i2|", element2.nodeName());
      assertEquals("X=y/?GUn$(*t;o`i2|", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("Tagname must nrt be emps.");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tagname must nrt be emps.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Tagname must nrt be emps.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document document2 = (Document)document1.empty();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tagname must nrt be emps.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Tagname must nrt be emps.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Tagname must nrt be emps.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("Tagname must nrt be emps.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      Elements elements0 = document1.nextElementSiblings();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tagname must nrt be emps.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Tagname must nrt be emps.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document3 = (Document)document1.addClass("@}b{tjZ");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tagname must nrt be emps.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Tagname must nrt be emps.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals("Tagname must nrt be emps.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("Tagname must nrt be emps.", document3.baseUri());
      assertNotNull(document3);
      
      Document document4 = document0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("Tagname must nrt be emps.", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals("Tagname must nrt be emps.", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      
      Elements elements1 = document1.getElementsContainingText("@}b{tjZ");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tagname must nrt be emps.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Tagname must nrt be emps.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      boolean boolean0 = Element.preserveWhitespace(document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("Tagname must nrt be emps.", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals("Tagname must nrt be emps.", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(boolean0);
      
      String string0 = document4.cssSelector();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("Tagname must nrt be emps.", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals("Tagname must nrt be emps.", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#root.java.lang.String@0000000021");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element0 = document4.prependElement("iframe");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("Tagname must nrt be emps.", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals("Tagname must nrt be emps.", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Tagname must nrt be emps.", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("iframe", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("iframe", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("`?)6,Q-(.-PL,NL#<y", "`?)6,Q-(.-PL,NL#<y");
      assertFalse(document0.isBlock());
      assertEquals("`?)6,Q-(.-PL,NL#<y", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("`?)6,Q-(.-PL,NL#<y", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Elements elements0 = document0.getElementsByAttributeValue("`?)6,Q-(.-PL,NL#<y", ")e*]!NbT3F@C9AEuX");
      assertFalse(document0.isBlock());
      assertEquals("`?)6,Q-(.-PL,NL#<y", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("`?)6,Q-(.-PL,NL#<y", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.attr(")e*]!NbT3F@C9AEuX", "marquee");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("`?)6,Q-(.-PL,NL#<y", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("`?)6,Q-(.-PL,NL#<y", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("`?)6,Q-(.-PL,NL#<y", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("`?)6,Q-(.-PL,NL#<y", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "Tag name must not be empty.";
      Document document0 = new Document("Tag name must not be empty.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings1.clone();
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.outline());
      assertNotNull(document_OutputSettings4);
      
      Document document2 = document0.outputSettings(document_OutputSettings2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals("Tag name must not be empty.", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      
      Document document3 = Parser.parseBodyFragment("Tag name must not be empty.", ">$^~p~)(t^xQ)O!s.b2");
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(">$^~p~)(t^xQ)O!s.b2", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(">$^~p~)(t^xQ)O!s.b2", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Elements elements0 = document1.getElementsMatchingOwnText("EBYm&y");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document4 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("Tag name must not be empty.", document4.baseUri());
      assertEquals("Tag name must not be empty.", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertNotNull(document4);
      
      String string1 = document4.data();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("Tag name must not be empty.", document4.baseUri());
      assertEquals("Tag name must not be empty.", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Comment comment0 = new Comment(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      int int0 = (-1336);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) comment0;
      nodeArray0[1] = (Node) document4;
      nodeArray0[2] = (Node) document4;
      // Undeclared exception!
      try { 
        document4.insertChildren(int0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = new Document("Tagname must nrt be emps.");
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Tagname must nrt be emps.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("Tagname must nrt be emps.", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document document2 = Document.createShell("@}b{tjZ");
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("@}b{tjZ", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("@}b{tjZ", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Document document3 = document1.outputSettings(document_OutputSettings0);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertEquals("Tagname must nrt be emps.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Tagname must nrt be emps.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Tagname must nrt be emps.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("Tagname must nrt be emps.", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("Tagname must nrt be emps.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertEquals("Tagname must nrt be emps.", document3.location());
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueMatching("#n#.?R*,We{5", "#n#.?R*,We{5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: #n#.?R*,We{5
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = new Document("class");
      assertEquals("#document", document0.nodeName());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("class", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("class", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("class", document1.location());
      assertEquals("class", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Element element0 = new Element("class");
      assertEquals(0, element0.childNodeSize());
      assertEquals("class", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("class", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Tag tag0 = Tag.valueOf("body", (ParseSettings) null);
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("&amp;");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("body", "&amp;");
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("body", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("body", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertNotNull(attributes1);
      
      FormElement formElement0 = new FormElement(tag0, "&amp;", attributes1);
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("body", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("body", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("body", formElement0.tagName());
      assertTrue(formElement0.isBlock());
      assertEquals("&amp;", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      Element element1 = formElement0.prependElement("body");
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("body", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("body", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("body", formElement0.tagName());
      assertTrue(formElement0.isBlock());
      assertEquals("&amp;", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals("&amp;", element1.baseUri());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      
      boolean boolean0 = formElement0.hasText();
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals("&amp;", attribute0.getValue());
      assertEquals("body", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("body", formElement0.nodeName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("body", formElement0.tagName());
      assertTrue(formElement0.isBlock());
      assertEquals("&amp;", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertFalse(boolean0);
      
      Document document2 = Document.createShell("character is not a valid unicode code point");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("character is not a valid unicode code point", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("character is not a valid unicode code point", document2.baseUri());
      assertNotNull(document2);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document3 = document2.parser(parser0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("character is not a valid unicode code point", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("character is not a valid unicode code point", document2.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("character is not a valid unicode code point", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("character is not a valid unicode code point", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Elements elements0 = document3.previousElementSiblings();
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("character is not a valid unicode code point", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("character is not a valid unicode code point", document2.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("character is not a valid unicode code point", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("character is not a valid unicode code point", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(80);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(80, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(80, charBuffer0.length());
      assertEquals(80, charBuffer0.capacity());
      assertEquals(80, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = document0.hasSameValue(charBuffer0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(80, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(80, charBuffer0.length());
      assertEquals(80, charBuffer0.capacity());
      assertEquals(80, charBuffer0.limit());
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Document document2 = (Document)document0.prependChild(document1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      String string0 = document2.cssSelector();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      Element element1 = document1.nextElementSibling();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("html", element1.nodeName());
      assertEquals("html", element1.tagName());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("X=y/?GUn$(*t;o`i2|");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      boolean boolean1 = element0.hasText();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertTrue(boolean1 == boolean0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(boolean1);
      
      Elements elements0 = element1.previousElementSiblings();
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("head");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.clone();
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.equals((Object)cDataNode0));
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(node0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      
      nodeArray0[4] = node0;
      element0.addChildren(nodeArray0);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(3, element0.childNodeSize());
      assertEquals(5, nodeArray0.length);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("head"));
      
      String string0 = document0.val();
      assertSame(document0, document1);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      document0.before("head");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Elements elements0 = element0.children();
      assertSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = element0.hasClass("");
      assertSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(boolean0);
      
      Elements elements1 = document1.siblingElements();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      int int0 = document0.elementSiblingIndex();
      assertSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, int0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      StringReader stringReader0 = new StringReader("HJx6pOa;;T3v.");
      assertNotNull(stringReader0);
      
      Document document2 = parser1.parseInput((Reader) stringReader0, "");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      
      Elements elements2 = document2.getElementsMatchingText("");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
      assertNotNull(elements2);
      
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      
      Document document2 = (Document)document0.prependText("\"NMz2T#@[+{3&");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsContainingText("jHg$[SQD_4?");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document1.getElementsContainingText("\"NMz2T#@[+{3&");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
      
      Elements elements2 = document0.siblingElements();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertNotNull(elements2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4260);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("!by(VWp.&D<^##'", "value");
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("value", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("value", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertNotNull(document3);
      
      CharArrayWriter charArrayWriter1 = document3.html(charArrayWriter0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals("\n<html>\n <head></head>\n <body>\n  !by(VWp.&amp;D&lt;^##'\n </body>\n</html>", charArrayWriter0.toString());
      assertEquals(72, charArrayWriter0.size());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("value", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("value", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("\n<html>\n <head></head>\n <body>\n  !by(VWp.&amp;D&lt;^##'\n </body>\n</html>", charArrayWriter1.toString());
      assertEquals(72, charArrayWriter1.size());
      assertNotNull(charArrayWriter1);
      
      String string0 = document1.ownText();
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("\"NMz2T#@[+{3&", string0);
      
      Elements elements3 = document1.select("#root");
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertNotNull(elements3);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = new Document("value");
      assertEquals("value", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, int0);
      
      String string0 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.className();
      assertSame(document0, document1);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(118);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Document document3 = new Document("");
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      Document document4 = document1.clone();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals("value", document4.location());
      assertEquals("value", document4.baseUri());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertNotNull(document4);
      
      Document document5 = document2.clone();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document5);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document5);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("value", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("value", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertNotNull(document5);
      
      Elements elements0 = document3.getElementsByAttributeValueNot("[!|BlLLUB", "'P3dD  vh");
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document5);
      assertNotSame(document3, document0);
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document0));
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("menuitem", "zz8.3d5|s(Z{T3!ff:");
      assertEquals("zz8.3d5|s(Z{T3!ff:", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zz8.3d5|s(Z{T3!ff:", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = document0.wholeText();
      assertEquals("zz8.3d5|s(Z{T3!ff:", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zz8.3d5|s(Z{T3!ff:", document0.baseUri());
      assertNotNull(string0);
      assertEquals("menuitem", string0);
      
      Document document1 = document0.clone();
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("zz8.3d5|s(Z{T3!ff:", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zz8.3d5|s(Z{T3!ff:", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("zz8.3d5|s(Z{T3!ff:", document1.location());
      assertEquals("zz8.3d5|s(Z{T3!ff:", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Elements elements0 = document1.getElementsContainingText("zz8.3d5|s(Z{T3!ff:");
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("zz8.3d5|s(Z{T3!ff:", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("zz8.3d5|s(Z{T3!ff:", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("zz8.3d5|s(Z{T3!ff:", document1.location());
      assertEquals("zz8.3d5|s(Z{T3!ff:", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.insertChildren((int) (byte)4, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = new Document("strike");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("strike", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("strike", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("strike", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("strike", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("strike", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("strike", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      int int0 = document0.elementSiblingIndex();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("strike", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("strike", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, int0);
      
      String string0 = document0.className();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("strike", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("strike", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.className();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("strike", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("strike", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document document2 = (Document)document1.text("value");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("strike", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("strike", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("strike", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("strike", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("strike", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("strike", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Document document3 = document1.clone();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("strike", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("strike", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("strike", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("strike", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("strike", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("strike", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertNotNull(document3);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Document document4 = parser1.parseInput("", "body");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("body", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("body", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      
      // Undeclared exception!
      try { 
        document4.getElementsByAttributeValueNot("strike", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("X=y/?GUn$(*t;o`i2|");
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("X=y/?GUn$(*t;o`i2|");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertNotNull(element1);
      
      boolean boolean1 = element0.hasText();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(boolean1);
      
      Elements elements0 = element0.previousElementSiblings();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element1.getElementsByAttributeStarting("IV2&hZ\"Ng6-c|");
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      String string0 = element1.data();
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element2 = element1.removeClass("b");
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertEquals(1, element0.childNodeSize());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("X=y/?GUn$(*t;o`i2|", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("x=y/?gun$(*t;o`i2|", element1.nodeName());
      assertEquals("x=y/?gun$(*t;o`i2|", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("x=y/?gun$(*t;o`i2|", element2.tagName());
      assertNotNull(element2);
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element2;
      nodeArray0[1] = (Node) element1;
      nodeArray0[2] = (Node) element2;
      nodeArray0[3] = (Node) element2;
      nodeArray0[4] = (Node) element1;
      CDataNode cDataNode0 = new CDataNode("%\"ZFUhr(");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.clone();
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.equals((Object)cDataNode0));
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(node0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      
      nodeArray0[5] = node0;
      // Undeclared exception!
      try { 
        element1.insertChildren(2113, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document document2 = document1.ownerDocument();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Document document3 = Parser.parseBodyFragment("E;,?wal;/&v'$>ar", "");
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      
      DocumentType documentType0 = new DocumentType((String) null, "", "5R(jon", "");
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertNotNull(documentType0);
      
      boolean boolean0 = Element.preserveWhitespace(documentType0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertFalse(boolean0);
      
      String string0 = document3.cssSelector();
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("", document3.location());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(string0);
      assertEquals("#root", string0);
      
      // Undeclared exception!
      try { 
        document3.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Document document2 = (Document)document0.prependChild(document1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Element element1 = element0.after((Node) document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      
      String string0 = document0.val();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = document1.hasAttributes();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        element1.selectFirst("Oj$\"5H94;}W");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Oj$\"5H94;}W': unexpected token at '$\"5H94;}W'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = new Document("val8e");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("val8e", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("val8e", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("val8e", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("val8e", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("val8e", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("val8e", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("val8e", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, int0);
      
      String string0 = document0.className();
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("val8e", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("val8e", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("val8e", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("val8e", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document document2 = (Document)document1.text("");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("val8e", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("val8e", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("val8e", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("val8e", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("val8e", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      
      Document document3 = document0.clone();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("val8e", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("val8e", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("val8e", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = new Document("value");
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document1.location());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertNotNull(document_OutputSettings3);
      
      Document document2 = document0.outputSettings(document_OutputSettings2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("value", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Document document3 = Parser.parseBodyFragment("body", "body");
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("body", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("body", document3.baseUri());
      assertNotNull(document3);
      
      Elements elements0 = document0.getElementsMatchingOwnText("body");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document2;
      String string0 = document3.data();
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("body", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("body", document3.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      nodeArray0[1] = (Node) document3;
      nodeArray0[2] = (Node) document1;
      boolean boolean0 = document1.hasClass("org.jsoup.nodes.Element$2");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document1.location());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(boolean0);
      
      Elements elements1 = document0.siblingElements();
      assertNotSame(elements1, elements0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(elements1);
      
      Document document4 = new Document("");
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals(0, document4.childNodeSize());
      assertEquals("", document4.location());
      assertEquals("#root", document4.tagName());
      assertNotNull(document4);
      
      int int0 = document4.elementSiblingIndex();
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals(0, document4.childNodeSize());
      assertEquals("", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, int0);
      
      Document document5 = (Document)document3.clone();
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document3, document5);
      assertNotSame(document3, document0);
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document5.isBlock());
      assertEquals("body", document5.baseUri());
      assertFalse(document5.hasParent());
      assertEquals("body", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("body", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("body", document3.baseUri());
      assertNotNull(document5);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = new Document("val8e");
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("val8e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("val8e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("val8e", document1.location());
      assertEquals("val8e", document1.baseUri());
      assertNotNull(document1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("val8e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("val8e", document1.location());
      assertEquals("val8e", document1.baseUri());
      assertEquals(0, int0);
      
      String string0 = document0.className();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("val8e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("val8e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("val8e", document1.location());
      assertEquals("val8e", document1.baseUri());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Element element0 = document1.previousElementSibling();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("val8e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("val8e", document1.location());
      assertEquals("val8e", document1.baseUri());
      assertNull(element0);
      
      Document document2 = document0.clone();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("val8e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("val8e", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("val8e", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Document document3 = document1.clone();
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("val8e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("val8e", document1.location());
      assertEquals("val8e", document1.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("val8e", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("val8e", document3.location());
      assertNotNull(document3);
      
      Elements elements0 = document0.getElementsContainingText("");
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("val8e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("val8e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("val8e", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("val8e", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(boolean0);
      
      String string2 = document1.cssSelector();
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("val8e", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("val8e", document1.location());
      assertEquals("val8e", document1.baseUri());
      assertNotNull(string2);
      assertEquals("#root", string2);
      
      Document document4 = new Document("val8e");
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("val8e", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("val8e", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      
      Document document5 = (Document)document2.appendTo(document0);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("val8e", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("val8e", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("val8e", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("val8e", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document5.siblingIndex());
      assertEquals("val8e", document5.location());
      assertFalse(document5.isBlock());
      assertEquals(1, document5.childNodeSize());
      assertEquals("val8e", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(document5);
      
      // Undeclared exception!
      try { 
        document1.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Document document1 = Parser.parseBodyFragment("", "");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Document document2 = (Document)document0.prependChild(document1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      
      Element element1 = element0.after((Node) document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertSame(element1, element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
      
      Element element2 = element1.clone();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element2.tagName());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertNotNull(element2);
      
      boolean boolean0 = document1.hasClass("");
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(boolean0);
      
      Elements elements0 = document2.siblingElements();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(2, elements0.size());
      assertNotNull(elements0);
      
      int int0 = element1.elementSiblingIndex();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(element1.equals((Object)element2));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, int0);
      
      // Undeclared exception!
      document1.appendElement("pLs@bZtgPjdhZ~2v]");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "value";
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      document1.setParentNode(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      
      String string1 = "\"NMz2T#@[+{3&";
      String string2 = null;
      // Undeclared exception!
      try { 
        document1.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      
      Document document2 = (Document)document0.prependText("\"NMz2T#@[+{3&");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsContainingText("jHg$[SQD_4?");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document3 = document0.normalise();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("value", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("value", document3.location());
      assertNotNull(document3);
      
      Elements elements1 = document3.nextElementSiblings();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("value", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("value", document3.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      PseudoTextElement pseudoTextElement0 = null;
      try {
        pseudoTextElement0 = new PseudoTextElement((Tag) null, "g", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "6QI1";
      Tag tag0 = Tag.valueOf("6QI1");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("6QI1", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertEquals("6QI1", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("textarea");
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertNotNull(document0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = document0.absUrl("textarea");
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.wholeText();
      assertTrue(string1.equals((Object)string0));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Elements elements1 = document0.getElementsContainingText("");
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      
      Elements elements2 = document0.nextElementSiblings();
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document1 = (Document)document0.addClass("body");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document document2 = (Document)document1.text("textarea");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", document1.baseUri());
      assertEquals("textarea", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("textarea", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("textarea", document2.location());
      assertNotNull(document2);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document3 = (Document)document0.tagName("+:D}jJPwPph@5V%tF~s");
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertFalse(document3.hasParent());
      assertEquals("textarea", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("textarea", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.html("2L1_K4g2C\".x$yGi_,");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      
      Element element2 = element1.prependText("");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals(2, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
      
      Document document0 = Parser.parse("br", "br");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertNotNull(document0);
      
      List<Node> list0 = document0.siblingNodes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = element2.hasClass("jHg$[SQD_4?");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals(2, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertTrue(element2.hasParent());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      document0.setParentNode(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      
      Document document2 = (Document)document0.prependText("\"NMz2T#@[+{3&");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsContainingText("jHg$[SQD_4?");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document3 = null;
      try {
        document3 = new Document((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = new Document("value");
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals(0, int0);
      
      String string0 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.className();
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(118);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals("value", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Document document3 = new Document("");
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      
      Document document4 = document1.clone();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("value", document4.location());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("value", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertNotNull(document4);
      
      Elements elements0 = document1.getElementsContainingText("'P3dD  vh");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.escapeMode(entities_EscapeMode1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(entities_EscapeMode1, entities_EscapeMode0);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertFalse(entities_EscapeMode1.equals((Object)entities_EscapeMode0));
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(118, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertNotNull(document_OutputSettings3);
      
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
      
      Document document5 = document2.outputSettings(document_OutputSettings1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(entities_EscapeMode0, entities_EscapeMode1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(entities_EscapeMode0.equals((Object)entities_EscapeMode1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("value", document5.baseUri());
      assertEquals("value", document5.location());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals("value", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertNotNull(document5);
      
      String string2 = document5.cssSelector();
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(entities_EscapeMode0, entities_EscapeMode1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(entities_EscapeMode0.equals((Object)entities_EscapeMode1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals("value", document5.baseUri());
      assertEquals("value", document5.location());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals("value", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertNotNull(string2);
      assertEquals("#root", string2);
      
      Element element0 = document0.nextElementSibling();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Document document2 = (Document)document0.prependChild(document1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Element element1 = element0.after((Node) document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
      
      Element element2 = element1.firstElementSibling();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertNotNull(element2);
      
      // Undeclared exception!
      try { 
        element2.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("textarea");
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.absUrl("textarea");
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.wholeText();
      assertTrue(string1.equals((Object)string0));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)6;
      List<Node> list0 = document0.siblingNodes();
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean1 = document0.hasClass("textarea");
      assertTrue(boolean1 == boolean0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean1);
      
      Elements elements1 = document0.siblingElements();
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, int0);
      
      String string2 = document0.text();
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(118);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Document document0 = Parser.parseBodyFragment("value", "value");
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Elements elements0 = document0.parents();
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsContainingOwnText("L");
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("br", "a\"C57C^Qj;$\\R9+t");
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("a\"C57C^Qj;$\\R9+t", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("a\"C57C^Qj;$\\R9+t", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.parser(parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("a\"C57C^Qj;$\\R9+t", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("a\"C57C^Qj;$\\R9+t", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("a\"C57C^Qj;$\\R9+t", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("a\"C57C^Qj;$\\R9+t", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.before(",0UZKS?J\bZ]N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Document document2 = (Document)document0.prependChild(document1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertNotNull(document2);
      
      Element element1 = element0.after((Node) document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("", document1.location());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
      
      String string1 = document0.val();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        document2.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.html("R");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      
      String string0 = "";
      Element element2 = element0.prependText("");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(2, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueContaining("R", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.html("2L1_K4g2C\".x$yGi_,");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      
      Element element2 = element1.prependText("");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(2, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertNotNull(element2);
      
      Elements elements0 = element0.getElementsContainingText("jHg$[SQD_4?");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element0.nextElementSiblings();
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      List<DataNode> list0 = element0.dataNodes();
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Element element3 = element2.addClass("`7j\fp?Kz");
      assertSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertSame(element3, element1);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(2, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element3.nodeName());
      assertFalse(element3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element3.tagName());
      assertEquals(2, element3.childNodeSize());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertNotNull(element3);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Element element4 = element1.text("*x");
      assertSame(element0, element3);
      assertSame(element0, element4);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element4);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertSame(element4, element2);
      assertSame(element4, element3);
      assertSame(element4, element1);
      assertSame(element4, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals("", element4.baseUri());
      assertFalse(element4.isBlock());
      assertEquals(0, element4.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element4.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element4.nodeName());
      assertTrue(element4.hasParent());
      assertEquals(1, element4.childNodeSize());
      assertNotNull(element4);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        element4.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Element element0 = new Element("d/T\u0004 h");
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      TextNode textNode0 = TextNode.createFromEncoded("d/T\u0004 h");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Element element1 = new Element("head");
      assertFalse(element1.equals((Object)element0));
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
      
      Document document0 = new Document("head");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsContainingText("br");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element0.nextElementSiblings();
      assertNotSame(element0, element1);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element1));
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Element element2 = element0.prepend("9yFBL");
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertNotNull(element2);
      
      element2.setParentNode(element0);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      
      Elements elements2 = element2.getElementsByAttributeValueContaining("[eLluy", "[eLluy");
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      
      Element element3 = element2.firstElementSibling();
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertNull(element3);
      
      List<DataNode> list0 = element2.dataNodes();
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = "Children collection to be inserted must not be null.";
      Document document1 = (Document)document0.addClass("Children collection to be inserted must not be null.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("head", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("head", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      int int0 = 2147483645;
      Elements elements3 = document0.getElementsByIndexEquals(2147483645);
      assertSame(document0, document1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertNotNull(elements3);
      
      Document document2 = document0.clone();
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("head", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("head", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        element1.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = new Document("value");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      Document document2 = (Document)document1.text("value");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      String string0 = document0.outerHtml();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body>\n  value\n </body>\n</html>", string0);
      
      Document document3 = Parser.parseBodyFragment(">a{+IXEJ}rSUXek", "#root");
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      
      Elements elements0 = document3.getElementsByIndexLessThan(2891);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      
      List<Node> list0 = document3.childNodesCopy();
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      String string1 = document3.html();
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(string1);
      assertEquals("<html>\n <head></head>\n <body>\n  &gt;a{+IXEJ}rSUXek\n </body>\n</html>", string1);
      
      Elements elements1 = document0.getElementsContainingText("               ");
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Elements elements2 = document3.siblingElements();
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2147483645);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      
      Element element2 = element0.prependText("");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertNotNull(element2);
      
      Elements elements0 = element2.nextElementSiblings();
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      List<DataNode> list0 = new LinkedList<DataNode>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Element element3 = element2.addClass("iM41gKSSo?sR>");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element3, element2);
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(1, element3.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element3.tagName());
      assertTrue(element3.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element3.nodeName());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertNotNull(element3);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Element element4 = element0.text("");
      assertSame(element0, element4);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element4, element2);
      assertSame(element4, element0);
      assertSame(element4, element1);
      assertSame(element4, element3);
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element4.tagName());
      assertEquals(1, element4.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element4.nodeName());
      assertEquals("", element4.baseUri());
      assertFalse(element4.isBlock());
      assertEquals(0, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertNotNull(element4);
      
      Element element5 = element4.shallowClone();
      assertSame(element0, element4);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element0, element5);
      assertSame(element0, element3);
      assertSame(element4, element2);
      assertNotSame(element4, element5);
      assertSame(element4, element0);
      assertSame(element4, element1);
      assertSame(element4, element3);
      assertNotSame(element5, element1);
      assertNotSame(element5, element2);
      assertNotSame(element5, element3);
      assertNotSame(element5, element4);
      assertNotSame(element5, element0);
      assertFalse(element5.equals((Object)element1));
      assertFalse(element5.equals((Object)element2));
      assertFalse(element5.equals((Object)element3));
      assertFalse(element5.equals((Object)element4));
      assertFalse(element5.equals((Object)element0));
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element4.tagName());
      assertEquals(1, element4.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element4.nodeName());
      assertEquals("", element4.baseUri());
      assertFalse(element4.isBlock());
      assertEquals(0, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertFalse(element5.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element5.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element5.tagName());
      assertFalse(element5.hasParent());
      assertEquals(0, element5.childNodeSize());
      assertEquals(0, element5.siblingIndex());
      assertEquals("", element5.baseUri());
      assertNotNull(element5);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      // Undeclared exception!
      element3.html("2L1_K4g2C\".x$yGi_,");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6v", "6v");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      String string0 = document0.data();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = document0.getElementsByIndexEquals((-47));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("6v", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("6v", document1.location());
      assertNotNull(document1);
      
      Elements elements1 = document1.getElementsContainingText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("6v", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("6v", document1.location());
      assertFalse(elements1.isEmpty());
      assertEquals(4, elements1.size());
      assertNotNull(elements1);
      
      Elements elements2 = document1.siblingElements();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("6v", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("6v", document1.location());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("6v", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("6v", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("6v", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("6v", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9812);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      // Undeclared exception!
      document1.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Document document1 = Parser.parseBodyFragment("", "");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Document document2 = (Document)document0.prependChild(document1);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Element element1 = element0.after((Node) document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(element1, element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
      
      List<Node> list0 = document2.siblingNodes();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = document1.hasClass("");
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(boolean0);
      
      Elements elements0 = document2.siblingElements();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(2, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      int int0 = element1.elementSiblingIndex();
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(element1, element0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("textarea");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = document0.absUrl("textarea");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.wholeText();
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document document1 = (Document)document0.prependText("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Elements elements1 = document1.getElementsContainingText("#");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      Elements elements2 = document1.nextElementSiblings();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      
      // Undeclared exception!
      try { 
        document1.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Element element0 = new Element("d/T\u0004 h");
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      TextNode textNode0 = TextNode.createFromEncoded("d/T\u0004 h");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Element element1 = new Element("head");
      assertFalse(element1.equals((Object)element0));
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      Document document0 = new Document("");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Element element2 = element0.prependText("br");
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertNotNull(element2);
      
      Elements elements0 = document0.getElementsContainingText("br");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element2.nextElementSiblings();
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      Element element3 = element2.prepend("9yFBL");
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element3, element1);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(2, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals("", element3.baseUri());
      assertFalse(element3.isBlock());
      assertEquals("d/T\u0004 h", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("d/T\u0004 h", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertNotNull(element3);
      
      element3.setParentNode(element0);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element3, element1);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertFalse(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals(2, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals("", element3.baseUri());
      assertFalse(element3.isBlock());
      assertEquals("d/T\u0004 h", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("d/T\u0004 h", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      
      Element element4 = element3.firstElementSibling();
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element3, element1);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertFalse(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals(2, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals("", element3.baseUri());
      assertFalse(element3.isBlock());
      assertEquals("d/T\u0004 h", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("d/T\u0004 h", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      assertNull(element4);
      
      List<DataNode> list0 = element3.dataNodes();
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element3, element1);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertFalse(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals(2, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals("", element3.baseUri());
      assertFalse(element3.isBlock());
      assertEquals("d/T\u0004 h", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("d/T\u0004 h", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document1 = (Document)document0.addClass("Children collection to be inserted must not be null.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = document0.clone();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertNotNull(document2);
      
      Elements elements2 = element0.getElementsMatchingOwnText("q_f2^\fAu~jrAZ");
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(element0.equals((Object)element1));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      
      List<DataNode> list1 = document1.dataNodes();
      assertNotSame(list1, list0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertNotNull(list1);
      
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
      
      String string0 = document2.cssSelector();
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      
      Document document0 = new Document("GHz*~");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("GHz*~", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("GHz*~", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element2 = element0.prependText("");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      
      Elements elements0 = element0.getElementsContainingText("2L1_K4g2C\".x$yGi_,");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element2.nextElementSiblings();
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Document document1 = (Document)document0.prepend("{Y0x");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("GHz*~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("GHz*~", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("GHz*~", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("GHz*~", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      element1.setParentNode(document0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(document0, document1);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("GHz*~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("GHz*~", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document2 = element1.ownerDocument();
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("GHz*~", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("GHz*~", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document document3 = document2.outputSettings(document_OutputSettings0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("GHz*~", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("GHz*~", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("GHz*~", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("GHz*~", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      List<TextNode> list0 = document0.textNodes();
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("GHz*~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("GHz*~", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Element element3 = document3.previousElementSibling();
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("GHz*~", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("GHz*~", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("GHz*~", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("GHz*~", document3.location());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertNull(element3);
      
      Elements elements2 = document0.getElementsByIndexEquals((-3255));
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("GHz*~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("GHz*~", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      
      Document document4 = document2.clone();
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("GHz*~", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("GHz*~", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("GHz*~", document4.location());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals("GHz*~", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      
      Elements elements3 = document2.getElementsContainingText("2L1_K4g2C\".x$yGi_,");
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document4);
      assertSame(document2, document1);
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(document2.equals((Object)document4));
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("GHz*~", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("GHz*~", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertNotNull(elements3);
      
      List<DataNode> list1 = document1.dataNodes();
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("GHz*~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("GHz*~", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("GHz*~", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("GHz*~", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(list1);
      
      // Undeclared exception!
      try { 
        document1.insertChildren(2091, (Collection<? extends Node>) elements2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document document2 = document1.ownerDocument();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      List<DataNode> list0 = document0.dataNodes();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document3 = (Document)document1.addClass("");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertNotNull(document3);
      
      Document document4 = Parser.parseBodyFragment(":>&atfg(L", "");
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("", document4.baseUri());
      assertNotNull(document4);
      
      // Undeclared exception!
      try { 
        document4.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      
      Element element2 = element0.prependText("");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      
      Elements elements0 = element0.getElementsContainingText("2L1_K4g2C\".x$yGi_,");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element2.nextElementSiblings();
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      List<DataNode> list0 = element0.dataNodes();
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Element element3 = element2.addClass("iM41gKSSo?sR>");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element3, element2);
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element3.nodeName());
      assertFalse(element3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element3.tagName());
      assertEquals("", element3.baseUri());
      assertEquals(1, element3.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertNotNull(element3);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Element element4 = element0.text("");
      assertSame(element0, element4);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element4, element3);
      assertSame(element4, element2);
      assertSame(element4, element0);
      assertSame(element4, element1);
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element4.isBlock());
      assertEquals(0, element4.siblingIndex());
      assertTrue(element4.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element4.nodeName());
      assertEquals(1, element4.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element4.tagName());
      assertEquals("", element4.baseUri());
      assertNotNull(element4);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Tag tag0 = Tag.valueOf("CNS*v*%D*S");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("CNS*v*%D*S", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("CNS*v*%D*S", tag0.toString());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      int int0 = attributes1.indexOfKey("CNS*v*%D*S");
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes0.equals((Object)attributes1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals((-1), int0);
      
      Attributes attributes2 = attributes1.put("CNS*v*%D*S", "A");
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      boolean boolean0 = attributes2.hasKeyIgnoreCase("");
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(boolean0);
      
      FormElement formElement0 = new FormElement(tag0, "br", attributes2);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("CNS*v*%D*S", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("CNS*v*%D*S", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(formElement0.isBlock());
      assertEquals("CNS*v*%D*S", formElement0.tagName());
      assertEquals("CNS*v*%D*S", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("br", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      attributes0.removeIgnoreCase("A");
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertEquals(0, attributes0.size());
      
      Elements elements0 = formElement0.children();
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("CNS*v*%D*S", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("CNS*v*%D*S", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(formElement0.isBlock());
      assertEquals("CNS*v*%D*S", formElement0.tagName());
      assertEquals("CNS*v*%D*S", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("br", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = formElement0.getElementsByClass("A");
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotSame(elements1, elements0);
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("CNS*v*%D*S", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("CNS*v*%D*S", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(formElement0.isBlock());
      assertEquals("CNS*v*%D*S", formElement0.tagName());
      assertEquals("CNS*v*%D*S", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("br", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      // Undeclared exception!
      try { 
        formElement0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = new Document("value");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, int0);
      
      String string0 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document document2 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsMatchingText("");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document1.getElementsByIndexEquals((-3255));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Document document3 = document0.clone();
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("value", document3.baseUri());
      assertEquals("value", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertNotNull(document3);
      
      Elements elements2 = document1.getElementsContainingText("Gnc1+/u/iRf/%");
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      
      List<DataNode> list0 = document2.dataNodes();
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = Element.preserveWhitespace(document0);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
      
      String string2 = document2.cssSelector();
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(string2);
      assertEquals("#root", string2);
      
      Attributes attributes0 = document2.attributes();
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertEquals(0, attributes0.size());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedDash", "ScriptDataEscapedDash");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ScriptDataEscapedDash", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("ScriptDataEscapedDash", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataEscapedDash", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Element element1 = element0.after((Node) document1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ScriptDataEscapedDash", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("ScriptDataEscapedDash", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataEscapedDash", document1.location());
      assertEquals(2, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("ScriptDataEscapedDash", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertNotNull(element1);
      
      Elements elements0 = document1.children();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertEquals("ScriptDataEscapedDash", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataEscapedDash", document1.location());
      assertEquals(2, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = "html";
      Document document2 = Document.createShell("");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      
      Element element2 = element0.appendTo(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertEquals("ScriptDataEscapedDash", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals("ScriptDataEscapedDash", element2.baseUri());
      assertEquals("body", element2.tagName());
      assertNotNull(element2);
      
      // Undeclared exception!
      try { 
        document0.is("6|9/Vqiwac^zK:cE");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '6|9/Vqiwac^zK:cE': unexpected token at '/Vqiwac^zK:cE'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-65);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)10, (byte)3, (byte)58, (byte)93, (byte) (-5), (byte)0, (byte) (-65)}, byteArray0);
      
      Document document0 = new Document("i");
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.baseUri());
      assertEquals("i", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.baseUri());
      assertEquals("i", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("i", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("i", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = document1.ownerDocument();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.baseUri());
      assertEquals("i", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("i", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("i", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("i", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("i", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      List<DataNode> list0 = document0.dataNodes();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.baseUri());
      assertEquals("i", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Document document3 = (Document)document1.addClass("i");
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("i", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("i", document3.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.baseUri());
      assertEquals("i", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("i", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("i", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document3);
      
      String string0 = document2.val();
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.baseUri());
      assertEquals("i", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("i", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("i", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("i", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("i", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Tag tag0 = Tag.valueOf("w!Py-s1\"uqAI8g");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals("w!Py-s1\"uqAI8g", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("w!Py-s1\"uqAI8g", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Document document4 = Parser.parseBodyFragmentRelaxed("", "i");
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("i", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("i", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      
      Elements elements0 = document4.getElementsContainingOwnText("i");
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("i", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("i", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string1 = document2.cssSelector();
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.baseUri());
      assertEquals("i", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("i", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("i", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("i", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("i", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertNotNull(string1);
      
      String string2 = document0.html();
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(document0.equals((Object)document4));
      assertEquals("#document", document0.nodeName());
      assertEquals("i", document0.baseUri());
      assertEquals("i", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(string2);
      assertEquals("", string2);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedReader pipedReader0 = new PipedReader(1183);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      List<DataNode> list1 = document4.dataNodes();
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(list1, list0);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertTrue(list1.equals((Object)list0));
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("i", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals("i", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = new Document("value");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, int0);
      
      String string0 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.className();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(118);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      List<TextNode> list0 = document1.textNodes();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Element element0 = document2.previousElementSibling();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNull(element0);
      
      Elements elements0 = document1.getElementsByIndexEquals((-3255));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document3 = document2.clone();
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("value", document3.location());
      assertEquals("value", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      
      Elements elements1 = document3.getElementsContainingText("value");
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("value", document3.location());
      assertEquals("value", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      List<DataNode> list1 = document2.dataNodes();
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      // Undeclared exception!
      try { 
        document1.insertChildren(28, (Collection<? extends Node>) list1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Element element0 = new Element(" > ");
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      TextNode textNode0 = TextNode.createFromEncoded(" > ");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Element element1 = new Element("head");
      assertFalse(element1.equals((Object)element0));
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      Element element2 = element0.append("uKF");
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals(">", element2.nodeName());
      assertEquals(">", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertNotNull(element2);
      
      String string0 = element0.absUrl("Gnc1+/u/iRf/%");
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = element0.html();
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertNotNull(string1);
      assertEquals("uKF", string1);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Element element3 = element2.prepend("W%`4*!?3JM4@");
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertNotSame(element3, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals(">", element2.nodeName());
      assertEquals(">", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(">", element3.nodeName());
      assertFalse(element3.isBlock());
      assertFalse(element3.hasParent());
      assertEquals(2, element3.childNodeSize());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals(">", element3.tagName());
      assertNotNull(element3);
      
      element2.setParentNode(element0);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(2, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(">", element2.nodeName());
      assertEquals(">", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      
      Elements elements0 = element2.getElementsByAttributeValueStarting("Gnc1+/u/iRf/%", "Gnc1+/u/iRf/%");
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(2, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(">", element2.nodeName());
      assertEquals(">", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document0 = new Document(" > ");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      List<DataNode> list0 = element1.dataNodes();
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element1, element3);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element3));
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertEquals("", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Element element4 = element0.addClass("h%I#:7w ");
      assertSame(element0, element2);
      assertSame(element0, element4);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertSame(element4, element2);
      assertNotSame(element4, element1);
      assertSame(element4, element3);
      assertSame(element4, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element4.equals((Object)element1));
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("", element4.baseUri());
      assertEquals(2, element4.childNodeSize());
      assertTrue(element4.hasParent());
      assertEquals(0, element4.siblingIndex());
      assertEquals(">", element4.tagName());
      assertFalse(element4.isBlock());
      assertEquals(">", element4.nodeName());
      assertNotNull(element4);
      
      element0.doSetBaseUri((String) null);
      assertSame(element0, element2);
      assertSame(element0, element4);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertNull(element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      Document document1 = parser1.parseInput("Gnc1+/u/iRf/%", "");
      assertNotSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.html("Gnc1+/u/iRf/%");
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(document2);
      
      String string2 = element4.baseUri();
      assertSame(element0, element2);
      assertSame(element0, element4);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertSame(element4, element2);
      assertNotSame(element4, element1);
      assertSame(element4, element3);
      assertSame(element4, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element4.equals((Object)element1));
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertNull(element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertNull(element4.baseUri());
      assertEquals(2, element4.childNodeSize());
      assertTrue(element4.hasParent());
      assertEquals(0, element4.siblingIndex());
      assertEquals(">", element4.tagName());
      assertFalse(element4.isBlock());
      assertEquals(">", element4.nodeName());
      assertNull(string2);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(56);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(bufferedWriter0);
      
      BufferedWriter bufferedWriter1 = document1.html(bufferedWriter0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(bufferedWriter0, bufferedWriter1);
      assertSame(bufferedWriter1, bufferedWriter0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(bufferedWriter1);
      
      Element element5 = element4.parent();
      assertSame(element0, element2);
      assertSame(element0, element4);
      assertSame(element0, element5);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertSame(element5, element3);
      assertSame(element5, element2);
      assertSame(element5, element0);
      assertSame(element5, element4);
      assertNotSame(element5, element1);
      assertSame(element4, element2);
      assertNotSame(element4, element1);
      assertSame(element4, element5);
      assertSame(element4, element3);
      assertSame(element4, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element5.equals((Object)element1));
      assertFalse(element4.equals((Object)element1));
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertNull(element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(">", element5.tagName());
      assertEquals(2, element5.childNodeSize());
      assertFalse(element5.isBlock());
      assertTrue(element5.hasParent());
      assertEquals(0, element5.siblingIndex());
      assertNull(element5.baseUri());
      assertEquals(">", element5.nodeName());
      assertNull(element4.baseUri());
      assertEquals(2, element4.childNodeSize());
      assertTrue(element4.hasParent());
      assertEquals(0, element4.siblingIndex());
      assertEquals(">", element4.tagName());
      assertFalse(element4.isBlock());
      assertEquals(">", element4.nodeName());
      assertNotNull(element5);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      
      Document document0 = new Document("           ");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("           ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("           ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element2 = element0.prependText("");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertNotNull(element2);
      
      Elements elements0 = element0.getElementsContainingText("2L1_K4g2C\".x$yGi_,");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element2.nextElementSiblings();
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Document document1 = (Document)document0.prepend("{Y0x");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("           ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("           ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("           ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("           ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      element1.setParentNode(document0);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(document0, document1);
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("           ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("           ", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Element element3 = new Element("{Y0x");
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertEquals("{Y0x", element3.tagName());
      assertFalse(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals("{Y0x", element3.nodeName());
      assertEquals(0, element3.childNodeSize());
      assertNotNull(element3);
      
      List<DataNode> list0 = element0.dataNodes();
      assertSame(element0, element2);
      assertNotSame(element0, element3);
      assertSame(element0, element1);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Element element4 = element2.addClass("iM41gKSSo?sR>");
      assertSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element2, element1);
      assertSame(element2, element4);
      assertSame(element2, element0);
      assertNotSame(element2, element3);
      assertSame(element4, element1);
      assertSame(element4, element2);
      assertSame(element4, element0);
      assertNotSame(element4, element3);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element2.equals((Object)element3));
      assertFalse(element4.equals((Object)element3));
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element4.tagName());
      assertEquals(0, element4.siblingIndex());
      assertFalse(element4.isBlock());
      assertEquals("", element4.baseUri());
      assertEquals(0, element4.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element4.nodeName());
      assertTrue(element4.hasParent());
      assertNotNull(element4);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Pattern pattern0 = Pattern.compile("");
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements2 = element1.getElementsMatchingOwnText(pattern0);
      assertSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element0, element3);
      assertSame(element0, element1);
      assertSame(element1, element4);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element1, element3);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element1.equals((Object)element3));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertNotNull(elements2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Map<String, String> map0 = document1.dataset();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("           ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("           ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("           ", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("           ", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(map0);
      
      Elements elements3 = document0.siblingElements();
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertSame(document0, document1);
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("           ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("           ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(elements3);
      
      int int0 = element0.elementSiblingIndex();
      assertSame(element0, element2);
      assertSame(element0, element4);
      assertNotSame(element0, element3);
      assertSame(element0, element1);
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, int0);
      
      Element element5 = document0.parent();
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("           ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("           ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNull(element5);
      
      Element element6 = element3.shallowClone();
      assertNotSame(element6, element1);
      assertNotSame(element6, element4);
      assertNotSame(element6, element3);
      assertNotSame(element6, element2);
      assertNotSame(element6, element0);
      assertNotSame(element3, element4);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(element3, element6);
      assertNotSame(element3, element1);
      assertFalse(element6.equals((Object)element1));
      assertFalse(element6.equals((Object)element4));
      assertFalse(element6.equals((Object)element3));
      assertFalse(element6.equals((Object)element2));
      assertFalse(element6.equals((Object)element0));
      assertFalse(element3.equals((Object)element4));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertEquals("{Y0x", element6.tagName());
      assertFalse(element6.isBlock());
      assertEquals("{Y0x", element6.nodeName());
      assertEquals(0, element6.siblingIndex());
      assertEquals(0, element6.childNodeSize());
      assertEquals("", element6.baseUri());
      assertFalse(element6.hasParent());
      assertEquals("{Y0x", element3.tagName());
      assertFalse(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals("", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals("{Y0x", element3.nodeName());
      assertEquals(0, element3.childNodeSize());
      assertNotNull(element6);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      String string0 = "";
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      
      String string1 = "uKF";
      // Undeclared exception!
      element1.append("");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Element element0 = new Element("d/T\u0004 h");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertNotNull(element0);
      
      TextNode textNode0 = TextNode.createFromEncoded("d/T\u0004 h");
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Element element1 = new Element("head");
      assertFalse(element1.equals((Object)element0));
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      Document document0 = new Document("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element2 = element0.prependText("br");
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertNotNull(element2);
      
      Elements elements0 = document0.getElementsContainingText("br");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = element2.nextElementSiblings();
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      Element element3 = element2.prepend("9yFBL");
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals("", element3.baseUri());
      assertFalse(element3.hasParent());
      assertFalse(element3.isBlock());
      assertEquals("d/T\u0004 h", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertEquals("d/T\u0004 h", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      assertNotNull(element3);
      
      element3.setParentNode(element0);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals("", element3.baseUri());
      assertFalse(element3.isBlock());
      assertEquals("d/T\u0004 h", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("d/T\u0004 h", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      
      Element element4 = element3.firstElementSibling();
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals("", element3.baseUri());
      assertFalse(element3.isBlock());
      assertEquals("d/T\u0004 h", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("d/T\u0004 h", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      assertNull(element4);
      
      List<DataNode> list0 = element3.dataNodes();
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      assertSame(element3, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("d/T\u0004 h", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals("d/T\u0004 h", element0.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals("d/T\u0004 h", element2.tagName());
      assertEquals("d/T\u0004 h", element2.nodeName());
      assertEquals("", element3.baseUri());
      assertFalse(element3.isBlock());
      assertEquals("d/T\u0004 h", element3.tagName());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("d/T\u0004 h", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Document document1 = (Document)document0.addClass("Children collection to be inserted must not be null.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements2 = document0.getElementsByIndexEquals(2147483645);
      assertSame(document0, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      
      Document document2 = document0.clone();
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        element1.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Document document1 = element0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Element element1 = (Element)element0.clearAttributes();
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("Tag name must not be empty.", element1.baseUri());
      assertNotNull(element1);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsByAttributeValueMatching("Tag name must not be empty.", "Tag name must not be empty.");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be empty.", document2.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = document0.data();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("org.jsoup.select.StructuralEvaluator$ImmediateParent", parseSettings0);
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", tag0.toString());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.StructuralEvaluator$ImmediateParent");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(1, attributes0.size());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("Pattern syntax error: ", true);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(attributes1);
      
      Element element2 = new Element(tag0, "org.jsoup.select.StructuralEvaluator$ImmediateParent", attributes1);
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", element2.nodeName());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", tag0.toString());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(element2);
      
      CDataNode cDataNode1 = (CDataNode)cDataNode0.clone();
      assertNotSame(cDataNode1, cDataNode0);
      assertNotSame(cDataNode0, cDataNode1);
      assertFalse(cDataNode1.equals((Object)cDataNode0));
      assertFalse(cDataNode1.hasParent());
      assertEquals(0, cDataNode1.siblingIndex());
      assertEquals("#cdata", cDataNode1.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode1);
      
      int int0 = element1.elementSiblingIndex();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("Tag name must not be empty.", element1.baseUri());
      assertEquals(1, int0);
      
      String string1 = element2.tagName();
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertNotSame(cDataNode0, cDataNode1);
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(cDataNode0.equals((Object)cDataNode1));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.childNodeSize());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", element2.nodeName());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", tag0.toString());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(string1);
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediateParent", string1);
      
      Element element3 = element1.empty();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element1, element3);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element3.equals((Object)element2));
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("Tag name must not be empty.", element1.baseUri());
      assertTrue(element3.hasParent());
      assertEquals("body", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("Tag name must not be empty.", element3.baseUri());
      assertEquals(1, element3.siblingIndex());
      assertNotNull(element3);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("textarea");
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.absUrl("textarea");
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.wholeText();
      assertTrue(string1.equals((Object)string0));
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)6;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)4, (byte)6, (byte)60, (byte) (-25), (byte) (-103), (byte)6}, byteArray0);
      
      List<Node> list0 = document0.siblingNodes();
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Elements elements1 = document0.getElementsContainingText("");
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      
      Pattern pattern0 = Pattern.compile("textarea");
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      assertNotNull(pattern0);
      
      String[] stringArray0 = pattern0.split((CharSequence) "", 6);
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = pattern0.split((CharSequence) "textarea", 1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      Elements elements2 = document0.getElementsMatchingOwnText(pattern0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertEquals(0, pattern0.flags());
      assertEquals("textarea", pattern0.pattern());
      assertEquals("textarea", pattern0.toString());
      assertNotNull(elements2);
      
      Map<String, String> map0 = document0.dataset();
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      document0.nodelistChanged();
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      
      String string2 = document0.className();
      assertTrue(string2.equals((Object)string1));
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string2);
      assertEquals("", string2);
      
      Elements elements3 = document0.siblingElements();
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertNotNull(elements3);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedDash", "ScriptDataEscapedDash");
      assertFalse(document0.hasParent());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("ScriptDataEscapedDash", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataEscapedDash", document1.baseUri());
      assertEquals("ScriptDataEscapedDash", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Element element1 = element0.after((Node) document1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(element1, element0);
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("ScriptDataEscapedDash", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataEscapedDash", document1.baseUri());
      assertEquals("ScriptDataEscapedDash", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("ScriptDataEscapedDash", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      
      Elements elements0 = document1.children();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataEscapedDash", document1.baseUri());
      assertEquals("ScriptDataEscapedDash", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document0.siblingElements();
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(2, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      
      int int0 = document0.elementSiblingIndex();
      assertSame(document0, document1);
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(2, int0);
      
      boolean boolean0 = document0.isBlock();
      assertSame(document0, document1);
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document1.after((Node) element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Element element0 = new Element(" > ");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertNotNull(element0);
      
      TextNode textNode0 = TextNode.createFromEncoded(" > ");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      String string0 = "head";
      Element element1 = new Element("head");
      assertFalse(element1.equals((Object)element0));
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      Element element2 = element0.append("head");
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(">", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(">", element2.nodeName());
      assertNotNull(element2);
      
      String string1 = element0.absUrl("Gnc1+/u/iRf/%");
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = element0.html();
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertNotNull(string2);
      assertEquals("head", string2);
      
      // Undeclared exception!
      try { 
        element0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Document document2 = (Document)document0.prependChild(document1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Element element1 = element0.after((Node) document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertEquals(2, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      String string0 = document0.val();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Element element2 = document0.parent();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals("html", element2.nodeName());
      assertEquals(3, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertNotNull(element2);
      
      Elements elements0 = element1.children();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertEquals(2, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element1.getElementsByIndexGreaterThan((-518));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      assertNotSame(elements1, elements0);
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertEquals(2, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertNotNull(elements1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = new Document("value");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(0, int0);
      
      String string0 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.className();
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsMatchingText("Tag name must not be empty.");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document1.getElementsByIndexEquals((-3255));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      Document document3 = document2.clone();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("value", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("value", document3.location());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      Elements elements2 = document3.getElementsContainingText("value");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("value", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("value", document3.location());
      assertFalse(document3.isBlock());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertNotNull(elements2);
      
      List<DataNode> list0 = document2.dataNodes();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertFalse(boolean0);
      
      String string2 = document1.cssSelector();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertNotNull(string2);
      assertEquals("#root", string2);
      
      Attributes attributes0 = document2.attributes();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertEquals(0, attributes0.size());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedDash", "ScriptDataEscapedDash");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataEscapedDash", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      
      Document document2 = document1.ownerDocument();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Document document3 = Parser.parseBodyFragment("", "");
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = "Z~xpl6+>wPS";
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("Z~xpl6+>wPS", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("=nAn{%*d}", "=nAn{%*d}");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      boolean boolean0 = attributes0.hasKeyIgnoreCase("ins");
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
      
      String string1 = "`K\\=";
      Map<String, String> map0 = attributes1.dataset();
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Attribute attribute0 = new Attribute("`K=", "mark", attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("`K=", attribute0.getKey());
      assertEquals("mark", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertSame(attributes0, attributes2);
      assertSame(attributes0, attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(attributes3, attributes1);
      assertSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("`K=", attribute0.getKey());
      assertEquals("mark", attribute0.getValue());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "Z~xpl6+>wPS", attributes3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = new Document("value");
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, int0);
      
      String string0 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.className();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(118);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Elements elements0 = document1.getElementsByIndexEquals((-3255));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document3 = document2.clone();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("value", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("value", document3.baseUri());
      assertNotNull(document3);
      
      Elements elements1 = document3.getElementsContainingText("value");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("value", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("value", document3.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      List<DataNode> list0 = document2.dataNodes();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("value", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(boolean0);
      
      String string2 = document1.cssSelector();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(string2);
      assertEquals("#root", string2);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = new Document("value");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      int int0 = document0.elementSiblingIndex();
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, int0);
      
      Attributes attributes0 = document1.attributes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = document0.className();
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.className();
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-2689));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("value");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, int0);
      
      String string0 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.className();
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(118);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Elements elements0 = document1.getElementsByIndexEquals((-3255));
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document3 = document2.clone();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("value", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("value", document3.location());
      assertNotNull(document3);
      
      Elements elements1 = document3.getElementsContainingText("value");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("value", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("value", document3.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      List<DataNode> list0 = document2.dataNodes();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Elements elements2 = document0.previousElementSiblings();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertNotNull(elements2);
      
      Element element0 = document1.getElementById("body");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedDash", "ScriptDataEscapedDash");
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataEscapedDash", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.removeClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("ScriptDataEscapedDash", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      Element element1 = element0.after((Node) document1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataEscapedDash", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataEscapedDash", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("ScriptDataEscapedDash", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      
      Elements elements0 = document1.children();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataEscapedDash", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = element1.hasClass("html");
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataEscapedDash", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataEscapedDash", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("ScriptDataEscapedDash", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(boolean0);
      
      Elements elements1 = document0.siblingElements();
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements1.isEmpty());
      assertEquals(2, elements1.size());
      assertNotNull(elements1);
      
      int int0 = document0.elementSiblingIndex();
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscapedDash", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = new Document("value");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, int0);
      
      String string0 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.className();
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(118);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Element element0 = document2.previousElementSibling();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertNull(element0);
      
      Elements elements0 = document1.getElementsByIndexEquals((-3255));
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document3 = document2.clone();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("value", document3.baseUri());
      assertEquals("value", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Elements elements1 = document3.getElementsContainingText("value");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(elements1, elements0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("value", document3.baseUri());
      assertEquals("value", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      List<DataNode> list0 = document2.dataNodes();
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "2L1_K4g2C\".x$yGi_,";
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertNotNull(element0);
      
      String string1 = "";
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertTrue(element1.hasParent());
      
      // Undeclared exception!
      element0.attr("2L1_K4g2C\".x$yGi_,", "2L1_K4g2C\".x$yGi_,");
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = new Document("Gnc1+/u/iRf/%");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Gnc1+/u/iRf/%", document0.baseUri());
      assertEquals("Gnc1+/u/iRf/%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendText("T0-hqH'u,/O-~YA");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Gnc1+/u/iRf/%", document0.baseUri());
      assertEquals("Gnc1+/u/iRf/%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("Gnc1+/u/iRf/%", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("Gnc1+/u/iRf/%", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Element element0 = document0.getElementById("T0-hqH'u,/O-~YA");
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Gnc1+/u/iRf/%", document0.baseUri());
      assertEquals("Gnc1+/u/iRf/%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document0.selectFirst("<_HE*[$OD$/@;`*}#`");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<_HE*[$OD$/@;`*}#`': unexpected token at '<_HE*[$OD$/@;`*}#`'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "value";
      Document document0 = new Document("value");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document document2 = (Document)document1.append("value");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals("value", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      String string1 = document1.absUrl("value");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = document1.html();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(string2);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>value", string2);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Document document3 = (Document)document2.prepend("");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals("value", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("value", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("value", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      document1.setParentNode(document0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("value", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("<html>\n <head></head>\n <body></body>\n</html>value", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-65);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)84, (byte)84, (byte)10, (byte)3, (byte)58, (byte)93, (byte) (-5), (byte)0, (byte) (-65)}, byteArray0);
      
      Document document0 = new Document("");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document document2 = document1.ownerDocument();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      List<DataNode> list0 = document0.dataNodes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Document document3 = (Document)document1.addClass("");
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document3);
      
      String string0 = document2.val();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Tag tag0 = Tag.valueOf("w!Py-s1\"uqAI8g");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("w!Py-s1\"uqAI8g", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("w!Py-s1\"uqAI8g", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Document document4 = Parser.parseBodyFragmentRelaxed("", ":>&atfg(L");
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertEquals(":>&atfg(L", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(":>&atfg(L", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      
      Elements elements0 = document4.getElementsContainingOwnText("");
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertEquals(":>&atfg(L", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals(":>&atfg(L", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string1 = document0.html();
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(document0.equals((Object)document4));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedReader pipedReader0 = new PipedReader(1183);
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = "IJMxShN!4UU@DdB4";
      Document document0 = new Document("IJMxShN!4UU@DdB4");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertNotNull(document0);
      
      String string1 = "Q6";
      Locale locale0 = Locale.forLanguageTag("Q6");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      
      String string2 = document0.ownText();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertNotNull(string2);
      assertEquals("", string2);
      
      Elements elements0 = document0.children();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = document0.appendElement("Q6");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("q6", element0.tagName());
      assertEquals("q6", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertNotNull(element0);
      
      Document document1 = element0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("q6", element0.tagName());
      assertEquals("q6", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q6");
      assertFalse(boolean0);
      
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        document1.child(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6v", "6v");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("6v", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.lastElementSibling();
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("6v", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("6v", element1.baseUri());
      assertNotNull(element1);
      
      Node[] nodeArray0 = element1.childNodesAsArray();
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("6v", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("6v", element1.baseUri());
      assertNotNull(nodeArray0);
      assertEquals(1, nodeArray0.length);
      
      boolean boolean0 = element0.isBlock();
      assertSame(element0, element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("6v", document0.baseUri());
      assertEquals("6v", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("6v", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = "2L1_K4g2C\".x$yGi_,";
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      String string1 = "";
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      
      Document document0 = new Document("");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertNotNull(document0);
      
      String string2 = "";
      Element element2 = element0.prependText("");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertNotNull(element2);
      
      Elements elements0 = element0.getElementsContainingText("2L1_K4g2C\".x$yGi_,");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element2.nextElementSiblings();
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      Document document1 = (Document)document0.prepend("{`6Y0x");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      element1.setParentNode(document0);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(document0, document1);
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = new Document("value");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.indentAmount(2432);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2432, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(2432, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(2432, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      
      Document document2 = document0.outputSettings(document_OutputSettings2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2432, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2432, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("value", document2.location());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      
      Document document3 = Parser.parseBodyFragment("Pattern syntax error: ", "body");
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("body", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("body", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      
      Elements elements0 = document2.getElementsMatchingOwnText("body");
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2432, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2432, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("value", document2.location());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document3;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document0;
      CharsetEncoder charsetEncoder0 = document_OutputSettings2.encoder();
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2432, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(2432, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(charsetEncoder0);
      
      Comment comment0 = new Comment("su<c@nTDx");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      nodeArray0[5] = (Node) comment0;
      // Undeclared exception!
      try { 
        document2.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tbody", "tbody");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tbody", document0.baseUri());
      assertEquals("tbody", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)88;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-3);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)4, (byte)4, (byte)115, (byte)29, (byte) (-1), (byte) (-3), (byte)88, (byte) (-1), (byte) (-3)}, byteArray0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("tbody", document0.baseUri());
      assertEquals("tbody", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("tbody", document1.location());
      assertEquals("tbody", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      String string0 = "br";
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Unexpected count of entities loaded");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("Unexpected count of entities loaded", tag0.toString());
      assertEquals("Unexpected count of entities loaded", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      String string0 = "a1(4z8IZn,N";
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertTrue(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      
      Attributes attributes2 = attributes1.put("a1(4z8IZn,N", "br");
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertNotNull(attributes2);
      
      String string1 = "R+Q'Y )z;";
      Attribute attribute0 = new Attribute("br", "R+Q'Y )z;", attributes1);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("R+Q'Y )z;", attribute0.getValue());
      assertEquals("br", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attributes attributes3 = attributes2.put(attribute0);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes3);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes0);
      assertSame(attributes3, attributes2);
      assertSame(attributes3, attributes1);
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("R+Q'Y )z;", attribute0.getValue());
      assertEquals("br", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertNotNull(attributes3);
      
      Element element0 = new Element(tag0, "a1(4z8IZn,N", attributes3);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes0));
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("Unexpected count of entities loaded", tag0.toString());
      assertEquals("Unexpected count of entities loaded", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals("R+Q'Y )z;", attribute0.getValue());
      assertEquals("br", attribute0.getKey());
      assertEquals(2, attributes3.size());
      assertEquals("Unexpected count of entities loaded", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("a1(4z8IZn,N", element0.baseUri());
      assertEquals("Unexpected count of entities loaded", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.select(".");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = new Document("IJMxShN!4UU@DdB4");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertNotNull(document0);
      
      Locale locale0 = Locale.forLanguageTag("Q6");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      String string0 = document0.ownText();
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = document0.children();
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element0 = document0.appendElement("Q6");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("q6", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("q6", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertNotNull(element0);
      
      Document document1 = element0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("q6", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("q6", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertEquals("IJMxShN!4UU@DdB4", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Elements elements1 = element0.getElementsByIndexGreaterThan(13);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("q6", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("q6", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertNotNull(elements1);
      
      Element element1 = document1.createElement("5de");
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("q6", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("q6", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertEquals("IJMxShN!4UU@DdB4", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(element1.isBlock());
      assertEquals("5de", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", element1.baseUri());
      assertEquals("5de", element1.nodeName());
      assertNotNull(element1);
      
      Node[] nodeArray0 = element1.childNodesAsArray();
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(document1, document0);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("q6", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("q6", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertEquals("IJMxShN!4UU@DdB4", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(element1.isBlock());
      assertEquals("5de", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", element1.baseUri());
      assertEquals("5de", element1.nodeName());
      assertNotNull(nodeArray0);
      assertEquals(0, nodeArray0.length);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter1.toString());
      assertEquals(0, charArrayWriter1.size());
      assertNotNull(charArrayWriter1);
      
      CharArrayWriter charArrayWriter2 = document1.html(charArrayWriter1);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(document1, document0);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertSame(charArrayWriter1, charArrayWriter2);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertFalse(element0.equals((Object)element1));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("q6", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("q6", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertEquals("IJMxShN!4UU@DdB4", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("\n<q6></q6>", charArrayWriter0.toString());
      assertEquals(10, charArrayWriter0.size());
      assertEquals(10, charArrayWriter1.size());
      assertEquals("\n<q6></q6>", charArrayWriter1.toString());
      assertEquals("\n<q6></q6>", charArrayWriter2.toString());
      assertEquals(10, charArrayWriter2.size());
      assertNotNull(charArrayWriter2);
      
      Document document2 = (Document)document0.doClone(document1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("q6", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("q6", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertEquals("IJMxShN!4UU@DdB4", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Document document3 = (Document)document1.appendTo(element0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(element0, element1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertFalse(document0.equals((Object)document2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("q6", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("q6", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertEquals("IJMxShN!4UU@DdB4", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("IJMxShN!4UU@DdB4", document3.location());
      assertTrue(document3.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertNotNull(uS_ASCII0);
      
      // Undeclared exception!
      try { 
        Charset.isSupported("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = new Document("value");
      assertEquals("value", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("n(=Fi:9.?", "value");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings3);
      
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = document1.data();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        document1.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = new Document("value");
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.location());
      assertEquals("value", document1.baseUri());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document document2 = (Document)document0.clearAttributes();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Document document3 = document0.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("value", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("value", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("U6", "U6");
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = document1.data();
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("value", document1.location());
      assertEquals("value", document1.baseUri());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Document document4 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("value", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("value", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertNotNull(document4);
      
      // Undeclared exception!
      try { 
        document4.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("z+Is=_a.?", 7);
      assertEquals("z+Is=_a.?", pattern0.toString());
      assertEquals(7, pattern0.flags());
      assertEquals("z+Is=_a.?", pattern0.pattern());
      assertNotNull(pattern0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("F/k148F]3", "6U[");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6U[", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("6U[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("InFrameset", pattern0);
      assertEquals("z+Is=_a.?", pattern0.toString());
      assertEquals(7, pattern0.flags());
      assertEquals("z+Is=_a.?", pattern0.pattern());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6U[", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("6U[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Node node0 = document0.previousSibling();
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6U[", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("6U[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertNull(node0);
      
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      assertEquals("z+Is=_a.?", pattern0.toString());
      assertEquals(7, pattern0.flags());
      assertEquals("z+Is=_a.?", pattern0.pattern());
      assertNotNull(evaluator_MatchesOwn0);
      
      String string0 = evaluator_MatchesOwn0.toString();
      assertEquals("z+Is=_a.?", pattern0.toString());
      assertEquals(7, pattern0.flags());
      assertEquals("z+Is=_a.?", pattern0.pattern());
      assertNotNull(string0);
      assertEquals(":matchesOwn(z+Is=_a.?)", string0);
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertEquals("*", evaluator_AllElements0.toString());
      assertNotNull(evaluator_AllElements0);
      
      boolean boolean0 = document0.is((Evaluator) evaluator_AllElements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6U[", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("6U[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("*", evaluator_AllElements0.toString());
      assertTrue(boolean0);
      
      Document document1 = (Document)document0.html(":matchesOwn(z+Is=_a.?)");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6U[", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("6U[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("6U[", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("6U[", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.removeClass("org.jsoup.nodes.Element");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6U[", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("6U[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("6U[", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("6U[", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("6U[", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("6U[", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Set<String> set0 = document2.classNames();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6U[", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("6U[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("6U[", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("6U[", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("6U[", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("6U[", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("z+Is=_a.?"));
      
      Document document3 = (Document)document2.prependChild(document1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6U[", document0.location());
      assertEquals("6U[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("6U[", document1.baseUri());
      assertEquals("6U[", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("6U[", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("6U[", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals("6U[", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("6U[", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      Document document4 = (Document)document2.after((Node) document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6U[", document0.location());
      assertEquals("6U[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("6U[", document1.baseUri());
      assertEquals("6U[", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("6U[", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("6U[", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("6U[", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(document4.hasParent());
      assertEquals("6U[", document4.location());
      assertNotNull(document4);
      
      Document document5 = (Document)document0.parent();
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document5, document4);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6U[", document0.location());
      assertEquals("6U[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("6U[", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#root", document5.tagName());
      assertEquals("6U[", document5.baseUri());
      assertFalse(document5.isBlock());
      assertNotNull(document5);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("yNd7I.JPz3p;+PSECd", "yNd7I.JPz3p;+PSECd");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("br", "SSn#)-xsnWMqN");
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("SSn#)-xsnWMqN", document1.location());
      assertEquals("SSn#)-xsnWMqN", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Element element0 = document0.body();
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("yNd7I.JPz3p;+PSECd", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.lastElementSibling();
      assertNotSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.equals((Object)document1));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("yNd7I.JPz3p;+PSECd", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Document document1 = element0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Element element1 = (Element)element0.clearAttributes();
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.tagName());
      assertEquals("Tag name must not be empty.", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertNotNull(element1);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document2.hasParent());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsByAttributeValueMatching("Tag name must not be empty.", "Tag name must not be empty.");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document2.hasParent());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Element element2 = document1.createElement("#root");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(element2.hasParent());
      assertEquals("#root", element2.nodeName());
      assertEquals("Tag name must not be empty.", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("#root", element2.tagName());
      assertNotNull(element2);
      
      Node[] nodeArray0 = document2.childNodesAsArray();
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(element0.equals((Object)element2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document2.hasParent());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertNotNull(nodeArray0);
      assertEquals(1, nodeArray0.length);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "#root");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(5, charArrayWriter0.size());
      assertEquals("#root", charArrayWriter0.toString());
      assertEquals(5, charArrayWriter1.size());
      assertEquals("#root", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      
      CharArrayWriter charArrayWriter2 = document1.html(charArrayWriter0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertFalse(element0.equals((Object)element2));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root\n<html>\n <head></head>\n <body>\n  Tag name must not be empty.\n </body>\n</html>", charArrayWriter0.toString());
      assertEquals(82, charArrayWriter0.size());
      assertEquals("#root\n<html>\n <head></head>\n <body>\n  Tag name must not be empty.\n </body>\n</html>", charArrayWriter2.toString());
      assertEquals(82, charArrayWriter2.size());
      assertNotNull(charArrayWriter2);
      
      DataNode dataNode0 = DataNode.createFromEncoded("x u", "value");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      Document document3 = (Document)document0.doClone(dataNode0);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document3.location());
      assertEquals("Tag name must not be empty.", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertNotNull(uS_ASCII0);
      
      boolean boolean0 = Charset.isSupported("html");
      assertFalse(boolean0);
      
      Set<String> set0 = uS_ASCII0.aliases();
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("html"));
      
      Document document4 = (Document)document2.classNames(set0);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(element0, element2);
      assertSame(element0, element1);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("Tag name must not be empty.", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Tag name must not be empty.", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertNotNull(document4);
      assertFalse(set0.contains("html"));
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "IJMxShN!4UU@DdB4";
      Document document0 = new Document("IJMxShN!4UU@DdB4");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string1 = "Q6";
      Locale locale0 = Locale.forLanguageTag("Q6");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      
      String string2 = document0.ownText();
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(string2);
      assertEquals("", string2);
      
      Elements elements0 = document0.children();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element0 = document0.appendElement("Q6");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q6", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertEquals("q6", element0.tagName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Document document1 = element0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("q6", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertEquals("q6", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("IJMxShN!4UU@DdB4", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("IJMxShN!4UU@DdB4", document1.baseUri());
      assertNotNull(document1);
      
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        document1.insertChildren((-1226), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = element0.children();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      boolean boolean0 = element0.hasClass("");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertFalse(boolean0);
      
      Elements elements1 = document0.siblingElements();
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("w", parseSettings0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("w", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("w", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("'%D{4#0JaZwlcdf");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Map<String, String> map0 = attributes0.dataset();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      attributes0.removeIgnoreCase("");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.put("'%D{4#0JaZwlcdf", false);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      Element element1 = new Element(tag0, "", attributes0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("w", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("w", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("w", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("w", element1.tagName());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      
      int int0 = element0.elementSiblingIndex();
      assertNotSame(element0, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = new Document("value");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, int0);
      
      String string0 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(118);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(118, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(118, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(118, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertNotNull(document_OutputSettings4);
      
      Document document2 = document1.outputSettings(document_OutputSettings4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(118, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(118, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("value", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings3.indentAmount(0);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertEquals(0, document_OutputSettings5.indentAmount());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings5.escapeMode());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertNotNull(document_OutputSettings5);
      
      Elements elements0 = document1.getElementsByIndexEquals(0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      
      Document document3 = document0.normalise();
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("value", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("value", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      
      Document document4 = document3.clone();
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("value", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("value", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("value", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("value", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(document4);
      
      Elements elements1 = document4.getElementsContainingText(" 8vkG1v*Tp/musx");
      assertNotSame(elements1, elements0);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("value", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("value", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("value", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("value", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertNotNull(elements1);
      
      List<DataNode> list0 = document2.dataNodes();
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("value", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(0, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("value", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(list0);
      
      int int1 = document4.elementSiblingIndex();
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertFalse(document0.equals((Object)document4));
      assertTrue(int1 == int0);
      assertFalse(document3.equals((Object)document4));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("value", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("value", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("value", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("value", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("yNd7I.JPz3p;+PSECd", "yNd7I.JPz3p;+PSECd");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("yNd7I.JPz3p;+PSECd", (-686));
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Node node0 = document0.previousSibling();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNull(node0);
      
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertNotNull(evaluator_MatchesOwn0);
      
      String string0 = evaluator_MatchesOwn0.toString();
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertNotNull(string0);
      assertEquals(":matchesOwn(yNd7I.JPz3p;+PSECd)", string0);
      
      boolean boolean0 = document0.is((Evaluator) evaluator_MatchesOwn0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.html("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document document2 = document1.normalise();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.location());
      assertNotNull(document2);
      
      Set<String> set0 = document1.classNames();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("yNd7I.JPz3p;+PSECd"));
      
      Document document3 = (Document)document2.prependChild(document0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.location());
      assertEquals("yNd7I.JPz3p;+PSECd", document3.location());
      assertEquals("yNd7I.JPz3p;+PSECd", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      
      Document document4 = (Document)document1.after((Node) document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.location());
      assertEquals("yNd7I.JPz3p;+PSECd", document3.location());
      assertEquals("yNd7I.JPz3p;+PSECd", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document4.location());
      assertNotNull(document4);
      
      String string1 = document0.val();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document document5 = (Document)document3.appendTo(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document5, document4);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.location());
      assertEquals("yNd7I.JPz3p;+PSECd", document3.location());
      assertEquals("yNd7I.JPz3p;+PSECd", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document5.baseUri());
      assertEquals(2, document5.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document5.location());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = element0.children();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = element0.hasClass("");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(boolean0);
      
      Elements elements1 = element0.siblingElements();
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("YLc<%jkY", parseSettings0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("YLc<%jkY", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertEquals("YLc<%jkY", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertNotNull(tag0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(833);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter1.size());
      assertEquals("", charArrayWriter1.toString());
      assertNotNull(charArrayWriter1);
      
      CharArrayWriter charArrayWriter2 = charArrayWriter0.append('{');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertEquals("{", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals(1, charArrayWriter2.size());
      assertEquals("{", charArrayWriter2.toString());
      assertNotNull(charArrayWriter2);
      
      CharArrayWriter charArrayWriter3 = document0.html(charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter3);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter3);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertSame(charArrayWriter3, charArrayWriter2);
      assertSame(charArrayWriter3, charArrayWriter1);
      assertSame(charArrayWriter3, charArrayWriter0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(46, charArrayWriter0.size());
      assertEquals("{\n<html>\n <head></head>\n <body></body>\n</html>", charArrayWriter0.toString());
      assertEquals(46, charArrayWriter2.size());
      assertEquals("{\n<html>\n <head></head>\n <body></body>\n</html>", charArrayWriter2.toString());
      assertEquals("{\n<html>\n <head></head>\n <body></body>\n</html>", charArrayWriter3.toString());
      assertEquals(46, charArrayWriter3.size());
      assertNotNull(charArrayWriter3);
      
      Document document1 = (Document)document0.doClone(element0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      assertEquals("US-ASCII", uS_ASCII0.toString());
      assertTrue(uS_ASCII0.canEncode());
      assertEquals("US-ASCII", uS_ASCII0.displayName());
      assertEquals("US-ASCII", uS_ASCII0.name());
      assertTrue(uS_ASCII0.isRegistered());
      assertNotNull(uS_ASCII0);
      
      // Undeclared exception!
      try { 
        Charset.isSupported("#root");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #root
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Gnc1+/u/iRf/% ");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("Gnc1+/u/iRf/%", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Gnc1+/u/iRf/%", tag0.toString());
      assertNotNull(tag0);
      
      Tag tag1 = Tag.valueOf("Gnc1+/u/iRf/% ");
      assertNotSame(tag1, tag0);
      assertTrue(tag1.equals((Object)tag0));
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isSelfClosing());
      assertEquals("Gnc1+/u/iRf/%", tag1.getName());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.isInline());
      assertFalse(tag1.preserveWhitespace());
      assertEquals("Gnc1+/u/iRf/%", tag1.toString());
      assertNotNull(tag1);
      
      Tag tag2 = Tag.valueOf("Gnc1+/u/iRf/% ");
      assertNotSame(tag2, tag1);
      assertNotSame(tag2, tag0);
      assertTrue(tag2.equals((Object)tag1));
      assertTrue(tag2.equals((Object)tag0));
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.isSelfClosing());
      assertEquals("Gnc1+/u/iRf/%", tag2.toString());
      assertFalse(tag2.canContainBlock());
      assertTrue(tag2.isInline());
      assertFalse(tag2.isBlock());
      assertFalse(tag2.isEmpty());
      assertFalse(tag2.preserveWhitespace());
      assertTrue(tag2.formatAsBlock());
      assertFalse(tag2.isKnownTag());
      assertFalse(tag2.isData());
      assertFalse(tag2.isFormListed());
      assertEquals("Gnc1+/u/iRf/%", tag2.getName());
      assertNotNull(tag2);
      
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$IsOnlyChild");
      assertTrue(tag0.equals((Object)tag1));
      assertTrue(tag0.equals((Object)tag2));
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("Gnc1+/u/iRf/%", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Gnc1+/u/iRf/%", tag0.toString());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("Gnc1+/u/iRf/%", element0.tagName());
      assertEquals("Gnc1+/u/iRf/%", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = "";
      Element element1 = element0.text("org.jsoup.nodes.Element$1");
      assertNotSame(tag0, tag2);
      assertNotSame(tag0, tag1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertTrue(tag0.equals((Object)tag1));
      assertTrue(tag0.equals((Object)tag2));
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("Gnc1+/u/iRf/%", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Gnc1+/u/iRf/%", tag0.toString());
      assertFalse(element0.hasParent());
      assertEquals("Gnc1+/u/iRf/%", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Gnc1+/u/iRf/%", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", element0.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Gnc1+/u/iRf/%", element1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IsOnlyChild", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("Gnc1+/u/iRf/%", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        element0.wrap("Gnc1+/u/iRf/% ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = " > ";
      Element element0 = new Element(" > ");
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertNotNull(element0);
      
      TextNode textNode0 = TextNode.createFromEncoded(" > ");
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      Element element1 = new Element("head");
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      
      Element element2 = element0.append("uKF");
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.hasParent());
      assertEquals(">", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(">", element2.nodeName());
      assertNotNull(element2);
      
      String string1 = element0.absUrl("Gnc1+/u/iRf/%");
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = element0.html();
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertNotNull(string2);
      assertEquals("uKF", string2);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Element element3 = element2.prepend("W%`4*!?3JM4@");
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertSame(element3, element0);
      assertSame(element3, element2);
      assertNotSame(element3, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertEquals(2, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.hasParent());
      assertEquals(">", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(">", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertEquals(">", element3.tagName());
      assertEquals(2, element3.childNodeSize());
      assertEquals("", element3.baseUri());
      assertFalse(element3.hasParent());
      assertEquals(">", element3.nodeName());
      assertFalse(element3.isBlock());
      assertNotNull(element3);
      
      element2.setParentNode(element0);
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(2, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(">", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(">", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      
      Elements elements0 = element2.getElementsByAttributeValueStarting("Gnc1+/u/iRf/%", "Gnc1+/u/iRf/%");
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(2, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(">", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(">", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element4 = element2.firstElementSibling();
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(2, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals("", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(">", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(">", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      assertNull(element4);
      
      List<DataNode> list0 = element1.dataNodes();
      assertNotSame(element1, element2);
      assertNotSame(element1, element3);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Element element5 = element0.addClass("h%I#:7w ");
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element0, element5);
      assertSame(element5, element0);
      assertSame(element5, element2);
      assertNotSame(element5, element1);
      assertSame(element5, element3);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element5.equals((Object)element1));
      assertEquals(2, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals(">", element5.nodeName());
      assertTrue(element5.hasParent());
      assertEquals(2, element5.childNodeSize());
      assertEquals(0, element5.siblingIndex());
      assertEquals("", element5.baseUri());
      assertFalse(element5.isBlock());
      assertEquals(">", element5.tagName());
      assertNotNull(element5);
      
      element0.doSetBaseUri((String) null);
      assertNotSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element0, element5);
      assertFalse(element0.equals((Object)element1));
      assertEquals(2, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNull(element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      
      // Undeclared exception!
      try { 
        element5.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = new Document("value");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      String string0 = document1.ownText();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Elements elements0 = document0.children();
      assertSame(document0, document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document2 = document0.normalise();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("value", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      // Undeclared exception!
      try { 
        document2.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("yNd7I.JPz3p;+PSECd", "yNd7I.JPz3p;+PSECd");
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      int int0 = (-686);
      Pattern pattern0 = Pattern.compile("yNd7I.JPz3p;+PSECd", (-686));
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Node node0 = document0.previousSibling();
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNull(node0);
      
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertNotNull(evaluator_MatchesOwn0);
      
      String string0 = evaluator_MatchesOwn0.toString();
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertNotNull(string0);
      assertEquals(":matchesOwn(yNd7I.JPz3p;+PSECd)", string0);
      
      boolean boolean0 = document0.is((Evaluator) evaluator_MatchesOwn0);
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.html("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.removeClass("numeric reference with no numerals");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      String string1 = document0.baseUri();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(string1);
      assertEquals("yNd7I.JPz3p;+PSECd", string1);
      
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-686));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -686
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = new Document("value");
      assertEquals("value", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, int0);
      
      String string0 = document1.className();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = document0.className();
      assertSame(document0, document1);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertNotNull(string1);
      assertEquals("", string1);
      
      Document document2 = (Document)document0.text("jBv_Or9d@wXL-=,y");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Pattern pattern0 = Pattern.compile("value");
      assertEquals(0, pattern0.flags());
      assertEquals("value", pattern0.toString());
      assertEquals("value", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document1.getElementsMatchingOwnText(pattern0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, pattern0.flags());
      assertEquals("value", pattern0.toString());
      assertEquals("value", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Map<String, String> map0 = document1.dataset();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("value", document0.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Document document3 = new Document("textarea");
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("textarea", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("textarea", document3.location());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "jBv_Or9d@wXL-=,y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      Charset charset0 = document0.charset();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      List<Node> list0 = parser1.parseFragmentInput("figure", document0, "figure");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.charset(charset0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.prettyPrint(false);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertNotNull(document_OutputSettings3);
      
      Document document2 = document1.outputSettings(document_OutputSettings3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter1);
      
      document2.outerHtmlHead(stringWriter1, 0, document_OutputSettings2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("\n<#root>", stringWriter0.toString());
      assertEquals("\n<#root>", stringWriter1.toString());
      
      List<Node> list1 = Parser.parseXmlFragment("html", "");
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      // Undeclared exception!
      try { 
        document2.after((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = "org.jsoup.select.Collector$FirstFinder";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8L}'q/D?cXdFOny");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jsoup.select.Collector$FirstFinder");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Tag tag0 = Tag.valueOf("org.jsoup.select.Collector$FirstFinder");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.toString());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      boolean boolean3 = true;
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      Element element0 = new Element(tag0, "org.jsoup.select.Collector$FirstFinder", (Attributes) null);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.toString());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.nodeName());
      assertNotNull(element0);
      
      Map<String, String> map0 = element0.dataset();
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.toString());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.nodeName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Elements elements0 = element0.getElementsByAttribute("s+");
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.toString());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Tag tag1 = Tag.valueOf("8L}'q/D?cXdFOny");
      assertNotSame(tag1, tag0);
      assertFalse(tag1.equals((Object)tag0));
      assertFalse(tag1.isData());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertEquals("8L}'q/D?cXdFOny", tag1.toString());
      assertEquals("8L}'q/D?cXdFOny", tag1.getName());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.preserveWhitespace());
      assertNotNull(tag1);
      
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Element element1 = (Element)element0.filter(nodeFilter0);
      assertNotSame(tag0, tag1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.toString());
      assertEquals("org.jsoup.select.Collector$FirstFinder", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element1.nodeName());
      assertEquals("org.jsoup.select.Collector$FirstFinder", element1.baseUri());
      assertNotNull(element1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        element0.after("s+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = new Document("IJMxShN!4UU@DdB4");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Locale locale0 = Locale.forLanguageTag("Q6");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale1.clone();
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertTrue(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Language());
      assertNotNull(locale2);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale3 = Locale.JAPANESE;
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertEquals("", locale3.getISO3Country());
      assertEquals("ja", locale3.getLanguage());
      assertEquals("jpn", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getCountry());
      assertEquals("ja", locale3.toString());
      assertNotNull(locale3);
      
      Set<String> set0 = locale3.getUnicodeLocaleAttributes();
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertEquals("", locale3.getISO3Country());
      assertEquals("ja", locale3.getLanguage());
      assertEquals("jpn", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getCountry());
      assertEquals("ja", locale3.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("Q6"));
      
      Locale.setDefault(locale_Category0, locale3);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertEquals("", locale3.getISO3Country());
      assertEquals("ja", locale3.getLanguage());
      assertEquals("jpn", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getCountry());
      assertEquals("ja", locale3.toString());
      
      String string0 = locale0.getDisplayScript(locale1);
      assertNotSame(locale0, locale3);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale3);
      assertFalse(locale0.equals((Object)locale3));
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale3));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Set<String> set1 = locale1.getUnicodeLocaleAttributes();
      assertNotSame(locale0, locale3);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale3);
      assertSame(set1, set0);
      assertFalse(locale0.equals((Object)locale3));
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale3));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      assertFalse(set1.contains(string0));
      
      Elements elements0 = document0.getElementsMatchingOwnText("IJMxShN!4UU@DdB4");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parse("yNd7I.JPz3p;+PSECd", "yNd7I.JPz3p;+PSECd");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("yNd7I.JPz3p;+PSECd", (-686));
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Node node0 = document0.previousSibling();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNull(node0);
      
      Locale locale0 = new Locale("Gnc1+/u/iRf/%", "<ksQHK%");
      assertEquals("", locale0.getVariant());
      assertEquals("gnc1+/u/irf/%_<KSQHK%", locale0.toString());
      assertEquals("<KSQHK%", locale0.getCountry());
      assertEquals("gnc1+/u/irf/%", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("gnc1+/u/irf/%_<KSQHK%", locale0.toString());
      assertEquals("<KSQHK%", locale0.getCountry());
      assertEquals("gnc1+/u/irf/%", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("yNd7I.JPz3p;+PSECd"));
      
      Document document1 = (Document)document0.classNames(set0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", locale0.getVariant());
      assertEquals("gnc1+/u/irf/%_<KSQHK%", locale0.toString());
      assertEquals("<KSQHK%", locale0.getCountry());
      assertEquals("gnc1+/u/irf/%", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertFalse(set0.contains("yNd7I.JPz3p;+PSECd"));
      
      Element element0 = document1.shallowClone();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", locale0.getVariant());
      assertEquals("gnc1+/u/irf/%_<KSQHK%", locale0.toString());
      assertEquals("<KSQHK%", locale0.getCountry());
      assertEquals("gnc1+/u/irf/%", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", element0.baseUri());
      assertNotNull(element0);
      assertFalse(set0.contains("yNd7I.JPz3p;+PSECd"));
      
      Document document2 = (Document)document0.appendTo(document1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertEquals("", locale0.getVariant());
      assertEquals("gnc1+/u/irf/%_<KSQHK%", locale0.toString());
      assertEquals("<KSQHK%", locale0.getCountry());
      assertEquals("gnc1+/u/irf/%", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.location());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.baseUri());
      assertNotNull(document2);
      assertFalse(set0.contains("yNd7I.JPz3p;+PSECd"));
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = new Document("IJMxShN!4UU@DdB4");
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Locale locale0 = Locale.forLanguageTag("Q6");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertTrue(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.toString());
      assertNotNull(locale2);
      
      String string0 = locale0.getDisplayScript(locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("Q6"));
      
      Document document1 = (Document)document0.classNames(set0);
      assertSame(document0, document1);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertSame(document1, document0);
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertFalse(set0.contains("Q6"));
      
      Pattern pattern0 = Pattern.compile("", 2147483645);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(2147483645, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("", pattern0);
      assertSame(document0, document1);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertSame(document1, document0);
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(2147483645, pattern0.flags());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertFalse(set0.contains(""));
      
      Element element0 = document1.shallowClone();
      assertSame(document0, document1);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertSame(document1, document0);
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals("IJMxShN!4UU@DdB4", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("IJMxShN!4UU@DdB4", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("IJMxShN!4UU@DdB4", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("IJMxShN!4UU@DdB4", element0.baseUri());
      assertNotNull(element0);
      assertFalse(set0.contains(""));
      
      // Undeclared exception!
      try { 
        document1.text("L)<~ G;'r@.?}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = new Document("value");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale1.clone();
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertTrue(locale2.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale0));
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("ko", locale2.toString());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("ko", locale2.getLanguage());
      assertNotNull(locale2);
      
      String string0 = locale1.getDisplayScript(locale0);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("value"));
      
      Element element0 = document0.createElement("value");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("value", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("value", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.shallowClone();
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("value", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("value", element0.nodeName());
      assertEquals("value", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("value", element1.nodeName());
      assertEquals("value", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      String string1 = element1.toString();
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("value", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("value", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("value", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("value", element0.nodeName());
      assertEquals("value", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("value", element1.nodeName());
      assertEquals("value", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(string1);
      assertEquals("<value></value>", string1);
      
      // Undeclared exception!
      try { 
        element0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = "2L1_K4g2C\".x$yGi_,";
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertNotNull(element1);
      
      element0.setParentNode(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      
      Document document0 = new Document("");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string1 = "";
      Element element2 = element0.prependText("");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("", element2.baseUri());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertFalse(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
      
      Elements elements0 = element0.getElementsContainingText("2L1_K4g2C\".x$yGi_,");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertEquals(1, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.prepend("{`6Y0x");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      element1.setParentNode(document0);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(document0, document1);
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements1 = element0.getElementsByAttributeValueStarting("T0-hqH'u,/O-~YA", "T0-hqH'u,/O-~YA");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(elements1, elements0);
      assertTrue(elements1.equals((Object)elements0));
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertNotNull(elements1);
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Charset charset0 = document0.charset();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      List<Node> list0 = parser1.parseFragmentInput("figure", document0, "figure");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.charset(charset0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      document0.doSetBaseUri("html");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document2 = (Document)document0.html("html");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("html", document2.baseUri());
      assertEquals("", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      String string0 = document1.baseUri();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-894));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -894
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Tag tag0 = Tag.valueOf("G\";fHHg<[aj/5s'suw");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("G\";fHHg<[aj/5s'suw", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("G\";fHHg<[aj/5s'suw", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "^\u0004y7L}OQ6p'c", attributes0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("G\";fHHg<[aj/5s'suw", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("G\";fHHg<[aj/5s'suw", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("^\u0004y7L}OQ6p'c", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("G\";fHHg<[aj/5s'suw", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("G\";fHHg<[aj/5s'suw", formElement0.tagName());
      assertNotNull(formElement0);
      
      Element element0 = new Element("W%`4*!?3JM4@");
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("W%`4*!?3JM4@", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("W%`4*!?3JM4@", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = "uKF";
      Element element1 = element0.append("uKF");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("W%`4*!?3JM4@", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("W%`4*!?3JM4@", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("W%`4*!?3JM4@", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("W%`4*!?3JM4@", element1.tagName());
      assertNotNull(element1);
      
      String string1 = element1.absUrl("uKF");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("W%`4*!?3JM4@", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("W%`4*!?3JM4@", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("W%`4*!?3JM4@", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("W%`4*!?3JM4@", element1.tagName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = element0.html();
      assertSame(element0, element1);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("W%`4*!?3JM4@", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("W%`4*!?3JM4@", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertNotNull(string2);
      assertEquals("uKF", string2);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Element element2 = element1.prepend("br");
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("W%`4*!?3JM4@", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("W%`4*!?3JM4@", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("W%`4*!?3JM4@", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("W%`4*!?3JM4@", element1.tagName());
      assertEquals("W%`4*!?3JM4@", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertEquals("W%`4*!?3JM4@", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertNotNull(element2);
      
      formElement0.setParentNode(element1);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("G\";fHHg<[aj/5s'suw", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("G\";fHHg<[aj/5s'suw", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals("^\u0004y7L}OQ6p'c", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("G\";fHHg<[aj/5s'suw", formElement0.nodeName());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("G\";fHHg<[aj/5s'suw", formElement0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("W%`4*!?3JM4@", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("W%`4*!?3JM4@", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("W%`4*!?3JM4@", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("W%`4*!?3JM4@", element1.tagName());
      
      // Undeclared exception!
      try { 
        element2.getElementsByAttributeValueStarting("rjFtC/CeIcE`dO:8,0", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = "2L1_K4g2C\".x$yGi_,";
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.html("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element1.tagName());
      assertNotNull(element1);
      
      Element element2 = element0.attr("2L1_K4g2C\".x$yGi_,", "");
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element0.nodeName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("2L1_K4g2C\".x$yGi_,", element2.tagName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertNotNull(element2);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = new Document("value");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(118);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      
      Document document2 = document1.outputSettings(document_OutputSettings2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("value", document0.baseUri());
      assertEquals("value", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("value", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(118, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(118, document_OutputSettings1.indentAmount());
      assertEquals(118, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("value", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Document document3 = Parser.parseBodyFragment("body", "ygD.+3\"sN:WCbCdp\"!2");
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("ygD.+3\"sN:WCbCdp\"!2", document3.location());
      assertEquals("ygD.+3\"sN:WCbCdp\"!2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      
      Elements elements0 = document3.getElementsMatchingOwnText("body");
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("ygD.+3\"sN:WCbCdp\"!2", document3.location());
      assertEquals("ygD.+3\"sN:WCbCdp\"!2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document3;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1674), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("yNd7I.JPz3p;+PSECd", "yNd7I.JPz3p;+PSECd");
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("yNd7I.JPz3p;+PSECd", (-686));
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals((-686), pattern0.flags());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertNotNull(pattern0);
      
      Node node0 = document0.previousSibling();
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNull(node0);
      
      int int0 = (-936);
      Elements elements0 = document0.getElementsByIndexEquals((-936));
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Elements elements1 = document0.getElementsContainingText("yNd7I.JPz3p;+PSECd");
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements1.isEmpty());
      assertEquals(3, elements1.size());
      assertNotNull(elements1);
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = element0.children();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = element0.hasClass("");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertFalse(boolean0);
      
      Elements elements1 = element0.siblingElements();
      assertNotSame(elements1, elements0);
      assertFalse(elements1.equals((Object)elements0));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertNotNull(elements1);
      
      String string0 = "YLc<%jkY";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("YLc<%jkY", parseSettings0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("YLc<%jkY", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("YLc<%jkY", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("'%D{4#0JaZwlcdf");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      // Undeclared exception!
      try { 
        attributes0.put((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      
      Document document2 = document1.ownerDocument();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      List<DataNode> list0 = document0.dataNodes();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document3 = (Document)document1.addClass("");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      
      Document document4 = Parser.parseBodyFragment(":>&atfg(L", "");
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertNotNull(document4);
      
      document4.doSetBaseUri("");
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      
      Document document5 = (Document)document4.html("org.jsoup.nodes.PseudoTextElement");
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertSame(document5, document4);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("", document4.location());
      assertEquals("", document5.location());
      assertEquals("", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      
      String string0 = document3.baseUri();
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document3, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-149));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -149
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "");
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Charset charset0 = document0.charset();
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '5';
      charArray0[1] = 'u';
      charArray0[2] = '/';
      charArray0[3] = 'u';
      charArray0[4] = '|';
      charArray0[5] = 'u';
      charArray0[6] = 'u';
      charArray0[7] = '/';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("5u/u|uu/", charBuffer0.toString());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'5', 'u', '/', 'u', '|', 'u', 'u', '/'}, charArray0);
      
      Document.OutputSettings document_OutputSettings2 = new Document.OutputSettings();
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.indentAmount(915);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(915, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(915, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings3);
      
      // Undeclared exception!
      try { 
        document1.outerHtmlTail(charBuffer0, (-2052), document_OutputSettings3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = "Tag name must not be empty.";
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Document document1 = element0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Element element1 = (Element)element0.clearAttributes();
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("Tag name must not be empty.", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsByAttributeValueMatching("Tag name must not be empty.", "Tag name must not be empty.");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = document0.data();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        document2.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1", "\"UJ$");
      assertFalse(document0.hasParent());
      assertEquals("\"UJ$", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("\"UJ$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("\"UJ$", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("\"UJ$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("\"UJ$", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("\"UJ$", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Pattern pattern0 = Pattern.compile("", (-497));
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals((-497), pattern0.flags());
      assertNotNull(pattern0);
      
      Document document2 = Parser.parseBodyFragmentRelaxed("1", "Gnc1+/u/iRf/%");
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("Gnc1+/u/iRf/%", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Gnc1+/u/iRf/%", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      
      Element element0 = document2.body();
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals("Gnc1+/u/iRf/%", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("Gnc1+/u/iRf/%", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Gnc1+/u/iRf/%", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parse("yNd7I.JPz3p;+PSECd", "yNd7I.JPz3p;+PSECd");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("yNd7I.JPz3p;+PSECd", (-686));
      assertEquals((-686), pattern0.flags());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals((-686), pattern0.flags());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Node node0 = document0.previousSibling();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNull(node0);
      
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      assertEquals((-686), pattern0.flags());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertNotNull(evaluator_MatchesOwn0);
      
      String string0 = evaluator_MatchesOwn0.toString();
      assertEquals((-686), pattern0.flags());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertNotNull(string0);
      assertEquals(":matchesOwn(yNd7I.JPz3p;+PSECd)", string0);
      
      boolean boolean0 = document0.is((Evaluator) evaluator_MatchesOwn0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals((-686), pattern0.flags());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.toString());
      assertEquals("yNd7I.JPz3p;+PSECd", pattern0.pattern());
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.html("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.removeClass("numeric reference with no numerals");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.baseUri());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Set<String> set0 = document1.classNames();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("yNd7I.JPz3p;+PSECd"));
      
      Document document3 = (Document)document2.prependChild(document0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("yNd7I.JPz3p;+PSECd", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.baseUri());
      assertEquals("yNd7I.JPz3p;+PSECd", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document2.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("yNd7I.JPz3p;+PSECd", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("yNd7I.JPz3p;+PSECd", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document1.after((Node) document3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = "Tag name must not be empty.";
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Document document1 = element0.ownerDocument();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Element element1 = (Element)element0.clearAttributes();
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("Tag name must not be empty.", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      
      Elements elements0 = document2.getElementsByAttributeValueMatching("Tag name must not be empty.", "Tag name must not be empty.");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        document2.insertChildren(32768, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "(& >!4^g43:f\"MM%q";
      Document document0 = Parser.parse("(& >!4^g43:f\"MM%q", "[vztJKHD #4C{jJy/");
      assertEquals("[vztJKHD #4C{jJy/", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("[vztJKHD #4C{jJy/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string1 = "j-Smyq$fCj9w`SsGs\\u";
      Element element0 = document0.body();
      assertEquals("[vztJKHD #4C{jJy/", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("[vztJKHD #4C{jJy/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("[vztJKHD #4C{jJy/", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings1.prepareEncoder();
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.indentAmount(2942);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(2942, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(2942, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertNotNull(document_OutputSettings3);
      
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings2.escapeMode(entities_EscapeMode1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(entities_EscapeMode0, entities_EscapeMode1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(entities_EscapeMode1, entities_EscapeMode0);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertFalse(entities_EscapeMode0.equals((Object)entities_EscapeMode1));
      assertFalse(entities_EscapeMode1.equals((Object)entities_EscapeMode0));
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(2942, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(2942, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(2942, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(2942, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertNotNull(document_OutputSettings4);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings2.clone();
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(entities_EscapeMode0, entities_EscapeMode1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertFalse(entities_EscapeMode0.equals((Object)entities_EscapeMode1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(2942, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(2942, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(2942, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings5.escapeMode());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertEquals(2942, document_OutputSettings5.indentAmount());
      assertNotNull(document_OutputSettings5);
      
      CharsetEncoder charsetEncoder1 = document_OutputSettings5.prepareEncoder();
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(entities_EscapeMode0, entities_EscapeMode1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(charsetEncoder1, charsetEncoder0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(entities_EscapeMode0.equals((Object)entities_EscapeMode1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(charsetEncoder1.equals((Object)charsetEncoder0));
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(2942, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(2942, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(2942, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings5.escapeMode());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertEquals(2942, document_OutputSettings5.indentAmount());
      assertEquals(3.0F, charsetEncoder1.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder1.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder1);
      
      Document document1 = document0.outputSettings(document_OutputSettings5);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(entities_EscapeMode0, entities_EscapeMode1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(entities_EscapeMode0.equals((Object)entities_EscapeMode1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(2942, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(2942, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(2942, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings5.escapeMode());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertEquals(2942, document_OutputSettings5.indentAmount());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      String string1 = document1.className();
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(entities_EscapeMode0, entities_EscapeMode1);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document1, document0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(entities_EscapeMode0.equals((Object)entities_EscapeMode1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(2942, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(2942, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(2942, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings5.escapeMode());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertEquals(2942, document_OutputSettings5.indentAmount());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        document0.replaceChild(document1, document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = "Q)wj(evgE!de";
      Document document0 = Parser.parse("Q)wj(evgE!de", "Q)wj(evgE!de");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Q)wj(evgE!de", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Q)wj(evgE!de", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.insertChildren(28, (Collection<? extends Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "uti%5rK~,3?n";
      String string1 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("uti%5rK~,3?n", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = "1";
      Document document0 = Parser.parseBodyFragment("1", "\"UJ$");
      Document document1 = document0.ownerDocument();
      Pattern pattern0 = Pattern.compile("", (-497));
      pattern0.matcher("1");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.setParentNode(document1);
      pattern0.asPredicate();
      document0.getElementsMatchingOwnText(pattern0);
      document1.ownText();
      document1.children();
      // Undeclared exception!
      document1.appendElement("Vq&7^{n");
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = "[C)<Z98wz(s*q7\"!.@";
      Element element0 = new Element("[C)<Z98wz(s*q7\"!.@");
      CDataNode cDataNode0 = new CDataNode("[C)<Z98wz(s*q7\"!.@");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        element0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-}C6*TIH++X9K<e", "-}C6*TIH++X9K<e");
      Element element0 = document0.createElement("-}C6*TIH++X9K<e");
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'o';
      charArray0[2] = '/';
      charArray0[3] = 'u';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, 915, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = new Document("f%");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringWriter0.append('k');
      document1.html(stringWriter0);
      document1.getElementsContainingText("f%");
      document_OutputSettings2.clone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "utf");
      document_OutputSettings3.escapeMode(entities_EscapeMode0);
      document1.html();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.appendCodePoint(137);
      document1.outerHtmlHead(stringBuffer0, (-510), document_OutputSettings2);
      document1.hasClass("\"Bgh_'+O");
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Tag tag0 = Tag.valueOf("G\";fHHg<[aj/5s'suw");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "^\u0004y7L}OQ6p'c", attributes0);
      String string0 = "W%`4*!?3JM4@";
      Element element0 = new Element("W%`4*!?3JM4@");
      Element element1 = element0.append("uKF");
      element1.absUrl("uKF");
      element0.html();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeTag("7v?}jgPe0JnK6EP#;");
      Tag.valueOf("-tMa?8");
      Tag.valueOf("G\";fHHg<[aj/5s'suw", parseSettings0);
      formElement0.data();
      formElement0.addElement(element0);
      // Undeclared exception!
      try { 
        element1.childNode(24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 24, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = "2L1_K4g2C\".x$yGi_,";
      Element element0 = new Element("2L1_K4g2C\".x$yGi_,");
      Element element1 = element0.html("");
      element0.setParentNode(element1);
      // Undeclared exception!
      element0.attr("2L1_K4g2C\".x$yGi_,", "");
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Tag tag0 = Tag.valueOf("G\";fHHg<[aj/5s'suw");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "^\u0004y7L}OQ6p'c", attributes0);
      Element element0 = new Element("W%`4*!?3JM4@");
      Element element1 = element0.append("uKF");
      element1.absUrl("uKF");
      element0.html();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeTag("7v?}jgPe0JnK6EP#;");
      Tag.valueOf("-tMa?8");
      Tag.valueOf("G\";fHHg<[aj/5s'suw", parseSettings0);
      formElement0.data();
      formElement0.addElement(element0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      attributes0.forEach(consumer0);
      // Undeclared exception!
      try { 
        element1.childNode(24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 24, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = new Document("IJMxShN!4UU@DdB4");
      Locale locale0 = Locale.forLanguageTag("Q6");
      locale0.stripExtensions();
      document0.ownText();
      document0.children();
      Element element0 = document0.appendElement("Q6");
      Document document1 = element0.ownerDocument();
      Element element1 = document1.createElement("5de");
      element1.childNodesAsArray();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "");
      document1.html(charArrayWriter1);
      document0.doClone(document1);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Charset.isSupported("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "big";
      String string1 = "#Rp`!Z85x";
      Document document0 = Parser.parse("big", "#Rp`!Z85x");
      Document document1 = document0.clone();
      Element element0 = document0.doClone(document1);
      Element element1 = element0.shallowClone();
      element1.siblingNodes();
      document0.nodeName();
      Pattern pattern0 = Pattern.compile("#document");
      element0.getElementsMatchingOwnText(pattern0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = "Gnc1+/u/iRf/% ";
      Tag tag0 = Tag.valueOf("Gnc1+/u/iRf/% ");
      Tag.valueOf("Gnc1+/u/iRf/% ");
      Tag.valueOf("Gnc1+/u/iRf/% ");
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$IsOnlyChild");
      element0.text("org.jsoup.nodes.Element$1");
      element0.outerHtml();
      element0.val();
      // Undeclared exception!
      try { 
        Tag.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Wg?zqC&t`[imZ@dU~F", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "Wg?zqC&t`[imZ@dU~F", (Attributes) null);
      formElement0.data();
      parseSettings0.normalizeAttribute("kbU)E'g&_gp");
      formElement0.getAllElements();
      Tag.valueOf("kbU)E'g&_gp", parseSettings0);
      formElement0.getElementsByIndexEquals(1346);
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("#", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("#", "biy\"&S!|NM Ny");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("#", true);
      FormElement formElement0 = new FormElement(tag0, "#", attributes2);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes3 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "3z<gIcbH@#wIjn%i>e", attributes3);
      FormElement formElement1 = formElement0.addElement(element0);
      // Undeclared exception!
      try { 
        formElement1.is("*IMZmAI@WL$|54WZQ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '*IMZmAI@WL$|54WZQ': unexpected token at '@WL$|54WZQ'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = " > ";
      Element element0 = new Element(" > ");
      TextNode textNode0 = TextNode.createFromEncoded(" > ");
      Element element1 = element0.appendChild(textNode0);
      element1.getElementsContainingText(" > ");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        element1.insertChildren(4863, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "Insert position out of bounds.";
      StringReader stringReader0 = new StringReader("Insert position out of bounds.");
      String string1 = "$8d>-ni]o";
      Document document0 = parser0.parseInput((Reader) stringReader0, "$8d>-ni]o");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.ownerDocument();
      document2.text("$8d>-ni]o");
      document1.childNodes();
      // Undeclared exception!
      try { 
        document1.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Document document0 = new Document("value");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document1.elementSiblingIndex();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(118);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      document1.getElementsByIndexEquals((-3255));
      Document document3 = document2.clone();
      document3.getElementsContainingText("value");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Document document0 = Parser.parse("yNd7I.JPz3p;+PSECd", "yNd7I.JPz3p;+PSECd");
      Pattern pattern0 = Pattern.compile("yNd7I.JPz3p;+PSECd", (-686));
      document0.getElementsByAttributeValueMatching("", pattern0);
      document0.previousSibling();
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Document document0 = new Document("IJMxShN!4UU@DdB4");
      Locale locale0 = Locale.forLanguageTag("Q6");
      Locale locale1 = locale0.stripExtensions();
      locale1.clone();
      locale0.getDisplayScript(locale1);
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      Element element0 = document0.classNames(set0);
      Element element1 = element0.shallowClone();
      assertEquals("IJMxShN!4UU@DdB4", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Document document0 = new Document("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.ownerDocument();
      document1.appendText("G^F^5<'bDLIak$A&`");
      Element element0 = document2.getElementById("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser1.parseInput((Reader) stringReader0, "");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Charset charset0 = document0.charset();
      parser1.parseFragmentInput("figure", document0, "figure");
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertFalse(boolean0);
      
      document0.val();
      document2.hasAttributes();
      document2.select("figure");
      assertEquals(1, document0.childNodeSize());
      assertNotSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      Element element1 = element0.lastElementSibling();
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = "}f";
      Document document0 = Parser.parseBodyFragmentRelaxed("}f", "}f");
      Element element0 = document0.appendElement("}f");
      element0.ownText();
      Element element1 = element0.doClone(document0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element1;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.addChildren(65535, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "sUH8S0X3U7VP,v \"#sh");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      // Undeclared exception!
      try { 
        document1.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document1.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
