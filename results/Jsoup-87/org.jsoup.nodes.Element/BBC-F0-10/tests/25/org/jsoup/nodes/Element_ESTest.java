/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 21:55:50 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        element0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.TextNodi", "org.jsoup.nodes.TextNodi");
      document0.addClass("org.jsoup.nodes.TextNodi");
      document0.getElementsByClass("org.jsoup.nodes.TextNodi");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7StR", "7StR");
      document0.getElementsByAttributeValueMatching("7StR", "encoding");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(" />", "*(+fJJp+#t7X[B=V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: *(+fJJp+#t7X[B=V
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "body");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7StR", "7StR");
      List<DataNode> list0 = document0.dataNodes();
      document0.insertChildren(0, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(charArrayWriter0, 62, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uuw\"vD#V", "uuw\"vD#V");
      StringWriter stringWriter0 = new StringWriter(4245);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(stringBuffer0, 4245, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = new Document("gb/pM}Z@wS'?9\"9x");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nods.yextNde", "org.jsoup.nods.yextNde");
      Document document1 = (Document)document0.doClone(document0);
      document1.wrap("o");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("@gSOJXz5j (~sKFp");
      Element element0 = document0.head();
      element0.wrap("#\"_OW[kB X.KVC");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.wrap("org.jsoup.nodes.TextNode");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("noQuirks");
      document0.setSiblingIndex((-9));
      document0.val("noQuirks");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("scriptdataescapestart");
      Element element0 = document0.body();
      element0.val("scriptdataescapestart");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Element element0 = new Element("#doctype");
      element0.val("#doctype");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.toggleClass("CommentEndBang");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.extNode", "org.jsoup.nodes.extNode");
      Element element0 = document0.body();
      element0.text("\"-zl2pxduss");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.extNode", "org.jsoup.nodes.extNode");
      document0.text("\"-zl2pxduss");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.tagName("org.jsoup.nodes.TextNode");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Element element0 = new Element("noQuirks");
      element0.tagName("noQuirks");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = new Document("<!docttxyp");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "V0&Ekd", attributes0);
      pseudoTextElement0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("scriptdataescapestart");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element element0 = new Element("wbr");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Tag tag0 = Tag.valueOf("BaseURI must not be null");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "r6}#q-8c x2l", attributes0);
      formElement0.selectFirst("BaseURI must not be null");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      Element element0 = document0.prependElement("tr");
      element0.selectFirst("tr");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element element0 = new Element("reversed");
      element0.selectFirst("reversed");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      document0.selectFirst("[%s!=%s]");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "k0\"");
      document0.select("body");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.removeClass("\"-zl2pxduSs");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.doClone(document0);
      element0.removeClass("org.jsoup.nodes.TextNode");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.removeClass("org.jsoup.nodes.TextNode");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.prependText("%gfx>");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      document0.appendChild(document0);
      document0.prependText("!=");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "body");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf(":%s(%do)", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "body", (Attributes) null);
      CDataNode cDataNode0 = new CDataNode((String) null);
      formElement0.prependChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Element element0 = new Element("#doctype");
      element0.setSiblingIndex((-1));
      element0.prepend("#doctype");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.prepend(") ");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.TextNode");
      Element element0 = document0.doClone(document0);
      element0.prepend(") ");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ml@~a^CS+^3,x", "Ml@~a^CS+^3,x");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      document0.prependText("");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = new Document("rTf]/>i");
      document0.setParentNode(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("VaFfO[`$", "VaFfO[`$");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      element0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.createElement("<!doctype");
      document0.appendChild(element0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.extNode", "org.jsoup.nodes.extNode");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("dNA(uOYul<F>", "NiR~cW?MJ&f");
      Element element0 = document0.body();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      element0.is((Evaluator) evaluator_IsOnlyOfType0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("@rn-5&6,:r]`", "NBZ_58uLxMQ?");
      element0.is((Evaluator) evaluator_AttributeWithValueContaining0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "rfV@LuX");
      document0.is("textarea");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Element element0 = document0.head();
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("<doctype");
      document0.setSiblingIndex((-1));
      document0.html("r");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("}=]2cn;^x?#='ivH7=w");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "w@(ZOoX<.H}x", attributes0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(">[GD<Sm0", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      formElement0.html(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Element element0 = new Element("wbr");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("Z@VA f05I)]RLR5F");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uuw\"vD#V", "uuw\"vD#V");
      document0.getElementsMatchingText("uuw\"vD#V");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("yoVt8ptGwg_FC/|F&A(", "");
      Pattern pattern0 = Pattern.compile("", 0);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "k0\"");
      document0.getElementsMatchingOwnText("#root");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("Z@VA f05I)]RLR5F", "^YY");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      document0.getElementsContainingOwnText("tr");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("Z@VA f05I)]RLR5F", "^YY");
      document0.getElementsByTag(" />");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      document0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("{", "{");
      Element element0 = document0.head();
      element0.getElementsByIndexLessThan(1982);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = new Document("Z\"vMlOkCM=");
      document0.getElementsByIndexGreaterThan(4);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("yoVt8ptGwg_FC/|F&A%", "");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = new Document("Z\"vMlOkCM=");
      document0.getElementsByAttributeValueNot("j4a)", "Z\"vMlOkCM=");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("rerersd");
      document0.attr("character is not a valid unicode code point", "character is not a valid unicode code point");
      document0.getElementsByAttributeStarting("character is not a valid unicode code point");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("uew\"vd&#v", "%'VTY");
      document0.attr("(h30rVc]y48rR}N@", "section");
      document0.getElementsByAttribute("(h30rVc]y48rR}N@");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("9&^\"^_u L,");
      document0.setSiblingIndex((-1813));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uuw\"vD#V", "uuw\"vD#V");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("R6}#Q-8C X2l");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("dNA(uOYul<F>");
      Document document0 = Parser.parse("dNA(uOYul<F>", "dNA(uOYul<F>");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ml@~a^CS+^3,x", "Ml@~a^CS+^3,x");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("dNA(uOYul<F>", "NiR~cW?MJ&f");
      Element element0 = document0.body();
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("dNA(uOYul<F>", "NiR~cW?MJ&f");
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("tr", "tr");
      Element element0 = document0.addClass("tr");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tfoot", "tfoot");
      document0.toggleClass("v&`UX");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "#");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Tag tag0 = Tag.valueOf("figcaption");
      Element element0 = new Element(tag0, "figcaption");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("og&iBK}B", "og&iBK}B");
      Element element0 = document0.body();
      element0.before((Node) document0);
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.extNode", "org.jsoup.nodes.extNode");
      Element element0 = document0.prependElement("eK1]1ia*; {s1.tk");
      TextNode textNode0 = TextNode.createFromEncoded("eK1]1ia*; {s1.tk");
      element0.before((Node) textNode0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("uuw\"vD#V");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X>n$qT\nD>YMwDrW?", "X>n$qT\nD>YMwDrW?");
      Element element0 = document0.head();
      element0.before("K)`,Ll\bG{!g14q");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.createElement("<!doctype");
      document0.setParentNode(element0);
      document0.before("org.jsoup.nodes.TextNode");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("f:Bnp>Ho4)#j;");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("94E02qS{!p~", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("9&^\"^_u L,");
      document0.setSiblingIndex((-1813));
      document0.attr("", true);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "body");
      Element element0 = document0.body();
      element0.attr("br", true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("qhel6y<8k1", "qhel6y<8k1");
      DataNode dataNode0 = DataNode.createFromEncoded("qhel6y<8k1", "P-BuT");
      document0.setParentNode(dataNode0);
      document0.attr("P-BuT", false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document("");
      document0.attr(";", false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.attr("code", (String) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      element0.attr("", "split offset must not be greater than current text length");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("?6'Mw[BD%");
      Element element0 = new Element("<sY");
      document0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("?6'Mw[BD%");
      Element element0 = document0.body();
      element0.appendTo(document0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.appendText("org.jsoup.nodes.TextNode");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.appendText("6vNNYR$D-U!E>D");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      document0.appendElement("tr");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("tr");
      Element element0 = document0.prependElement("tr");
      element0.siblingIndex = (-906021636);
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.append("#root");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("7StR", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "+aL7B", attributes0);
      pseudoTextElement0.append("");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("k0\"");
      Element element0 = document0.prependElement("#root");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("tr", "tr");
      Element element0 = document0.prependElement("tr");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.TextNode", parseSettings0);
      Element element0 = new Element(tag0, "$S");
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", "f=A)PH70qTlazr~");
      Element element1 = document0.body();
      element1.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("dNA(uOYul<F>");
      Element element0 = document0.body();
      element0.after("dNA(uOYul<F>");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Document document1 = (Document)document0.doClone(document0);
      document1.after("org.jsoup.nodes.TextNode");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes:textnode");
      document0.siblingIndex = 58;
      document0.addClass("{8[44Zt");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.TextNodi", "org.jsoup.nodes.TextNodi");
      document0.setSiblingIndex((-488));
      document0.addClass("org.jsoup.nodes.TextNodi");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("tr", "tr");
      document0.tagName("tr");
      document0.addClass("{6-J'pu]2/p");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      DocumentType documentType0 = new DocumentType("", "", "");
      document0.parentNode = (Node) documentType0;
      document0.addClass("Ubt2k");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "k0\"");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.wrap("T\",'|-*cr@pn");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.createElement("<!doctype");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.wrap("<!doctype");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Tag tag0 = Tag.valueOf("|MC*Zpga");
      Element element0 = new Element(tag0, "#root");
      // Undeclared exception!
      try { 
        element0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BeforeDoctypePublicIdentifier", "BeforeDoctypePublicIdentifier");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("BeforeDoctypePublicIdentifier");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = new Document("h`g,kf5]EoYyD");
      // Undeclared exception!
      try { 
        document0.text("&!]K@'UQIU_S/v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#doctype");
      Element element0 = new Element(tag0, "#doctype");
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.extNode", "org.jsoup.nodes.extNode");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      document0.appendChild(element1);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.doClone(document0);
      document0.appendChild(element0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("Z@VA f05I)]RLR5F", "^YY");
      CDataNode cDataNode0 = new CDataNode("nPH5+pD2y~m");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("_[2|s5", "_[2|s5");
      document0.setSiblingIndex((-303));
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(")yp3wh[je*[bo2s@mvu", ")yp3wh[je*[bo2s@mvu");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("Jg");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("wbr");
      Parser parser0 = Parser.xmlParser();
      parser0.settings((ParseSettings) null);
      document0.parser(parser0);
      // Undeclared exception!
      try { 
        document0.tagName(":-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*n!2hS<", "2URydf9{%=q2;d(*#");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.createElement("org.jsoup.nodes.TextNode");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      // Undeclared exception!
      try { 
        document0.select("7-E|:_AL62");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '7-E|:_AL62': unexpected token at ':_AL62'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Document document0 = Document.createShell("</");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insertzposition out of boundh.", "Insertzposition out of boundh.");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependText("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("s}\"V@q8#t7J|1\"=jfn");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uuw\"vD#V", "uuw\"vD#V");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prependElement("uuw\"vD#V");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = new Document("'4^fdgsct(");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.prependElement("-_bverWEeP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("%Q',@Unpd9Q4Epg;m!v");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = new Document("tr");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.prepend("tr");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("body");
      TextNode textNode0 = TextNode.createFromEncoded("reversed", "reversed");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J@N=[g,!", "J@N=[g,!");
      DataNode dataNode0 = new DataNode("}`MdC~?#r");
      Document document1 = (Document)document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        document1.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("ktpi21We$", "Tag name must not be empty.");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Tag name must not be empty.", 10, 10);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 19, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("{", "{");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(12);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 12, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("hm,>m;K?<&2J8Ok");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-749), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CE=wEx", "hle41-dsz}h_x");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XHrVkg6f+hK[yR3TJ(");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-4199), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uuw\"vD#V", "uuw\"vD#V");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(8205);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 8205, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("tr", "tr");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "tr");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 69, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?6'mw[bd%");
      Element element0 = new Element(tag0, "?6'mw[bd%");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead((Appendable) null, 4, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dNA(uOYul<F>", "dNA(uOYul<F>");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "dNA(uOYul<F>");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuffer0, (-1110026255), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!40!65]v2L_", "d");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 1243, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      CDataNode cDataNode0 = new CDataNode("");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("br");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      cDataNode0.reparentChild(formElement0);
      // Undeclared exception!
      try { 
        formElement0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader(",@&/:");
      Document document0 = parser0.parseInput((Reader) stringReader0, "{&g3oj/");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("^", "^");
      CDataNode cDataNode0 = new CDataNode("BZcxp6?3jSPK-O4c<R");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("yoVt8ptGwg_FC/|F&A%", "");
      CDataNode cDataNode0 = new CDataNode("ScriptDataDoubleEscapedDash");
      document0.setParentNode(cDataNode0);
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("br", "hf.-UPPt<.U&");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_AttributeWithValueContaining0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h5z\"`lyN+j]zkK~f", "");
      // Undeclared exception!
      try { 
        document0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "script");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("script");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Comment comment0 = new Comment("org.jsoup.nodes.TextNode");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.setParentNode(xmlDeclaration0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) xmlDeclaration0;
      nodeArray0[1] = (Node) comment0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) comment0;
      nodeArray0[4] = (Node) comment0;
      nodeArray0[5] = (Node) xmlDeclaration0;
      nodeArray0[6] = (Node) comment0;
      nodeArray0[7] = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.extNode", "org.jsoup.nodes.extNode");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("#");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        element0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.setParentNode(document0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Charset charset0 = document0.charset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      // Undeclared exception!
      document0.html(outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "O&Ym");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BeforeDoctypePublicIdentifier", "BeforeDoctypePublicIdentifier");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H^R!90%,cK::)I", "org.jsoup.nodes.Element$2");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      // Undeclared exception!
      try { 
        document1.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("qhel6y<8k1", "qhel6y<8k1");
      DataNode dataNode0 = DataNode.createFromEncoded("qhel6y<8k1", "P-BuT");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        element0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Tag tag0 = Tag.valueOf(")>lWw=DCuMcg");
      CDataNode cDataNode0 = new CDataNode("xxN");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "xxN", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("tr", "L\"");
      CDataNode cDataNode0 = new CDataNode("k6ar>hdo|yv|");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("Z@VA f05I)]RLR5F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: Z@VA f05I)]RLR5F
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Comment comment0 = new Comment("org.jsoup.nodes.TextNode");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("oHNU");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7StR", "7StR");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("VaFfO[`$", "VaFfO[`$");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("VaFfO[`$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: VaFfO[`$
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Qg2zkXGIH!lHUv@", "class");
      DataNode dataNode0 = DataNode.createFromEncoded("tr", "Qg2zkXGIH!lHUv@");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("revercEeP", "revercEeP");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("revercEeP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("{", "{");
      DocumentType documentType0 = new DocumentType("{", "h&3nSps{7{5S", "{");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("h&3nSps{7{5S");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = new Document("Z@VA f05I)]RLR5F");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "body");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "DHA0)U&# ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "body");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "k0\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("{", "{");
      Element element0 = document0.head();
      element0.parentNode = (Node) document0;
      Pattern pattern0 = Pattern.compile("`w$~H7{2E5gsa", 58);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("{", pattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7StR", "7StR");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("7StR", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document("'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("yoVt8ptGwg_FC/|F&A(", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = new Document("tr");
      Element element0 = document0.prependElement("tr");
      element0.siblingIndex = (-906021636);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("tr", "org.jsoup.nodes.Element");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.doClone(document0);
      Element element1 = document0.appendChild(element0);
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueContaining("org.jsoup.nodes.TextNode", "#root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = new Document("Z@VA f05I)]RLR5F");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "Z@VA f05I)]RLR5F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = new Document("ml@~a^cs+^3,x");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("ml@~a^cs+^3,x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "a@;H.maU`*(");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("og&iBK}B", "og&iBK}B");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementById("og&iBK}B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "body");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Element element0 = new Element("ins");
      TextNode textNode0 = TextNode.createFromEncoded("ins");
      element0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^", "^");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.empty();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$+D-", "5@n,v|[vaxhks");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("{", "{");
      Element element0 = document0.head();
      element0.toggleClass("org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000052': unexpected token at '@0000000052'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      document0.tagName("?6'Mw[BD%");
      Element element0 = document0.prependElement("tr");
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("reversed", "reversed");
      Element element0 = document0.head();
      List<Node> list0 = Parser.parseXmlFragment("reversed", "reversed");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.TextNode", parseSettings0);
      Element element0 = new Element(tag0, "$S");
      // Undeclared exception!
      try { 
        element0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("|a$qPV'h*exb)c}0k");
      // Undeclared exception!
      try { 
        document0.child(51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7StR", "7StR");
      // Undeclared exception!
      try { 
        document0.child((-495));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w<5", "w<5");
      CDataNode cDataNode0 = new CDataNode("w<5");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.before((Node) cDataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      Element element1 = element0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.before((Node) element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("org.jsoup.nodes.TextNode");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("2V", "2V");
      Element element0 = document0.body();
      element0.siblingIndex = (-1996);
      // Undeclared exception!
      try { 
        element0.before("2V");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1996, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("");
      TextNode textNode0 = new TextNode("dNA(uOYul<F>", "dNA(uOYul<F>");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.before("java.lang.string@0000000139 qhel6y<8k1");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf(";T-9~HjqE$]", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(";T-9~HjqE$]");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, " ", attributes0);
      // Undeclared exception!
      try { 
        element0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.attr("8H?~k", (String) null);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "body");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "TioO");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      DocumentType documentType0 = new DocumentType("", "", "");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("org.jou.nodes.Textode", "org.jou.nodes.Textode");
      Element element0 = new Element("org.jou.nodes.Textode");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dNA(uOYul<F>", "");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      List<Node> list0 = Parser.parseXmlFragment("", "");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendText("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement("");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("value", "textarea");
      // Undeclared exception!
      try { 
        document0.appendElement("bqggm'ddGAtfp?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = new Document("<!docttxyp");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("dNA(uOYul<F>");
      Document document0 = Parser.parseBodyFragment("-1{@j", ".!0rsN?Ht-}9KW/a<");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "body");
      Element element0 = document0.body();
      Element element1 = element0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8", "8");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.append("8");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7StR", "7StR");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.createElement("<!doctype");
      document0.setParentNode(element0);
      DocumentType documentType0 = new DocumentType("<!doctype", "Jw+", "Jw+", "org.jsoup.nodes.TextNode");
      // Undeclared exception!
      try { 
        document0.after((Node) documentType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("<!doctype");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("65PA&Nffw!/a", "65PA&Nffw!/a");
      DataNode dataNode0 = DataNode.createFromEncoded("+qBZN*p", "65PA&Nffw!/a");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.after("QNU_u7S");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "Insert position out of bounds.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Element element0 = new Element("base");
      element0.html((MockPrintStream) null);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("noQuirks", "}_UR'* b:Q");
      document0.addClass("        ");
      Element element0 = document0.addClass("textarea");
      element0.hasClass("noQuirks");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      document0.addClass("org.jsoup.nodes.Entities");
      document0.addClass(" > ");
      document0.hasClass("org.jsoup.nodes.Entities");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$IndexEquals", "ScriptDataEndTagOpen");
      Element element0 = document0.addClass("basefont");
      document0.addClass("textarea");
      document0.addClass("ScriptDataEndTagOpen");
      element0.hasClass("java.lang.string@0000000099 z_fvaa<v scriptdataendtagopen");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Element element0 = new Element("wbr");
      element0.hasClass("wbr");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("uuw\"vD#V", parseSettings0);
      Element element0 = new Element(tag0, "s+");
      element0.toggleClass("s+");
      element0.hasClass("split offset must not be greater than current text length");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("reversed", "");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = new Document("h`g,kf5]EoYyD");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.extNode", "org.jsoup.nodes.extNode");
      Element element0 = document0.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("                   ", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "k0\"");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("#doctype", "#doctype");
      Element element0 = document0.prependElement("/WA&[+<2(z>");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("dNA(uOYul<F>", "NiR~cW?MJ&f");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("split offset must not be greater than current text length");
      CDataNode cDataNode0 = new CDataNode("z");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      Element element0 = document0.prependElement("tr");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uuw\"vD#V", "uuw\"vD#V");
      Element element0 = document0.body();
      element0.html("<!doctype");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ml@~a^CS+^3,x", "Ml@~a^CS+^3,x");
      Element element0 = document0.toggleClass("org.jsoup.select.CombiningEvaluator$Or");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tfoot", "tfoot");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("?6'Mw[BD%");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = new Document("<doctype");
      Pattern pattern0 = Pattern.compile("<doctype");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.TextNodi", "org.jsoup.nodes.TextNodi");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.extNode", "org.jsoup.nodes.extNode");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^", "^");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.extNode", "org.jsoup.nodes.extNode");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("{", "{");
      Pattern pattern0 = Pattern.compile("`w$~H7{2E5gsa", 58);
      document0.getElementsByAttributeValueMatching("{", pattern0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf(":%s(%do)", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "body", (Attributes) null);
      formElement0.id();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("tr", "tr");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ml@~a^CS+^3,x", "Ml@~a^CS+^3,x");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uuw\"vD#V", "uuw\"vD#V");
      // Undeclared exception!
      try { 
        document0.html((BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Element element0 = new Element("wbr");
      element0.appendElement("wbr");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element0.outerHtml((Appendable) charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1f@=co86[w", "small");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("}=]2cn;^x?#='ivH7=w");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "w@(ZOoX<.H}x", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("tr", "tr");
      Element element0 = document0.addClass("tr");
      Element element1 = element0.addClass("{6-J'pu]2/p");
      element1.toggleClass("{6-J'pu]2/p");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.TextNodi", "org.jsoup.nodes.TextNodi");
      document0.addClass("@?z#]Cmtdp");
      document0.addClass("org.jsoup.nodes.TextNodi");
      document0.getElementsByClass("org.jsoup.nodes.TextNodi");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$IndexEquals", "ScriptDataEndTagOpen");
      Element element0 = document0.addClass("basefont");
      document0.addClass("textarea");
      element0.addClass("basefont");
      document0.hasClass("textarea");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("tr", "tr");
      Element element0 = document0.addClass("tr");
      Element element1 = element0.addClass("{6-J'pu]2/p");
      element1.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!", "qhel6y<8k1");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("                   ", "org.jsoup.nodes.TextNode");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parse("_[2|s5", "_[2|s5");
      document0.setParentNode(document0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "-<f6F72#DY>l");
      document0.prependElement("br");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("BeforeDoctypeSystemIdentifier");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = new Element("textarea");
      element0.appendChild(document0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("yoVt8ptGwg_FC/|F&A%", "");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("dNA(uOYul<F>");
      Document document0 = Parser.parse("dNA(uOYul<F>", "dNA(uOYul<F>");
      document0.appendChild(cDataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "jcat;_gp7dcnnmx:`5");
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      document0.appendChild(textNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      Document document1 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      document1.appendChild(document0);
      document1.text();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      DataNode dataNode0 = new DataNode("", "F^Mz PI2G?YR<N");
      document0.appendChild(dataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uuw\"vD#V", "uuw\"vD#V");
      document0.getElementById("uuw\"vD#V");
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "body");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.setParentNode(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = new Document("Z@VA f05I)]RLR5F");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "#");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-_bverWEeP", "-_bverWEeP");
      document0.setParentNode(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "body");
      Element element0 = document0.prependElement("body");
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.nextElementSibling();
      assertEquals("org.jsoup.nodes.TextNode", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z@VA f05I)]RLR5F", "Z@VA f05I)]RLR5F");
      document0.appendChild(document0);
      Elements elements0 = document0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("Z@VA f05I)]RLR5F", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Element element0 = new Element("Tag name must not be empty.");
      Elements elements0 = element0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("{", "{");
      Element element0 = document0.head();
      element0.after("0?");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(1)", string0);
      assertEquals("{", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("{", "{");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("{", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("uuw\"vD#V");
      document0.setParentNode(document0);
      String string0 = document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", string0);
      assertEquals("uuw\"vD#V", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("{", "{");
      document0.toggleClass("org.jsoup.nodes.Element");
      document0.cssSelector();
      assertEquals("{", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("textarea", "textarea");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(60, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2034), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("yoVt8ptGwg_FC/|F&A%", "");
      Pattern pattern0 = Pattern.compile("", 0);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-1106), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("9&^\"^_u L,");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(";<`<$K`PJX", "4XC_O");
      List<TextNode> list0 = document0.textNodes();
      assertFalse(list0.isEmpty());
      assertEquals("4XC_O", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k0\"", "body");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = new Document("gb/pM}Z@wS'?9\"9x");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2109148236));
      assertEquals(1, elements0.size());
      assertEquals("gb/pM}Z@wS'?9\"9x", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Tag tag0 = Tag.valueOf("EZVHs=SD");
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$2");
      // Undeclared exception!
      try { 
        element0.selectFirst("+L +O(_f+Di#v.[\"w");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at '_f+Di#v.['
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1f@=co86[w", "small");
      document0.title("1f@=co86[w");
      String string0 = document0.html();
      assertEquals("small", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>1f@=co86[w</title>\n </head>\n <body>\n  1f@=co86[w\n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.TextNodi", "org.jsoup.nodes.TextNodi");
      Elements elements0 = document0.getElementsMatchingText("r3~");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.TextNodi", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Element element0 = new Element("reversed");
      Elements elements0 = element0.getAllElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = new Document("Z\"vMlOkCM=");
      Element element0 = document0.removeClass("");
      assertEquals("Z\"vMlOkCM=", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X>n$qT\nD>YMwDrW?", "X>n$qT\nD>YMwDrW?");
      // Undeclared exception!
      try { 
        document0.before("K)`,Ll\bG{!g14q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.TextNodi", "org.jsoup.nodes.TextNodi");
      document0.getElementsByAttribute("     ");
      assertEquals("org.jsoup.nodes.TextNodi", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.TextNodi", "org.jsoup.nodes.TextNodi");
      document0.getElementsByAttributeValueNot(" ", " ");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.TextNodi", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("94E02qS{!p~", "");
      Element element0 = document0.shallowClone();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Tag tag0 = Tag.valueOf("f:Bnp>Ho4)#j;");
      CDataNode cDataNode0 = new CDataNode("f:Bnp>Ho4)#j;");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "f:Bnp>Ho4)#j;", attributes0);
      formElement0.doSetBaseUri("f:Bnp>Ho4)#j;");
      assertEquals("f:Bnp>Ho4)#j;", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      DocumentType documentType0 = new DocumentType("<!doctype", "Jw+", "Jw+", "org.jsoup.nodes.TextNode");
      // Undeclared exception!
      try { 
        document0.after((Node) documentType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = new Document("gb/pM}Z@wS'?9\"9x");
      document0.getElementsByAttributeValueContaining("(:Hx3o*N", "gb/pM}Z@wS'?9\"9x");
      assertEquals("gb/pM}Z@wS'?9\"9x", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8", "8");
      Elements elements0 = document0.getElementsContainingText("A");
      assertEquals(1, document0.childNodeSize());
      assertEquals("8", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tr", "tr");
      document0.getElementsByAttributeValueEnding("tr", "ssib8y:sj6o!r");
      assertEquals(1, document0.childNodeSize());
      assertEquals("tr", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Element element0 = new Element("noQuirks");
      boolean boolean0 = element0.is("noQuirks");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nods.yextNde", "org.jsoup.nods.yextNde");
      // Undeclared exception!
      try { 
        document0.wrap("o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parse("Z@VA f05I)]RLR5F", "^YY");
      Elements elements0 = document0.getElementsByIndexEquals((-1432352094));
      assertEquals("^YY", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("rerersd");
      document0.getElementsByAttributeStarting("character is not a valid unicode code point");
      assertEquals(1, document0.childNodeSize());
      assertEquals("rerersd", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("{", "{");
      Elements elements0 = document0.getElementsByIndexLessThan(1982);
      assertEquals("{", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Document.createShell("dNA(uOYul<F>");
      // Undeclared exception!
      try { 
        document0.after("dNA(uOYul<F>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Qg2zkXGIH!lHUv@", "class");
      document0.getElementsMatchingOwnText("");
      assertEquals("class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = new Document("rTf]/>i");
      Element element0 = document0.prepend("");
      assertEquals("rTf]/>i", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = new Document("AttributeName");
      document0.select("AttributeName");
      assertEquals("AttributeName", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.getElementsByAttributeValueStarting("org.jsoup.nodes.TextNode", "org.jsoup.nodes.Attributes");
      assertEquals("org.jsoup.nodes.TextNode", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      document0.getElementsByAttributeValue("org.jsoup.nodes.Elemen2$1", "label");
      assertEquals("org.jsoup.nodes.TextNode", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      Element element0 = document0.html("#");
      assertEquals("#", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Document.createShell("s+");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("s+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Document.createShell("uuw\"vD#V");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "jcat;_gp7dcnnmx:`5");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parse("<!doctype", "#doctype");
      Elements elements0 = document0.getElementsContainingOwnText("org.jsoup.nodes.Element$NodeList");
      assertEquals("#doctype", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Document.createShell("split offset must not be greater than current text length");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("split offset must not be greater than current text length", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("WY");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-_bverWEeP", "-_bverWEeP");
      Element element0 = document0.child(0);
      assertEquals("-_bverWEeP", element0.baseUri());
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Document.createShell("dNA(uOYul<F>");
      document0.previousElementSiblings();
      assertEquals("dNA(uOYul<F>", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parse("Z@VA f05I)]RLR5F", "^YY");
      Pattern pattern0 = Pattern.compile("^YY");
      document0.getElementsMatchingText(pattern0);
      assertEquals("^YY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Element element0 = new Element("#doctype");
      // Undeclared exception!
      try { 
        element0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.extNode", "org.jsoup.nodes.extNode");
      Elements elements0 = document0.children();
      assertEquals(1, elements0.size());
      assertEquals("org.jsoup.nodes.extNode", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.nextElementSiblings();
  }
}
