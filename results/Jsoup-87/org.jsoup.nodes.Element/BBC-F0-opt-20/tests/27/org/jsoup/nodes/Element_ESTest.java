/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:17:38 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      Element element0 = document0.toggleClass("textarea");
      element0.toggleClass("Attributes incorrectly present on end tag");
      document0.getElementsByClass("Initial");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.getElementsByAttributeValueMatching("", "embed");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse("could not parse attribute query '%s': unexpected token at '%s'", "b(*X");
      Element element0 = document0.head();
      Element element1 = element0.before("b(*X");
      element1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      Element element0 = document0.prependChild(document0);
      element0.empty();
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$dn4e'Yj6Ry<Q+HNV[W", "$dn4e'Yj6Ry<Q+HNV[W");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(charArrayWriter0, 261, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("_C99nMhz7_f`[[qd");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "_C99nMhz7_f`[[qd");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(stringBuilder0, 92, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BIMital", "BIMital");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$And");
      Element element0 = document0.appendElement("Q");
      element0.wrap("Q");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$And");
      Element element0 = document0.head();
      element0.wrap("Q");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.siblingIndex = (-690);
      document0.val("");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      Element element0 = document0.head();
      element0.val("#root");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("c5y-O^e=");
      Element element0 = document0.appendElement("Children collection to be inserted must not be null.");
      element0.val("*BY");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("r\",r", "r\",r");
      document0.val("r\",r");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfot", "bsezfot");
      Element element0 = document0.body();
      element0.siblingIndex = (-1179);
      element0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!.z,3|H ;w}SPKgX3Q", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.text(")=#`1B8GcwLO");
      element0.wrap("6@f");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "wRK:,'(");
      document0.text("wRK:,'(");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.appendText("{b=Y<?B2ftA:DH,");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      Document document1 = Document.createShell("org.jsoup.select.Evaluator$IsNthLastChild");
      document1.prependChild(document0);
      Element element0 = document0.before("#rot");
      element0.tagName("m$R4]");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      Document document1 = Document.createShell("org.jsoup.select.Evaluator$IsNthLastChild");
      document1.prependChild(document0);
      document0.tagName("m$R4]");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      Element element0 = document0.empty();
      element0.tagName("html");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("!KRAfDV6\"b$G4]G%", "!KRAfDV6\"b$G4]G%");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S$oG1;y~z(4`:I?/6", "plaintext");
      Element element0 = document0.createElement("plaintext");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wHtLApWSc'VX/z&", "W|](h\fj,k4pX@3z+#");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZgXKPm@Fj", "%'zbz!TfRSR4q]7#G");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4f(M8,\")4`,3E8", "sB{ectc4");
      document0.selectFirst(":last-of-type");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      document0.select("#root");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("selected");
      Element element0 = document0.appendElement("selected");
      element0.select("selected");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.select.CombiinEvalator$An", "eavalang.Xtri,@0000000038");
      Element element0 = document0.body();
      element0.removeClass("Nx[|");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("Could not parse attribute query '%s': unexpected token at '%s'");
      document0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("$%'${=)X) %IWC", parseSettings0);
      Element element0 = new Element(tag0, "vttgEI|YowleAuM.-$!");
      element0.siblingIndex = 991;
      element0.prependText("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      Element element0 = document0.head();
      element0.prependText("]|1NY^FpYR9-Gka");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      document0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5X", "head");
      document0.prependElement("yQS<}y(t9");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfot", "bsezfot");
      Element element0 = document0.appendElement("bsezfot");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("title", parseSettings0);
      Element element0 = new Element(tag0, "title");
      element0.prepend(" > ");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$dn4e'Yj6Ry<Q+HNV[W", "$dn4e'Yj6Ry<Q+HNV[W");
      Element element0 = document0.appendElement("$dn4e'Yj6Ry<Q+HNV[W");
      element0.prepend("Jwu,$BB8zM/}4&");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$dn4e'Yj6Ry<Q+HNV[W", "$dn4e'Yj6Ry<Q+HNV[W");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("thG;", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "thG;", attributes0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfot", "bsezfot");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      document0.empty();
      document0.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BIMital", "BIMital");
      Element element0 = document0.appendElement("Q");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("could not parse attribute query '%s': unexpected token at '%s'", "b(*X");
      Element element0 = document0.prependText("X#<:a{sJ%lkaelV)bN");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d6uf", "d6uf");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.appendElement(".");
      Element element1 = element0.previousElementSibling();
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.prependChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendElement("<!--");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfost", "bsezfost");
      Element element0 = document0.body();
      Element element1 = element0.toggleClass("(ckms'i(m3e");
      element1.empty();
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(18);
      document0.is((Evaluator) evaluator_IndexGreaterThan0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Element element0 = new Element("class");
      element0.is("class");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("could not parse attribute query '%s': unexpected token at '%s'", "b(*X");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      Document document1 = Document.createShell("org.jsoup.select.Evaluator$IsNthLastChild");
      document1.prependChild(document0);
      Node[] nodeArray0 = new Node[0];
      document1.insertChildren(2, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      Document document1 = Document.createShell("org.jsoup.select.Evaluator$IsNthLastChild");
      Document document2 = (Document)document1.prependChild(document0);
      Elements elements0 = document0.getElementsByIndexEquals(2);
      document2.reparentChild(document1);
      document2.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.appendElement(".");
      element0.html(".");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZgXKPm@Fj", "%'zbz!TfRSR4q]7#G");
      Element element0 = document0.head();
      element0.html("ZgXKPm@Fj");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Element element0 = new Element("'5o\";E(\"#<&D");
      element0.html("");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("LaM:");
      document0.html((CharBuffer) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element element0 = new Element("rtX`Az+,ISVelvBo");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8zsZc9A", "br");
      document0.getElementsByClass("?U\u0002xo15.8Ng");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      Pattern pattern0 = Pattern.compile("", (-1433506051));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      document0.getElementsMatchingText("ScriptDataEscapedLessthanSign");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Element element0 = new Element("rtX`Az+,ISVelvBo");
      element0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BIMital", "BIMital");
      Pattern pattern0 = Pattern.compile("Q");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      document0.getElementsByTag("org.jsoup.select.CombiningEvaluator$And");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      document0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      document0.getElementsByIndexLessThan(2888);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      document0.getElementsByIndexGreaterThan((-1872));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.getElementsByIndexEquals((byte)0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$And");
      document0.getElementsByAttributeValue("org.jsoup.select.CombiningEvaluator$And", "4GJP+#bA");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document("9{$z@0@l4E_b%KU:");
      Element element0 = document0.attr("&#x", true);
      element0.getElementsByAttributeStarting("&#x");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("9", "9");
      document0.getElementsByAttribute("d\"?QudW[esK7@Qb");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthLastChild", "html");
      Element element0 = document0.appendElement("br");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BIMital", "BIMital");
      Element element0 = document0.appendElement("Q");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "Mq/8XSSejJPs4!%J");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfot", "bsezfot");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.appendElement(".");
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Element element0 = new Element("class");
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      document0.toggleClass("org.jsoup.select.CombiningEvaluator$And");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Tag tag0 = Tag.valueOf("basefont");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "basefont", attributes0);
      pseudoTextElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthLastChild", "html");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "body", attributes0);
      Document document0 = Parser.parse("xCnwR>! GY7}y", "xCnwR>! GY7}y");
      formElement0.prependChild(document0);
      document0.before("");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZgXKPm@Fj", "%'zbz!TfRSR4q]7#G");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.val("textarea");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfot", "bsezfot");
      Element element0 = document0.body();
      element0.attr("G'87c]_", true);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "Mq/8XSSejJPs4!%J");
      Element element0 = document0.head();
      element0.attr("textarea", "textarea");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rg.jsoup.select.CombiinEvalator$An", "rg.jsoup.select.CombiinEvalator$An");
      Element element0 = document0.appendElement("Ar");
      element0.attr("Ar", "Ar");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("dU", "0qkc4,vx+0rx");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Tag tag0 = Tag.valueOf("YOPE8R;'*OR$=");
      FormElement formElement0 = new FormElement(tag0, "YOPE8R;'*OR$=", (Attributes) null);
      FormElement formElement1 = new FormElement(tag0, "YOPE8R;'*OR$=", (Attributes) null);
      formElement0.appendTo(formElement1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.siblingIndex = (-690);
      document0.appendText("textarea");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      Element element0 = document0.head();
      element0.appendText("|zWh?}");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("body");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("MW3@UB)", "dir");
      TextNode textNode0 = TextNode.createFromEncoded("MW3@UB)", "MW3@UB)");
      document0.appendChild(textNode0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Tag tag0 = Tag.valueOf("XN$`n1");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "*D4_xT)`9=)Q:Q[", attributes0);
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.appendElement(".");
      Element element1 = element0.appendText("E^=f3RJGsb");
      element1.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("ScriptDataDoubleEscaped", "+'xO?DUjc");
      Element element0 = document0.head();
      element0.after("ScriptDataDoubleEscaped");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.appendElement(".");
      Element element1 = element0.after("");
      element1.text("F");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("</", "Azy29");
      Element element0 = document0.body();
      element0.after("");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("vDpJ^ZUj.OgnK", "vDpJ^ZUj.OgnK");
      document0.setSiblingIndex((-732));
      document0.addClass("vDpJ^ZUj.OgnK");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.head();
      element0.addClass("org.jsoup.select.Evaluator$IsNthOfType");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("rg.jsoup.select.CombiinEvalator$An", "rg.jsoup.select.CombiinEvalator$An");
      Element element0 = document0.appendElement("br");
      element0.addClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "br");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.wrap("org.jsoup.select.Evaluator$IsNthLastChild");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.val("#root");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Tag tag0 = Tag.valueOf("q$:4LvgW");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "q$:4LvgW", attributes0);
      String[] stringArray0 = new String[8];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        element0.val("q$:4LvgW");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      document0.html("P62LB KAwuXt,vom");
      // Undeclared exception!
      try { 
        document0.text("java.lang.string@0000000011");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthLastChild", "html");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.tagName(" \"");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Element element0 = new Element(" > ");
      // Undeclared exception!
      try { 
        element0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("could not parse attribute query '%s': unexpected token at '%s'", "b(*X");
      // Undeclared exception!
      try { 
        document0.selectFirst("0D)0n-fFcR)d)a/:i");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '0D)0n-fFcR)d)a/:i': unexpected token at ')0n-fFcR)d)a/:i'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Element element0 = new Element("'D\";E(\"#<&D");
      // Undeclared exception!
      try { 
        element0.select("'D\";E(\"#<&D");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ''D\";E(\"#<&D': unexpected token at ''D\";E(\"#<&D'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$And");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$And");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("value");
      CDataNode cDataNode0 = new CDataNode("value");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "g_AU&v1Zv");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.prependElement("xTPlhW9DHSVdu6h\"p7I");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      Element element0 = document0.empty();
      document0.reparentChild(element0);
      // Undeclared exception!
      try { 
        element0.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("{b=Y<?B2ftA:DH,");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"br", "\"br");
      TextNode textNode0 = new TextNode("\"br");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.prepend("\"br");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.collector", "org.jsoup.select.collector");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1585);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 1585, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("id", "0Z");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 4699, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("rg.jsoup.select.CombiinEvalator$An", "rg.jsoup.select.CombiinEvalator$An");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, (-2937), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000091 java.lang.string@0000000091", "java.lang.string@0000000091 java.lang.string@0000000091");
      CharBuffer charBuffer0 = CharBuffer.allocate(2125);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(11);
      // Undeclared exception!
      document0.outerHtmlHead(charBuffer0, 2125, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$And");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.jsoup.select.CombiningEvaluator$And");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 14, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 5, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("java.langestrig@0000000011");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuffer0, (-135159583), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("rg.jsoup.select.CombiinEvalator$An");
      CDataNode cDataNode0 = new CDataNode("D(O");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("html");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      document0.prependChild(document0);
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("disabled");
      // Undeclared exception!
      document0.is((Evaluator) evaluator_Class0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      Evaluator.Class evaluator_Class0 = new Evaluator.Class((String) null);
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_Class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      // Undeclared exception!
      try { 
        document0.is("org.jsoup.select.CombiningEvaluator$And");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.CombiningEvaluator$And': unexpected token at '$And'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("basefont", "basefont");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("#root");
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = new Document("selected");
      Node[] nodeArray0 = new Node[9];
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("itemscope", false);
      nodeArray0[0] = (Node) xmlDeclaration0;
      nodeArray0[1] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("qelected");
      Node node0 = cDataNode0.doClone(nodeArray0[0]);
      nodeArray0[2] = node0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("", "org.jsoup.select.CombiningEvaluator$And");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("body");
      nodeArray0[6] = (Node) cDataNode0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$An", "org.jsoup.select.CombiningEvaluator$An");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1765);
      List<Node> list0 = Parser.parseFragment("org.jsoup.select.CombiningEvaluator$An", (Element) document0, "org.jsoup.select.CombiningEvaluator$An", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Wn}wbXCUV^Ar:A<?So", "");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.select.CombiningEvaluator$And", "java.lang.string@0000000047 attributes incorrectly initial on end tag", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.html("org.jsoup.select.CombiningEvaluator$And");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html((OutputStreamWriter) null);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsou*.select.CombiningEvaluator$And", "org.jsou*.select.CombiningEvaluator$And");
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)62);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.charset((Charset) null);
      document0.outputSettings(document_OutputSettings0);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("body");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = new Document("JAyA`,9s;");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("Bl`c6e>R{9L_4W,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: Bl`c6e>R{9L_4W,
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Unexpectedly reached end of file (EOF) in input state [%s]", "IrP?3=-X9Cdjf|");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("`|[1 k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: `|[1 k
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fPFM2/i1A", " />");
      CDataNode cDataNode0 = new CDataNode("</");
      cDataNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(" />");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("q$:4CvgW");
      Element element0 = document0.appendElement("q$:4CvgW");
      element0.siblingIndex = (-800);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("Ar");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wsezfiyt", "wsezfiyt");
      Element element0 = document0.body();
      List<Node> list0 = Parser.parseXmlFragment("n]~G;Zhwq9To", "wsezfiyt");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("java.lang.string@0000000047");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.siblingIndex = (-690);
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("could not parse attribute query '%s': unexpected token at '%s'", "b(*X");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf(".cbZ<vLqSG", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ".cbZ<vLqSG", (Attributes) null);
      Element element0 = pseudoTextElement0.appendElement("fIM");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByIndexEquals((-906021636));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("", "org.jsoup.select.CombiningEvaluator$And");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfot", "bsezfot");
      Element element0 = document0.body();
      element0.siblingIndex = (-1179);
      // Undeclared exception!
      try { 
        document0.getElementsByClass("java.lang.string@0000000091");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5X", "head");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("head", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("textarea", "m$R4]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Element element0 = new Element("'5o\";E(\"#<&D");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("isindex", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Element element0 = new Element(" > ");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("1Hr[8", "|{{z<y!Y,D80eI#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: |{{z<y!Y,D80eI#
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "R Lh$ycO]G{v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("-I<UF^h1z!e", "-I<UF^h1z!e");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getAllElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfot", "bsezfot");
      Element element0 = document0.body();
      Element element1 = element0.toggleClass("");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000090': unexpected token at '@0000000090'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CobinigEvalato$And", "org.jsoup.select.CobinigEvalato$And");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.CobinigEvalato$And");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Element element0 = new Element("'5o\";E(\"#<&D");
      // Undeclared exception!
      try { 
        element0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
      try { 
        document0.child((byte)80);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 80, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse(".", ".");
      // Undeclared exception!
      try { 
        document0.child((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("textarea");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthLastChild", "html");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("hr", "org.jsoup.select.Evaluator$IsNthLastChild");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "&>owAh&zOS#3eAR2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("UUYWjfs8S>-0", "UUYWjfs8S>-0");
      TextNode textNode0 = new TextNode("u+vd:@V^W'D");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = new Document("");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F?XBv%Z", "G 99$Z9c#lmqYn%zgI");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendText("G 99$Z9c#lmqYn%zgI");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement("");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("8F", "z1(r_ak");
      // Undeclared exception!
      try { 
        document0.appendElement("z1(r_ak");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthLastChild", "html");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("rQ_H(7qq_EMAM[x0|", "rQ_H(7qq_EMAM[x0|");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthLastChild", "html");
      Element element0 = document0.prependChild(document0);
      element0.empty();
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("#'HAbnj9+Ks.cX");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "60PP{gwzSGP", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("m>`,j", parseSettings0);
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("basefont", "basefont");
      document0.hasClass("_C");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("kM)Xsw$2", "eFRH Er");
      Element element0 = document0.toggleClass("kM)Xsw$2");
      Set<String> set0 = element0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$And");
      document0.appendText("org.jsoup.select.CombiningEvaluator$And");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfot", "bsezfot");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("))}CAP%");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.appendElement(".");
      Element element1 = element0.previousElementSibling();
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      document0.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("orgRjsoup.select.CombinpngEvaluator$A6d", "orgRjsoup.select.CombinpngEvaluator$A6d");
      document0.reparentChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rg.jsoup.select.CombiinEvalator$An", "rg.jsoup.select.CombiinEvalator$An");
      Element element0 = document0.body();
      element0.append("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("</", "Azy29");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Element element0 = new Element("Could not parse attribute query '%s': unexpected token at '%s'");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$And");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.ContainsData evaluator_ContainsData0 = new Evaluator.ContainsData("");
      document0.is((Evaluator) evaluator_ContainsData0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Element element0 = new Element("J$Q%|i$G ~-12,T");
      element0.getElementsByAttributeValueMatching("J$Q%|i$G ~-12,T", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("", "org.jsoup.select.CombiningEvaluator$And");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$An", "org.jsoup.select.CombiningEvaluator$An");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("org.jsoup.select.CombiningEvaluator$An");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfiost", "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.appendElement("br");
      document1.html();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("</");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = Parser.parseBodyFragmentRelaxed("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document2 = document0.outputSettings(document_OutputSettings0);
      document1.hasSameValue(document2);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfiost", "bsezfiost");
      Element element0 = document0.toggleClass("bsezfiost");
      element0.toggleClass("bsezfiost");
      element0.toggleClass("bsezfiost");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("InHeadNoscript", "InHeadNoscript");
      document0.toggleClass("InHeadNoscript");
      document0.hasClass("':6Lp%NTU(0d]");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfost", "bsezfost");
      Element element0 = document0.body();
      Element element1 = element0.toggleClass("(ckms'i(m3e");
      element1.empty();
      element0.toggleClass("bsezfost");
      document0.getElementsByClass("java.lang.string@0000000091");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("`+ojjd:k!6i", "`+ojjd:k!6i");
      document0.toggleClass("rg.jsoup.selet.CombiinEvalator$An");
      document0.addClass(" ");
      document0.hasClass("`+ojjd:k!6i");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("bsezfiost");
      document0.toggleClass("br");
      document0.addClass("java.lang.string@0000000008");
      document0.hasClass("java.lang.string@0000000008");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("orgRjsoup.select.CombinpngEvaluator$A6d", "orgRjsoup.select.CombinpngEvaluator$A6d");
      document0.toggleClass("orgRjsoup.select.CombinpngEvaluator$A6d");
      document0.hasClass("orgRjsoup.select.CombinpngEvaluator$A6d");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("bsezfiost");
      document0.toggleClass("br");
      document0.hasClass("java.lang.string@0000000008");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse("tQzq`3/.<.f", "tQzq`3/.<.f");
      document0.title("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      document0.reparentChild(document0);
      document0.getElementsMatchingOwnText(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("PEpu*9u27Q#c{\"");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.appendElement("br");
      element0.before("&#xa0;");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("rg.jsoup.select.CombiinEvalator$An", "rg.jsoup.select.CombiinEvalator$An");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.selet.CombiinEvalator$An", "rg.jsoup.selet.CombiinEvalator$An");
      CDataNode cDataNode0 = new CDataNode("ScriptDataDoubleEscapeStart");
      document0.prependChild(cDataNode0);
      document0.getElementsMatchingOwnText("ScriptDataDoubleEscapeStart");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("diabld", "diabld");
      DocumentType documentType0 = new DocumentType("9o-@A8x", "diabld", "diabld", "JGIpR-O{?");
      document0.prependChild(documentType0);
      document0.getElementsContainingOwnText(")e4>&29fnM9'G:");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.html("org.jsoup.parser.CharacterReader");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.head();
      element0.before("textarea");
      document0.appendText("textarea");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsNthLastChild", "html");
      document0.appendElement("br");
      document0.getElementsContainingText("3|pv2;,9S0:`,GqsD%o");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$dn4e'Yj6Ry<Q+HNV[W", "$dn4e'Yj6Ry<Q+HNV[W");
      document0.appendElement("]I");
      document0.getElementsContainingText("]I");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("orgRjsoup.select.CombinpngEvaluator$A6d", "orgRjsoup.select.CombinpngEvaluator$A6d");
      document0.title("orgRjsoup.select.CombinpngEvaluator$A6d");
      document0.getElementsContainingText("orgRjsoup.select.CombinpngEvaluator$A6d");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfost", "bsezfost");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      Element element0 = document0.prependChild(document0);
      element0.empty();
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.nextElementSibling();
      assertEquals(".", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.prependChild(document0);
      Elements elements0 = element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("could not parse attribute query '%s': unexpected token at '%s'", "b(*X");
      document0.siblingElements();
      assertEquals("b(*X", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = new Document("-I<UF^h1z!e");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.ParseError", "org.jsoup.parser.ParseError");
      Element element0 = document0.body();
      element0.before("org.jsoup.parser.ParseError");
      String string0 = element0.cssSelector();
      assertEquals("org.jsoup.parser.ParseError", element0.baseUri());
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfiost", "bsezfiost");
      document0.toggleClass("bsezfiost");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("bsezfiost", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Node[] nodeArray0 = new Node[13];
      // Undeclared exception!
      try { 
        document0.insertChildren((-3519), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#rot", "html");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(2, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Element element0 = new Element("#|rot");
      Elements elements0 = element0.getElementsByAttributeValueStarting("org.jsoup.nodes.Element$1", "BogusComment");
      Document document0 = Document.createShell("BogusComment");
      Element element1 = document0.insertChildren(1, (Collection<? extends Node>) elements0);
      assertEquals("BogusComment", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Elements elements0 = document0.nextElementSiblings();
      // Undeclared exception!
      try { 
        document0.insertChildren((-734), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Element element0 = new Element("'5o\";E(\"#<&D");
      Elements elements0 = element0.getElementsByAttributeStarting("-:!wa@Ty)'6(.");
      // Undeclared exception!
      try { 
        element0.insertChildren(6, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.CombiningEvaluator$And", "org.jsoup.select.CombiningEvaluator$And");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("org.jsoup.select.CombiningEvaluator$And", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "Mq/8XSSejJPs4!%J");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("Mq/8XSSejJPs4!%J", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$An", "org.jsoup.select.CombiningEvaluator$An");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1765);
      List<Node> list0 = Parser.parseFragment("org.jsoup.select.CombiningEvaluator$An", (Element) document0, "org.jsoup.select.CombiningEvaluator$An", parseErrorList0);
      document0.childNodes = list0;
      document0.reparentChild(document0);
      document0.previousElementSiblings();
      assertEquals("org.jsoup.select.CombiningEvaluator$An", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!--", "<!--");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1878);
      assertEquals("<!--", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$dn4e'Yj6Ry<Q+HNV[W", "$dn4e'Yj6Ry<Q+HNV[W");
      document0.selectFirst("E");
      assertEquals("$dn4e'Yj6Ry<Q+HNV[W", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.title("Pattern syntax error: ");
      String string0 = document0.html();
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>Pattern syntax error: </title>\n </head>\n <body>\n  Pattern syntax error: \n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombinMngEvaluatMr$And", "org.jsoup.select.CombinMngEvaluatMr$And");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("-I<UF^h1z!e", "-I<UF^h1z!e");
      document0.getAllElements();
      assertEquals("-I<UF^h1z!e", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
      try { 
        document0.before("&ah})9fg61QahU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.getElementsByAttributeValueNot("br", "a");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("bsezfiost");
      Element element0 = document0.shallowClone();
      assertEquals("bsezfiost", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.doSetBaseUri("Zkr;/dr3O?Qg$y'");
      assertEquals("Zkr;/dr3O?Qg$y'", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "html");
      document0.getElementsByAttributeValueContaining("SKIP_CHILDREN", "Rm%X2Akj@q;:j(6z6e");
      assertEquals("html", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!--", "<!--");
      Elements elements0 = document0.getElementsContainingText("StartTag");
      assertEquals("<!--", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueEnding("k$mm", "%");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("basefont", "basefont");
      document0.is("#root");
      assertEquals("basefont", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rg.jsoup.select.CombiinEvalator$An", "rg.jsoup.select.CombiinEvalator$An");
      Element element0 = document0.attr("Ar", "Ar");
      assertEquals("rg.jsoup.select.CombiinEvalator$An", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$And");
      // Undeclared exception!
      try { 
        document0.wrap("Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Element element0 = new Element("'5o\";E(\"#<&D");
      // Undeclared exception!
      try { 
        element0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.select.CombiinEvalator$An", "eavalang.Xtri,@0000000038");
      Elements elements0 = document0.getElementsByIndexLessThan((-1655));
      assertEquals("eavalang.Xtri,@0000000038", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell(".");
      // Undeclared exception!
      try { 
        document0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Element element0 = new Element("J$Q%|i$G ~-12,T");
      Element element1 = element0.prepend("");
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rg.jsoup.select.CombiinEvalator$An", "eavalang.Xtri,@0000000038");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("eavalang.Xtri,@0000000038", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Element element0 = new Element("J$Q%|i$G ~-12,T");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue("J$Q%|i$G ~-12,T", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("i_", "org.jsoup.select.Evaluator$IsNthLastChild");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.wholeText();
      assertEquals(".", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsezfot", "bsezfot");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$dn4e'Yj6Ry<Q+HNV[W", "$dn4e'Yj6Ry<Q+HNV[W");
      Elements elements0 = document0.getElementsContainingOwnText("E");
      assertEquals("$dn4e'Yj6Ry<Q+HNV[W", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("se{ectcd");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$And");
      document0.prependText("J n^n!");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Document.createShell("Q3vj }bu");
      Element element0 = document0.child(0);
      assertEquals("Q3vj }bu", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BIMital", "BIMital");
      Pattern pattern0 = Pattern.compile("Q");
      document0.getElementsMatchingText(pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("BIMital", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "LxGCf`QF:[*!?1f%u");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("LxGCf`QF:[*!?1f%u", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Tag tag0 = Tag.valueOf("amGw|W5IC");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "amGw|W5IC", attributes0);
      formElement0.children();
      assertEquals("amGw|W5IC", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Document.createShell("Q3vj }bu");
      Element element0 = document0.getElementById("java.lang.string@0000000091");
      assertNull(element0);
      assertEquals("Q3vj }bu", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }
}
