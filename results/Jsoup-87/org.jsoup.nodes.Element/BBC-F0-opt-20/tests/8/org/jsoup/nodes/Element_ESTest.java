/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 23:26:11 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("invalid nmQd referenece %s", "invalid nmQd referenece %s");
      document0.toggleClass("");
      Element element0 = document0.addClass("invalid nmQd referenece %s");
      element0.hasClass("invalid nmQd referenece %s");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("#LRV{<^J.NN0jtl;Gc1|");
      document0.addClass("java.lang.string@0000000047");
      Element element0 = document0.toggleClass("java.lang.string@0000000047");
      element0.addClass("@(Q0)a{P+*'k0xx+^x.");
      element0.hasClass("java.lang.string@0000000047");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("L;yfN[YeJ2A F/Tto");
      Element element0 = new Element("zS^hM,");
      document0.setParentNode(element0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("U>n3cB2cE<XLq");
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("L;yfN[YeJ2A F/Tto", "L;yfN[YeJ2A F/Tto");
      StringWriter stringWriter0 = new StringWriter(62);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(mockPrintWriter0, 62, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(Z%W2m|&q|");
      Element element0 = new Element(tag0, "kX2");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IHbS%W~.zO}_R;yk4", "L;yfN[YeJ2A F/Tto");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZsEo<o$T<VJ0KN", "ZsEo<o$T<VJ0KN");
      Element element0 = document0.body();
      Element element1 = element0.appendTo(document0);
      element1.wrap(" ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.prependElement("br");
      element0.wrap("<br>\n<html>\n <head></head>\n <body>\n  br\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = new Document("InFrameset");
      document0.normalise();
      Element element0 = document0.body();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(":only-child", false);
      element0.prependChild(xmlDeclaration0);
      element0.wrap("#");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$2", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "~X_+n?`L,{/kZ|7e", attributes0);
      pseudoTextElement0.wholeText();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      Element element0 = document0.appendElement("S:!UJ^N~LZ_e)p");
      element0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.val(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("optgroup", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "3@IFD", attributes0);
      Element element0 = pseudoTextElement0.val("optgroup");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("s");
      document0.setSiblingIndex((-326));
      document0.toggleClass("8^A_6G_-_t UO");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse(":contain(%s)", ":contain(%s)");
      Element element0 = document0.appendElement(":contain(%s)");
      element0.toggleClass("#root");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "L;yfN[YeJ2A F/Tto");
      Element element0 = document0.head();
      element0.text("html > head > #root");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("7", "7");
      Element element0 = document0.appendElement("5");
      element0.text("5");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("</");
      Document document0 = parser0.parseInput((Reader) stringReader0, "z3Gwe7imWG_nx}vh");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("body");
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      Element element0 = document0.appendElement("S:!UJ^N~LZ_e)p");
      element0.tagName("rJ^n#^oPNY`0x2?");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("Insert posion out of bounds.");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("optgroup", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "3@IFD", attributes0);
      pseudoTextElement0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("link", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("link");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "link", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("bba");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("U>n3cB2cE<XLq");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("optgroup", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "optgroup", attributes0);
      pseudoTextElement0.selectFirst("optgroup");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse(":contain(%s)", ":contain(%s)");
      document0.selectFirst("html");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":contains(%s)");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "}nHpniffehQm9Jz", (Attributes) null);
      pseudoTextElement0.select(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("7", "7");
      Element element0 = document0.appendElement("5");
      element0.removeClass("5");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("6lOkt!+qH_");
      Element element0 = document0.head();
      element0.removeClass("6lOkt!+qH_");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse(":contain(%s)", ":contain(%s)");
      Element element0 = document0.appendElement(":contain(%s)");
      document0.prependElement("s+");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.prependElement("br");
      element0.siblingIndex = 510;
      element0.prependText("br");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "L;yfN[YeJ2A F/Tto");
      Element element0 = document0.head();
      element0.prependText("T_Ru.;HU69C?r1.");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      pseudoTextElement0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "optgroup");
      Element element0 = document0.body();
      element0.prepend("&IH|b!+%W~.O}_R;2k4");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = new Document(":root");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "L;yfN[YeJ2A F/Tto");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      Element element0 = document0.appendElement("S:!UJ^N~LZ_e)p");
      Element element1 = element0.prependElement("l");
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "L;SfN[YeJ2A F/qto");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bnCapion", "bnCapion");
      document0.setParentNode(document0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Node node0 = cDataNode0.doClone(document0);
      document0.removeChild(node0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("7", "7");
      Element element0 = document0.appendElement("5");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "liT8Z- [l[`H[7");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wbr", "wbr");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("InFrameset");
      Document document1 = document0.normalise();
      document1.text(":only-child");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("l7O3nh8P)l5s");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "&IH|b!+%W~.O}_R;2k4");
      Element element0 = document0.prependElement("s");
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      element0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute(":contains(%s)");
      document0.is((Evaluator) evaluator_Attribute0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("optgroup", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "optgroup", attributes0);
      pseudoTextElement0.is("optgroup");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse(":contain(%s)", ":contain(%s)");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Tag tag0 = Tag.valueOf("]tN");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "7", (Attributes) null);
      pseudoTextElement0.setSiblingIndex(33);
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      pseudoTextElement0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("body");
      Elements elements0 = document0.getElementsByAttributeValueContaining("body", "-lWf^8IvkW*ap<~uNG");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("head");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "head", attributes0);
      pseudoTextElement0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = ">;\\urAh8XD=:pd2`|wo";
      Document document0 = Parser.parse(string0, string0);
      document0.setParentNode(document0);
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      Element element0 = document0.appendElement("S:!UJ^N~LZ_e)p");
      Element element1 = element0.previousElementSibling();
      element1.html("@1+X`");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("inalid nmQd referenece %s", "inalid nmQd referenece %s");
      Element element0 = document0.createElement("s");
      document0.appendChild(element0);
      element0.html("s");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document(":root");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      Element element0 = document0.appendElement("S:!UJ^N~LZ_e)p");
      PipedWriter pipedWriter0 = new PipedWriter();
      element0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Pattern pattern0 = Pattern.compile("#root", 353);
      document0.getElementsByAttributeValueMatching("", pattern0);
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Sm1jFYCH<g[oM,", "muted");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Pattern pattern0 = Pattern.compile("2");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", ":matches(regex) query must not be empty");
      Pattern pattern0 = Pattern.compile("#root");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("l7O3nh8P)l5s");
      Pattern pattern0 = Pattern.compile("", (-787));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("br");
      document0.getElementsContainingText("i#f[ri6?*dt}!s");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s", "s");
      document0.getElementsContainingOwnText("optrou");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#s", "#s");
      document0.getElementsByTag("#s");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.prependElement("o4=");
      element0.getElementsByTag("o4=");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Element element0 = document0.body();
      element0.getElementsByIndexLessThan(90);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wbr", "wbr");
      document0.getElementsByIndexGreaterThan(62);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("Taiwan", "L;yfN[YeJ2A F/Tto");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("optgroup", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("3@IFD", "optgroup");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "3@IFD", attributes0);
      pseudoTextElement0.getElementsByAttributeValueMatching("3@IFD", "optgroup");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.getElementsByAttributeValue("br", "async");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      document0.getElementsByAttribute("?l3");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      document0.appendChild(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.empty();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.body();
      element0.after((Node) document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("l7O3nh8P)l5s");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "L;yfN[YeJ2A F/Tto");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("b4r", "b4r");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("k~r$oX*Vy/B?N", "k~r$oX*Vy/B?N");
      Element element0 = document0.head();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("invalid named referenece '%s'", "invalid named referenece '%s'");
      document0.setParentNode(document0);
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("?l3", "L;yfN[YeJ2A F/Tto");
      Element element0 = document0.toggleClass("?l3");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("invalid nmQd referenece %s");
      Element element0 = document0.toggleClass("");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("br");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<<OF,X/37");
      CDataNode cDataNode0 = new CDataNode("Vj{kF|a<>");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "yPkM5F;&dj`}z&", attributes0);
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("Insert posion out of bounds.");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.prepend("br");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "L;SfN[YeJ2A F/qto");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.prependElement("br");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#oNYSR}", "#oNYSR}");
      document0.setParentNode(document0);
      CDataNode cDataNode0 = new CDataNode("#oNYSR}");
      document0.before((Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "M");
      Element element0 = document0.doClone(document0);
      element0.before("#K");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("InFrameset");
      document0.normalise();
      Element element0 = document0.body();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(":only-child", false);
      element0.prependChild(xmlDeclaration0);
      element0.before(":only-child");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Element element0 = new Element("ti$n~qWN(1lt9^BI3)");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      Element element0 = pseudoTextElement0.val("#root");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell(",NRN%[ZIegbn/\"pG>");
      Element element0 = document0.body();
      element0.attr("z5RR?/vR>]n~|`89", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("optgroup", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "3@IFD", attributes0);
      pseudoTextElement0.attr("extended", true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("formnovalidate");
      Element element0 = document0.body();
      element0.attr(":nth-child(%d)", " ");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$2", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "~X_+n?`L,{/kZ|7e", attributes0);
      pseudoTextElement0.attr("id", "org.jsoup.select.Evaluator$MatchText");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("formnovalidate");
      document0.attr(":nth-child(%d)", " ");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Tag tag0 = Tag.valueOf("L;yfN[YeJ2A F/Tto");
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "L;yfN[YeJ2A F/Tto");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "m|%3>2@J", attributes0);
      document0.appendTo(pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("U>n3cB2cE<XLq");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("formnovalidate");
      Element element0 = document0.body();
      element0.appendText("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("optgroup", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "body", attributes0);
      pseudoTextElement0.appendElement("body");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.siblingIndex = (-608);
      Document document1 = Parser.parseBodyFragmentRelaxed("0b}<4vb+&B +7\"", "br");
      document0.appendChild(document1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("l7O3nh8P)l5s");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Tag tag0 = Tag.valueOf("]tN");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "7", (Attributes) null);
      pseudoTextElement0.setSiblingIndex(33);
      pseudoTextElement0.append("]tN");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("y|i", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "AvhQy_pq]", attributes0);
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      Element element0 = document0.prependElement("?l3");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("invalid nmQd referenece %s", "invalid nmQd referenece %s");
      Element element0 = document0.createElement("s");
      document0.appendChild(element0);
      element0.after("oX");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.head();
      element0.after("br");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("Ahm[?Ml,R)j U", "invalid namqd referenece %s");
      Document document1 = Parser.parseBodyFragment("<g=ta h9j", "Ahm[?Ml,R)j U");
      document0.prependChild(document1);
      document1.after("invalid namqd referenece %s");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("kki&W>]8cc{c,", "kki&W>]8cc{c,");
      document0.setSiblingIndex((-1547));
      document0.addClass("");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("head");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "head", attributes0);
      pseudoTextElement0.addClass(" />");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      Element element0 = document0.appendElement("S:!UJ^N~LZ_e)p");
      element0.addClass("l");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xIGzK2oV", "9V1");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.wrap("xIGzK2oV");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZsEo<o$T<VJ0KN", "ZsEo<o$T<VJ0KN");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("base");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[9];
      attributes0.keys = stringArray0;
      Tag tag0 = Tag.valueOf("optagoup");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "optagoup", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("optagoup");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("v ~el|", "v ~el|");
      // Undeclared exception!
      try { 
        document0.text("img");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("invalid nmQ~ referenece %s");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = new Document("TjO]H@*!.");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "M");
      Element element0 = document0.head();
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
      try { 
        element1.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      // Undeclared exception!
      try { 
        document0.selectFirst("F>|rOMS.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '|rOMS.': unexpected token at '|rOMS.'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("k:containf(%s)", "k:containf(%s)");
      // Undeclared exception!
      try { 
        document0.select("k:containf(%s)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'k:containf(%s)': unexpected token at ':containf(%s)'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("~a}r0&");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("method", "method");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      CDataNode cDataNode0 = new CDataNode("");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prependElement("sAW");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      List<Node> list0 = Parser.parseXmlFragment("s", "s");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("s");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S|j^mMCsafdv!", "br");
      DataNode dataNode0 = new DataNode("br", "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("#root", "");
      Element element0 = document0.head();
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
      try { 
        element0.prependChild(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#oNYSR}", "#oNYSR}");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#oNYSR}", "#oNYSR}");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("#oNYSR}");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("br");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = ">;\\urAh8XD=:pd2`|wo";
      Document document0 = Parser.parseBodyFragment(string0, string0);
      Comment comment0 = new Comment("optgrouQ|p", "})^b{hg");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.prepend(string0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r3'b@");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "r3'b@", attributes0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element0.append("r3'b@");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(124);
      // Undeclared exception!
      element0.outerHtmlTail(charArrayWriter0, 124, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "s");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 3224, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7", "org.jsoup.select.Evaluator$Matches");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 1371, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse(":contains(", ",xo_WFYAJ[@");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockFileWriter mockFileWriter0 = new MockFileWriter("oJ!:XuON+nfYuTtj&d", true);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, (-298), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("x ");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 46, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      File file0 = MockFile.createTempFile("ScriptDataEscapedDashDash", "h<zaF@(*r<ZpKOD");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(60);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, (-1110026255), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = new Document("1# j(el1g>o]{");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 529, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Wm_j@Y4;Fg8pXfZ,");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-148), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("invalid nmQd referenece %s", "invalid nmQd referenece %s");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 55, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#root", "body");
      Comment comment0 = new Comment("olEyc", "");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      DocumentType documentType0 = new DocumentType("br", "br", "Insert position out of bounds.", "body", "g+");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("body");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = new Document("br");
      DocumentType documentType0 = new DocumentType("AJ8P2wNYU", "(0&RgZ<(d{\"pXPo", "Insert position out of bounds.", (String) null);
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = new Document("InFrameset");
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Element element0 = document0.classNames(set0);
      element0.parentNode = (Node) document0;
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      // Undeclared exception!
      element0.is((Evaluator) evaluator_IsOnlyChild0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse(":contain(%s)", ":contain(%s)");
      // Undeclared exception!
      try { 
        document0.is(":contain(%s)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':contain(%s)': unexpected token at ':contain(%s)'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Element element0 = new Element("=cP,b");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      element0.addChildren(nodeArray0);
      // Undeclared exception!
      element0.is("br");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Element element0 = new Element(":MscX7J+mU\"?}Eb");
      // Undeclared exception!
      try { 
        element0.is("D-~#5/sa%0\"(zIiz<%");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("ScriptDataEscaped");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.element", "org.jsoup.nodes.element");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.element");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.html("org.jsoup.nodes.element");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("optgroup");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("invalid nmQd referenece %s", "invalid nmQd referenece %s");
      document0.setParentNode(document0);
      StringWriter stringWriter0 = new StringWriter(124);
      // Undeclared exception!
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZsEo<o$T<VJ0KN", "ZsEo<o$T<VJ0KN");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "&IH|b!+%W~.O}_R;2k4");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("(Lk#]Ic,Qq");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("yW5OyoNJ(Y+@gIXr-t!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: yW5OyoNJ(Y+@gIXr-t!
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("_2j>");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "'5^&Tb{pXC+l", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(" > ", "body");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("?;1nI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ?;1nI
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",M", "Pp|");
      TextNode textNode0 = TextNode.createFromEncoded("Pp|");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("j%vK1]J^$");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse(":contain(%s)", ":contain(%s)");
      CDataNode cDataNode0 = new CDataNode(":contain(%s)");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("l)ouvqj9s7gu}[)owg*");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xigzk2ov", "JNW]");
      CDataNode cDataNode0 = new CDataNode(":contain(%s)");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("FC!xuSjGZy");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#,nRT", "#,nRT");
      document0.siblingIndex = (-2266);
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("#,nRT");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("S=a2>`$");
      Comment comment0 = new Comment("invalid nmQd referenece %s", "org.jsoup.select.StructuralEvaluator$Parent");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan((-14506066));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("L;yfN[YeJ2A F/Tto");
      CDataNode cDataNode0 = new CDataNode("+!l@%T#fCe;u0");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(1323);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = new Document("`+,i`^.b");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse(":contain(%s)", ":contain(%s)");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("=^l)zTVS", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = new Document("`+,i`^.b");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("L;yfN[YeJ2A F/Tto", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("?l3", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "vAj,<E~&cf3PPX", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueMatching("J&t_jG>NB", "^)qIz4@FD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ^)qIz4@FD
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "lI`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("textarea", "org.jsoup.safety.Cleaner$CleaningVisitor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("[e{Yk\"V\"");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("org.jsoup.select.Evaluator$Attribute", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("L;yfN[YeJ2A F/Tto");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("          ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse(">0Pk~cK", "ruby");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">R3>!$I%oIyal)Kv", "\"Tb:qEl07/w#uO*5?k");
      Comment comment0 = new Comment((String) null, (String) null);
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("optgroup", "=;_1:U<");
      TextNode textNode0 = TextNode.createFromEncoded("optgroup");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("invalidnmQd referenece %s", "invalidnmQd referenece %s");
      Element element0 = document0.head();
      element0.setSiblingIndex((-743));
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("l7O3nh8P)l5s");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.child((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h6", "h6");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Document document1 = (Document)document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = ">;\\urAh8XD=:pd2`|wo";
      Document document0 = Parser.parse(string0, string0);
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("l>GFO");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("C", "^Rftk~8!$f^c&O");
      Element element0 = document0.createElement("^Rftk~8!$f^c&O");
      element0.appendChild(document0);
      document0.siblingIndex = 10;
      // Undeclared exception!
      try { 
        document0.before("C");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse(":conta>ns(%s)", ":conta>ns(%s)");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.attr(":only-child", "org.jsoup.select.Evaluator$MatchText");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Tag tag0 = Tag.valueOf("F@");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "veE^\"`RI", attributes0);
      List<Node> list0 = Parser.parseFragment("Tag name must not be empty.", (Element) pseudoTextElement0, "veE^\"`RI");
      pseudoTextElement0.childNodes = list0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.appendTo(pseudoTextElement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Tag tag0 = Tag.valueOf("uDr*SuL'/#?");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Insert position out of bounds.", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":has(%s)", "s+");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement("s+");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      List<Node> list0 = Parser.parseXmlFragment("S:!UJ^N~LZ_e)p", "ZFXq_,UzwnXJ)P( 0");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("S:!UJ^N~LZ_e)p");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s", "s");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("invalid nmqd referenece %s", true);
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("l7O3nh8P)l5s");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":MscX7J+mU\"?}Eb", ":MscX7J+mU\"?}Eb");
      Element element0 = document0.prependElement(":MscX7J+mU\"?}Eb");
      element0.siblingIndex = (-817);
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.append("kcw\"8I-CPz");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      CDataNode cDataNode0 = new CDataNode("insert position out of bounds.");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "-7", attributes0);
      Element element0 = pseudoTextElement0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.append("optgroup");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      // Undeclared exception!
      try { 
        element0.after((Node) element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "liT8Z- [l[`H[7");
      Element element0 = document0.body();
      element0.after((Node) document0);
      // Undeclared exception!
      document0.after("br");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = new Document("br");
      Document document1 = (Document)document0.doClone(document0);
      // Undeclared exception!
      try { 
        document1.after("=cP,b");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("L;yfN[YeJ2A F/Tto");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "body", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "B:UaP/4,JNurlo-]y7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Element element0 = new Element(":has(%s)");
      element0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S|j^mMCsafdv!", "br");
      document0.hasClass("S`A-b<~$P:Wsv/r");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("~a}r0&");
      TextNode textNode0 = TextNode.createFromEncoded(" />");
      document0.prependChild(textNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.text("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse(":contain(%s)", ":contain(%s)");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = new Document("InFrameset");
      document0.normalise();
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZsEo<o$T<VJ0KN", "ZsEo<o$T<VJ0KN");
      document0.setParentNode(document0);
      document0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s:!uj^n~lz_e)p", "s:!uj^n~lz_e)p");
      DocumentType documentType0 = new DocumentType("Ks~ Faiay8.P/Hc)1i+", "s:!uj^n~lz_e)p", "fee!G+7PBi`L)", "fee!G+7PBi`L)");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("l7O3nh8P)l5s");
      document0.prependChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&IHbS%W~.zO}_R;yk4", "L;yfN[YeJ2A F/Tto");
      Element element0 = document0.head();
      element0.append("otDIx\"");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      pseudoTextElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s", "s");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Sm1jFYCH<g[oM,", "muted");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&IH|b!+%W~.O}_R;2k4", "&IH|b!+%W~.O}_R;2k4");
      Pattern pattern0 = Pattern.compile("</", (-1844));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("optgroup", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "3@IFD", attributes0);
      pseudoTextElement0.ownText();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse("invalid nmQd referenece %s", "invalid nmQd referenece %s");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "U$+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Element element0 = new Element("%w?Hg5'eso~?0r#M");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#s", "#s");
      document0.title("#s");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("formnovalidate");
      // Undeclared exception!
      try { 
        document0.html((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Element element0 = new Element("br");
      MockFileWriter mockFileWriter0 = new MockFileWriter("br", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlHead(mockPrintWriter0, 58, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("Insert posion out of bounds.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      pseudoTextElement0.val("textarea");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("invalid nmQd referenece %s", "invalid nmQd referenece %s");
      Attributes attributes0 = document0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Pattern syntax error: ", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("invalid nmQd referenece %s", "invalid nmQd referenece %s");
      document0.addClass("invalid nmQd referenece %s");
      document0.toggleClass("@TlKFF*~(yu");
      document0.toggleClass("@TlKFF*~(yu");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Document document0 = Document.createShell("#LRV{<^J.NN0jtl;Gc1|");
      document0.addClass("java.lang.string@0000000047");
      Element element0 = document0.toggleClass("java.lang.string@0000000047");
      element0.hasClass("java.lang.string@0000000047");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s", "s");
      document0.addClass("`uv@t?b6!;H");
      document0.toggleClass(" ");
      document0.hasClass("`uv@t?b6!;H");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s", "s");
      document0.addClass("`uv@t?b6!;H");
      document0.hasClass("`uv@t?b6!;H");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("invalid named referenece '%s'", "{ssc+8cx}>Ih7 L");
      document0.addClass("invalid named referenece '%s'");
      document0.hasClass("invalid named referenece '%s'");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("#RV{<^J.NN0jtl;Gc1|", "#RV{<^J.NN0jtl;Gc1|");
      document0.addClass("java.lang.string@0000000047");
      document0.hasClass("java.lang.string@0000000047");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("L;fN[Y>12A F/gTt=", "L;fN[Y>12A F/gTt=");
      CDataNode cDataNode0 = new CDataNode("L;fN[Y>12A F/gTt=");
      Element element0 = document0.appendChild(cDataNode0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":omxe(1jzl{;s<!/*t", "b ");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(",4Pp'Tg?;w:q)X", "org.jsoup.select.Evaluator$IndexLessThan");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("kki&W>]8cc{c,", "kki&W>]8cc{c,");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(" ", ":#Q");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#,nRT", "#,nRT");
      document0.setParentNode(document0);
      document0.getElementsContainingOwnText("#,nRT");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("optgroup");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.prependElement("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("kki&W>]8cc{c,", "kki&W>]8cc{c,");
      document0.title("kki&W>]8cc{c,");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("invalid namQd referenece %s", "invalid namQd referenece %s");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("invalid namQd referenece %s", "invalid namQd referenece %s", true);
      document0.appendChild(xmlDeclaration0);
      document0.getElementsContainingOwnText("invalid namQd referenece %s");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Document.createShell("");
      TextNode textNode0 = new TextNode((String) null);
      document0.appendChild(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x ", "x ");
      CDataNode cDataNode0 = new CDataNode("x ");
      document0.appendChild(cDataNode0);
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("inalid nmQd referenece %s", "inalid nmQd referenece %s");
      Element element0 = document0.createElement("s");
      document0.appendChild(element0);
      document0.getElementsContainingText("s");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("bba");
      Element element0 = document0.prependText("bba");
      element0.getElementsMatchingText("z");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.createElement("br");
      document0.appendChild(element0);
      document0.getElementsContainingText("br");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("L;yfN[YeJ2A F/Tto");
      DataNode dataNode0 = DataNode.createFromEncoded(")\"Z}6.nyN<vArK8]U^", ")\"Z}6.nyN<vArK8]U^");
      document0.appendChild(dataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("^{mauE80t\bz8", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      pseudoTextElement0.getElementById("^{mauE80t\bz8");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.element", "org.jsoup.nodes.element");
      Element element0 = document0.prependElement("org.jsoup.nodes.element");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      Attributes attributes0 = document0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("b?l3", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "IXZ", attributes0);
      document0.setParentNode(formElement0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s", "s");
      Element element0 = document0.prependElement("s");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      Element element0 = document0.appendElement("S:!UJ^N~LZ_e)p");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("ZsEo<o$Te<VJ0KN", "ZsEo<o$Te<VJ0KN");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Element element0 = new Element("html");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("ZsEo<o$Te<VJ0KN", "ZsEo<o$Te<VJ0KN");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&IHbS%W~.zO}_R;yk4", "L;yfN[YeJ2A F/Tto");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = new Document("s");
      document0.nextElementSibling();
      assertEquals("s", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse(":contain(%s)", ":contain(%s)");
      document0.siblingElements();
      assertEquals(":contain(%s)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("#,nRB");
      Element element0 = document0.head();
      element0.before("#,nRB");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("html", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("?l3", "L;yfN[YeJ2A F/Tto");
      Element element0 = document0.toggleClass("?l3");
      element0.cssSelector();
      assertEquals("L;yfN[YeJ2A F/Tto", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("invalid nmQd referenece %s", "invalid nmQd referenece %s");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(182, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren((-789), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("t#oysr}", "t#oysr}");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(1, nodeArray0);
      assertEquals("t#oysr}", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("l7O3nh8P)l5s");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2029075136), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("L;fN[Y>12A F/gTt=", "L;fN[Y>12A F/gTt=");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2092, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      assertEquals(1, document0.childNodeSize());
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      DataNode dataNode0 = new DataNode("ba3H6v{");
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals("xIGzK2oV", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("`}]6qWeok'CO'R'q", "`}]6qWeok'CO'R'q");
      List<TextNode> list0 = document0.textNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = ">;\\urAh8XD=:pd2`|wo";
      Document document0 = Parser.parse(string0, string0);
      Elements elements0 = document0.getElementsByIndexEquals((-1110026255));
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals(">;\\urAh8XD=:pd2`|wo", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse(":contain(%s)", ":contain(%s)");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      assertEquals(1, elements0.size());
      assertEquals(":contain(%s)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.selectFirst(":only-child");
      assertNull(element0);
      assertEquals(":contains(%s)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getAllElements();
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = ">;\\urAh8XD=:pd2`|wo";
      Document document0 = Parser.parse(string0, string0);
      // Undeclared exception!
      try { 
        document0.before("l>GFO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("There is an unread token pending!", "There is an unread token pending!");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.getElementsByAttributeValueNot("EndTag", "QkhbTz&T&Tl,l=n");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("invalid named referenece '%s'", "invalid named referenece '%s'");
      Element element0 = document0.shallowClone();
      Element element1 = element0.prependElement("](*Qqb,`'$3j+xSK");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at '*qqb,`'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Document.createShell("l7O3nh8P)l5s");
      document0.doSetBaseUri("l7O3nh8P)l5s");
      assertEquals("l7O3nh8P)l5s", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&IHbS%W~.zO}_R;yk4", "L;yfN[YeJ2A F/Tto");
      Elements elements0 = document0.getElementsByClass("L;yfN[YeJ2A F/Tto");
      assertEquals(1, document0.childNodeSize());
      assertEquals("L;yfN[YeJ2A F/Tto", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = new Document("d");
      document0.getElementsByAttributeValueEnding("d", "lI`");
      assertEquals("d", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.is("org.jsoup.nodes.Element");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("optgroup", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "3@IFD", attributes0);
      pseudoTextElement0.getElementsByAttributeValueMatching("3@IFD", "optgroup");
      assertEquals("3@IFD", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(" ", ":#Q");
      document0.getElementsByAttributeStarting("H\"");
      assertEquals(":#Q", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Elements elements0 = document0.getElementsByIndexLessThan(90);
      assertEquals(3, elements0.size());
      assertEquals("s+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.after("=cP,b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",M", "Pp|");
      Elements elements0 = document0.getElementsMatchingOwnText("j%vK1]J^$");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Pp|", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Elements elements0 = document0.select(":contains(%s)");
      assertEquals(":contains(%s)", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("inalid nmQd referenece %s", "inalid nmQd referenece %s");
      document0.getElementsByAttributeValueStarting("inalid nmQd referenece %s", "inalid nmQd referenece %s");
      assertEquals(1, document0.childNodeSize());
      assertEquals("inalid nmQd referenece %s", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parse("formnovalidate", "formnovalidate");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "formnovalidate");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parse(":contains(%s)", ":contains(%s)");
      Element element0 = document0.attr("1#D#&Pxwuh", false);
      assertEquals(":contains(%s)", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", ":matches(regex) query must not be empty");
      String string0 = document0.wholeText();
      assertEquals("#root", string0);
      assertEquals(":matches(regex) query must not be empty", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Document.createShell("J?5Ah]Qz`Nmmp@/8");
      // Undeclared exception!
      try { 
        document0.before((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Document.createShell("l7O3nh8P)l5s");
      document0.dataset();
      assertEquals("l7O3nh8P)l5s", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("id", "id");
      // Undeclared exception!
      try { 
        document0.child(124);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 124, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("S:!UJ^N~LZ_e)p", "xIGzK2oV");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("xIGzK2oV", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.prependElement("br");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = new Document("There is an unread token pending!");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Document.createShell("6lOkt!+qH_");
      Element element0 = document0.removeClass("6lOkt!+qH_");
      assertEquals("6lOkt!+qH_", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parse("invalid nmQd referenece %s", "invalid nmQd referenece %s");
      document0.appendText("(,7wrZW\";DJFI*");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
      try { 
        document0.wrap("<br>\n<html>\n <head></head>\n <body>\n  br\n </body>\n</html>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.nextElementSiblings();
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("", "[rr0)$_|i@\"");
      document0.id();
  }
}
