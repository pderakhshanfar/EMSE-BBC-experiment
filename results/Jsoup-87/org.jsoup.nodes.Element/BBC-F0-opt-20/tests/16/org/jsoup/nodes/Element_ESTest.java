/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:00:14 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("EUS8u[E/4tSw] g >", "java.lang.string@0000000027");
      document0.addClass("FN");
      document0.addClass("FN");
      document0.hasClass("java.lang.string@0000000027");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K", "EUS8u[E/4tSw] g >");
      document0.addClass("EUS8u[E/4tSw] g >");
      document0.addClass("Tag name must not be empty.");
      document0.hasClass("X3n");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringWriter0, 234, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ain", "ain");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ZGfc6*");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintStream0, 125, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("oVC", "org.jsoup.nodes.Entities$EscapeMode");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("main");
      Element element0 = document0.body();
      element0.wrap("main");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l");
      Element element0 = document0.body();
      element0.wrap(";@EOJlFj57[HtIv^l");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("main");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      document0.siblingIndex = (-1432352094);
      document0.val("head");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("main");
      Element element0 = document0.body();
      element0.val("main");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell(";@EOJlFj57[HtIv^l");
      document0.val(";@EOJlFj57[HtIv^l");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("5");
      document0.siblingIndex = (-1147222997);
      document0.toggleClass("rawtextendtagopen");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("main");
      Element element0 = document0.body();
      element0.toggleClass("main");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("5");
      document0.siblingIndex = (-1147222997);
      document0.text("Pnz>qYe-nJ0QFY");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      document0.text("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("g=$8j$fDG7}|T9GOp");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("liDtSong", "liDtSong");
      document0.siblingIndex = (-2611);
      document0.tagName("liDtSong");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("noframes", "noframes");
      document0.tagName("noframes");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("ain");
      Element element0 = document0.body();
      element0.tagName("ain");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "Ry~cT?{ B\\uZ&}9W";
      Document document0 = Parser.parseBodyFragment(string0, "br");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000027 id", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell(";@eojlfj57[htiv^l");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("bdl", "bdl");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("valuP", "valuP");
      Element element0 = document0.appendElement("valuP");
      Element element1 = element0.previousElementSibling();
      element1.shallowClone();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("dl", "dl");
      document0.selectFirst("dl");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bq", "bq");
      document0.selectFirst(":last-of-type");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bm", "bm");
      Element element0 = document0.appendElement("bm");
      element0.selectFirst("bm");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.select("J9");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("e0", "e0");
      Element element0 = document0.appendElement("e0");
      element0.select("e0");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vVy", "vVy");
      Element element0 = document0.appendElement("vVy");
      element0.removeClass("'");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("dl", "dl");
      Element element0 = document0.appendElement("ZtPkh='WwbN_XrvoQbs");
      element0.siblingIndex = (-2347);
      element0.removeClass(";W3,vx>0grG2rr;?g6");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.head();
      element0.removeClass("html");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("LmA8<dcAM >&");
      document0.setSiblingIndex((-1668));
      document0.prependText("");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f#RM@Ln", "");
      Element element0 = document0.body();
      element0.prependText("f#RM@Ln");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("T-dmVS?<gYT5vXZTT5");
      document0.prependElement("nav");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("]{:");
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode("b-m");
      element0.prependChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("main");
      Element element0 = document0.body();
      element0.prepend("Sw#EiPJu");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("e0", "e0");
      Element element0 = document0.appendElement("e0");
      element0.prepend("%}L53cn@P*tu!fmi'W%");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document("");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "org.jsoup.nodes.Element");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell(",;@EOJlFj57[tIv^l");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("bm", "bm");
      Element element0 = document0.appendElement("bm");
      Element element1 = element0.prependElement("b]n;=JJN19(@bmpAQ");
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vVy", "vVy");
      Element element0 = document0.appendElement("vVy");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("p{:");
      document0.parentNode = (Node) document0;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f#RM@Ln", "");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("dl", "dl");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("bdl", "bdl");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      Document document1 = Parser.parseBodyFragmentRelaxed("<html>\n <head></head>\n <body>\n  bdl\n </body>\n</html>", "bdl");
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
      document1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ain", "ain");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      Element element0 = document0.appendElement("valuP");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("");
      document0.is((Evaluator) evaluator_TagEndsWith0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      Element element0 = document0.appendElement("valuP");
      element0.is("valuP");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("br", "meta[charset]");
      Pattern pattern0 = Pattern.compile("qyrx.UJGU", 0);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      document0.appendTo(document0);
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("bdl", "bdl");
      Pattern pattern0 = Pattern.compile("vZre", 0);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      Element element0 = new Element("br");
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell("5");
      document0.siblingIndex = (-1147222997);
      document0.html("m,juob");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("main");
      Element element0 = document0.body();
      element0.html("br");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("Q-0UUgR,L~]~9");
      Document document1 = Document.createShell("S/TRz![Q?m");
      document0.appendTo(document1);
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("Q-0UUgR,L~]~9");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      MockFileWriter mockFileWriter0 = new MockFileWriter("m,juob");
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document(",;@EOJlFj57[tIv^l");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("main");
      document0.clearAttributes();
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("{^a5t:P-g.6M");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("dl", "dl");
      Pattern pattern0 = Pattern.compile("dl");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("bdl", "bdl");
      Pattern pattern0 = Pattern.compile("bdl", 0);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bq", "bq");
      document0.getElementsContainingText("class");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      document0.getElementsByTag("body");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ain", "ain");
      Element element0 = document0.body();
      element0.getElementsByIndexLessThan(3757);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      document0.getElementsByIndexGreaterThan(1609);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("main");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("listing", "listing");
      document0.getElementsByClass("listing");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".kv0W!*-", ".kv0W!*-");
      Element element0 = document0.addClass("java.lang.string@0000000027");
      document0.addClass("java.lang.string@0000000027");
      element0.getElementsByClass("java.lang.string@0000000027");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000047 java.lang.string@0000000027 tag name must x3n be empty.");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "java.lang.string@0000000047 java.lang.string@0000000027 tag name must x3n be empty.", attributes0);
      attributes0.put("*B", "org.jsoup.parser.ParseSettings");
      element0.getElementsByAttributeValueStarting("*B", "org.jsoup.parser.ParseSettings");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document(",;@EOJlFj57[tIv^l");
      document0.getElementsByAttributeValueMatching(",;@EOJlFj57[tIv^l", "textarea");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Element element0 = new Element("tndiHtFBraf");
      element0.getElementsByAttributeValue("0bx&psM+RE", "tndiHtFBraf");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      document0.attr("Pattern syntax error: ", "ym50XYH");
      document0.getElementsByAttributeValue("Pattern syntax error: ", "ym50XYH");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      document0.getElementsByAttributeStarting("Initial");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Tag tag0 = Tag.valueOf("JX.FigwE");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("V~VMU", true);
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.", attributes1);
      element0.getElementsByAttributeStarting("V~VMU");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      document0.getElementsByAttribute("DoctypeSystemIdentifier_singleQuoted");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("bdl", "bdl");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      Document document1 = Parser.parseBodyFragmentRelaxed("<html>\n <head></head>\n <body>\n  bdl\n </body>\n</html>", "bdl");
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("LmA8<dcAM >&");
      document0.setSiblingIndex((-1668));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("d w=k", "d w=k");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      Element element0 = document0.appendElement("valuP");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document("7\"\"CS=M9bQWHaJA");
      document0.siblingIndex = (-1564);
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p{:", "p{:");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ain", "ain");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = new Document(",;@EOJlFj57[tIv^l");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f#RM@Ln", "");
      Element element0 = document0.body();
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document(",;@EOJlFj57[tIv^l");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.addClass("org.jsoup.nodes.Element");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      document0.addClass("valuP");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse(",;@EOJlFj57[tIv^l", ",;@EOJlFj57[tIv^l");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("7\"\"CS=M9bQWHaJA");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0", "java.lang.string@0000000115 x3n name must not be empty.");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "value");
      Element element0 = document0.appendElement("value");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p{:", "p{:");
      Element element0 = document0.body();
      element0.before((Node) document0);
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("li~oing", ".");
      Document document1 = (Document)document0.doClone(document0);
      document1.before("1(fXr{TY8GS");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.appendElement("Vc+r{");
      element0.before("#root");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      Element element0 = document0.appendElement("valuP");
      Element element1 = element0.previousElementSibling();
      element1.before("body");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("main");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("5");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("abbr");
      Element element0 = document0.val("`7o3,(7]Jt_@,2\"+Y");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("7\"\"CS=M9bQWHaJA");
      document0.siblingIndex = (-784);
      document0.attr("7\"\"CS=M9bQWHaJA", true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      Element element0 = document0.body();
      element0.attr("valuP", false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("7\"\"CS=M9bQWHaJA");
      document0.parentNode = (Node) document0;
      document0.attr("7\"\"CS=M9bQWHaJA", true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000027");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.attr("Hdz", true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "org.jsoup.nodes.Element");
      Element element0 = document0.body();
      element0.attr("org.jsoup.nodes.Element", "html");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Element element0 = new Element("tndiHtFBraf");
      element0.attr("RawtextEndTagOpen", (String) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("N%(");
      Element element0 = document0.body();
      document0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document(",;@EOJlFj57[tIv^l");
      Document document1 = Parser.parse("5", ",;@EOJlFj57[tIv^l");
      document0.appendTo(document1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("LmA8<dcAM >&");
      document0.setSiblingIndex((-1668));
      document0.appendText("LmA8<dcAM >&");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell(",;@EOJlFj57[tIv^l");
      Element element0 = document0.body();
      element0.appendText("q8VjjCD;%+H?");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "?[!le&K#ICSbK");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("N_=3pA@n[Z& kt");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("P1Q):eny_", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "P1Q):eny_", attributes0);
      element0.siblingIndex = (-420);
      element0.append("@s+u:5,h");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$NodeList");
      element0.append("<!doctype");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "org.jsoup.nodes.Element");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out f bounds.", "Insert position out f bounds.");
      Element element0 = document0.appendElement("value");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p{:", "p{:");
      Element element0 = document0.appendElement("l");
      element0.after("body");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document$QuirksMode", "Insert position out of bounds.");
      Element element0 = document0.head();
      element0.after("GB+Sfg");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Document.createShell("5");
      document0.siblingIndex = (-1147222997);
      document0.addClass("L/{t,Y{uYr`#A~T1");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell(",;@EOJlFj57[tIv^l");
      Element element0 = document0.body();
      element0.addClass(",;@EOJlFj57[tIv^l");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0", "0");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.wrap("Cp@\"9)>}d|X\"h");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000027", "java.lang.string@0000000027");
      DataNode dataNode0 = new DataNode("java.lang.string@0000000027");
      Document document1 = (Document)document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        document1.wrap("1*8P|HDye(/");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ain", "ain");
      Element element0 = document0.body();
      element0.setSiblingIndex((-842));
      // Undeclared exception!
      try { 
        element0.wholeText();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("Q/w`Ec7Xo", "1e9Z]6?-'s(;*)`U)");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("1e9Z]6?-'s(;*)`U)");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.settings((ParseSettings) null);
      StringReader stringReader0 = new StringReader("jo");
      Document document0 = parser0.parseInput((Reader) stringReader0, "_uwhxv");
      // Undeclared exception!
      try { 
        document0.val("</");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document("vawuP");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("dl", "dl");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("noframes", "noframes");
      DataNode dataNode0 = new DataNode((String) null);
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%#", "%#");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.tagName("*X*>#zDLLG:AD{90Vg");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Vy.{_ceZ>a7kcDB", "Vy.{_ceZ>a7kcDB");
      Tag tag0 = Tag.valueOf("A5y`%vuM@Qxm");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "t6g name must not be empty.", attributes0);
      Element element0 = document0.doClone(pseudoTextElement0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell(",;@EOJlFj57[tIv^l");
      // Undeclared exception!
      try { 
        document0.selectFirst("@[^");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@[^': unexpected token at '@[^'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("6 l-kcP[%+k");
      // Undeclared exception!
      try { 
        document0.selectFirst("6 l-kcP[%+k");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'k'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("valuP", "valuP");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.select("java.lang.string@0000000053 x3n name must not be empty.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'java.lang.string@0000000053 x3n name must not be empty.': unexpected token at '@0000000053 x3n name must not be empty.'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("|sA", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "JOw&O@d]-^ahv 5", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("e0", "e0");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*~~-p", "*~~-p");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prependElement("insert position out f bounds.");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Document.createShell("[h");
      Element element0 = document0.prepend("[h");
      List<Node> list0 = document0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("[h");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("dl");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("4liDoing");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.prependChild(document0.parentNode);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0", "0");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prepend("<:nP]$j^u.n|,d0eW");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("main");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+Wd/mC", "+Wd/mC");
      TextNode textNode0 = new TextNode("java.lang.string@0000000066");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".kv0W!*-", ".kv0W!*-");
      MockFile mockFile0 = new MockFile("aAOp9V%");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1556);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 1556, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a@C:)^v", "a@C:)^v");
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 8, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Tag tag0 = Tag.valueOf("99O0&M#fhQ7*t]X");
      Element element0 = new Element(tag0, "99O0&M#fhQ7*t]X");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((Appendable) null, 18, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EUS8u[E/4tSw] g >", "EUS8u[E/4tSw] g >");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, (-764), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000027", "java.lang.string@0000000027");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 10, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("dl", "dl");
      StringWriter stringWriter0 = new StringWriter(2885);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2885);
      // Undeclared exception!
      document0.outerHtmlHead(stringWriter0, 3414, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Tag tag0 = Tag.valueOf("liDtoing");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "gz<I~tR,KjHpjuBVj?*", attributes0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "gz<I~tR,KjHpjuBVj?*");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        formElement0.outerHtmlHead(charBuffer0, 1327, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000027", "java.lang.string@0000000027");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 193, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Tag tag0 = Tag.valueOf("java.lang.string@0000000027");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        formElement0.outerHtmlHead(stringWriter0, (-1), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":lt(%d)", "7<_H]MU{=J)^");
      TextNode textNode0 = TextNode.createFromEncoded("7Kjw#3>>1", "7Kjw#3>>1");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("bdl", "bdl");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S>kn", "S>kn");
      document0.parentNode = (Node) document0;
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("S>kn");
      // Undeclared exception!
      document0.is((Evaluator) evaluator_TagEndsWith0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("Q-0UUgR,L~]~9");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("oY");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bq", "bq");
      Comment comment0 = new Comment("org.jsoup.select.Evaluator$Tag", "head");
      document0.setParentNode(comment0);
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsLastChild0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Comment cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("\"ag nae mus; not #e empty.");
      // Undeclared exception!
      try { 
        document0.is("java.lang.string@0000000048");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'java.lang.string@0000000048': unexpected token at '@0000000048'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("listing", "listing");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.is("I2w");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Node[] nodeArray0 = document0.childNodesAsArray();
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Document.createShell("N%(");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.html("org.jsoup.nodes.PseudoTextElement");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Element element0 = new Element("JX.FigwE");
      // Undeclared exception!
      try { 
        element0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":", ":");
      TextNode textNode0 = new TextNode(":");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.html("wW25S_v:r6% E$]-Q");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0", "0");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Vy.{_ceZ>a7kcDB", "Vy.{_ceZ>a7kcDB");
      document0.parentNode = (Node) document0;
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      document0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse(":l7(%d)", ":l7(%d)");
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K", "j<H*Ak9=");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Document.createShell("listing");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("\"SWAequ");
      DataNode dataNode0 = new DataNode("java.lang.string@0000000102", "java.lang.string@0000000102");
      document0.parentNode = (Node) dataNode0;
      Element element0 = document0.text("\"SWAequ");
      // Undeclared exception!
      try { 
        element0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.appendText("BHWH\u0000p<mZO)s%W:6R");
      element1.siblingIndex = (-772);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("G@+{(!6.=*,:P934Y");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p{:", "p{:");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("p{:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: p{:
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("bm", "bm");
      DataNode dataNode0 = DataNode.createFromEncoded("bm", "bm");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("bm");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("li~Doing", "li~Doing");
      document0.siblingIndex = (-1729800603);
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("li~Doing");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = new Document(";@EOJlFj57[HtIv^l");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Document.createShell("dl");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("d w=k", "d w=k");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("C&VEj0C#iP{Q;!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: C&VEj0C#iP{Q;!
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000027", "java.lang.string@0000000027");
      Comment comment0 = new Comment("java.lang.string@0000000027");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("java.lang.string@0000000027");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document("bO");
      Element element0 = document0.appendElement("bO");
      element0.setSiblingIndex((-2453));
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("bO");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h@qu=", "^");
      DataNode dataNode0 = DataNode.createFromEncoded("^", "h@qu=");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("q/ie0!WT9lI");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("R\"eS=M9bQWHkJ", "R\"eS=M9bQWHkJ");
      Element element0 = document0.appendElement("R\"eS=M9bQWHkJ");
      element0.setSiblingIndex((-109));
      // Undeclared exception!
      try { 
        element0.getElementsContainingText("R\"eS=M9bQWHkJ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out f bounds.", "Insert position out f bounds.");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("e{HHn", "e{HHn");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = new Document("l");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$1");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(53);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ain", "ain");
      Element element0 = document0.body();
      element0.setSiblingIndex((-842));
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(362);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out f bounds.", "Insert position out f bounds.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("Insert position out f bounds.", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("dl", "dl");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("#root", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell(",;@EOJlFj57[tIv^l");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("#root", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.appendText("BHWH\u0000p<mZO)s%W:6R");
      element1.siblingIndex = (-772);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, "9A");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeName");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$1");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("[<6|]q~_szG.", "Insert position out of bounds.");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes0.putIgnoreCase("sce*eavrgj-2", "Did not find balanced marker at '");
      String[] stringArray0 = new String[1];
      attributes1.vals = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "[<6|]q~_szG.", attributes1);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueEnding("sce*eavrgj-2", "Did not find balanced marker at '");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf(":nth-child(%d)", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, ":nth-child(%d)", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueContaining((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.UncheckedIOException", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.UncheckedIOException", "\"_U0HQq>^,h|6ivo8Ri");
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.UncheckedIOException", attributes1);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeStarting("&YGjM,2n1k!");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$3^]RD-8jbh&gdx,", "$3^]RD-8jbh&gdx,");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementById("$3^]RD-8jbh&gdx,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell("7\"\"CS=M9bQWHaJA");
      document0.parentNode = (Node) document0;
      document0.siblingIndex = (-784);
      // Undeclared exception!
      try { 
        document0.getElementById("h(=rK,");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "value");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = new Document("script");
      CDataNode cDataNode0 = new CDataNode(".");
      cDataNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".%s", ".%s");
      Element element0 = document0.body();
      element0.toggleClass("footer");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000054': unexpected token at '@0000000054'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Element element0 = new Element("dhead");
      Element element1 = element0.prependElement("6 l-kcP[%+k");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'k'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.child(4259);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4259, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Tag tag0 = Tag.valueOf("m,juob");
      CDataNode cDataNode0 = new CDataNode("W$c9HFlzR1@=2(");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ")k{rh/'aEp{SfcL", attributes0);
      // Undeclared exception!
      try { 
        formElement0.child((-138));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K", "K");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.before("java.lang.String@0000000076");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr("", "");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vaeuM", "vaeuM");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bq", "bq");
      DocumentType documentType0 = new DocumentType("bq", "Y)VKZR4CA_ob", "bq");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("v1;PMGf05zq", "?#!|ZgN2DbbWod.iwp*");
      Element element0 = document0.appendElement("?#!|ZgN2DbbWod.iwp*");
      document0.empty();
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("z2v)bE!g|fo=L3c", "z2v)bE!g|fo=L3c");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("abbr");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement(":containsOwn");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("script", "Pe:i>:Qq6$Mk7O!9-!)");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      List<Node> list0 = Parser.parseXmlFragment("lKyFb :H", "lKyFb :H");
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document1.appendElement("@%z!h4(rm]N");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("}eQ}^>(`|);^>5m;&h", "}eQ}^>(`|);^>5m;&h");
      Parser parser0 = Parser.htmlParser();
      parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser0);
      // Undeclared exception!
      try { 
        document1.appendElement("5)Q}h]gDa}ED6IHqB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = new Document("h=RHz>u3");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Comment comment0 = new Comment("br");
      TextNode textNode0 = TextNode.createFromEncoded("", "");
      comment0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.appendChild(comment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[%s~=%s]", "pFz0Rvc0RUC0&.zoK*z");
      Element element0 = document0.head();
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ain", "ain");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K", "j<H*Ak9=");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.append("K");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.element$2", "org.jsoup.nodes.element$2");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      CDataNode cDataNode0 = new CDataNode("6dqva3TI+_kqBS");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.append("br");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000035");
      document0.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = new Document("^#9!&R-uIsl");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.after("s");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "?[!le&K#ICSbK");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("C):h:&W#Y y)^T.**O");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "C):h:&W#Y y)^T.**O", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Tag tag0 = Tag.valueOf("KWJc{^6");
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000027", "java.lang.string@0000000027");
      Element element0 = document0.appendElement("textarea");
      element0.html((MockFileWriter) null);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("main");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("main");
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      document0.prepend("head");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("z2v)bE!g|fo=L3c", "z2v)bE!g|fo=L3c");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "org.jsoup.nodes.Element");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("main");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ain", "ain");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("main");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("main");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out f bounds.", "Insert position out f bounds.");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("hl");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "?[!le&K#ICSbK");
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      document0.is((Evaluator) evaluator_IsOnlyChild0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.select(",h**B[HQz<$T5%@");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '@'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = new Document("p{:");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("e0", "e0");
      // Undeclared exception!
      try { 
        document0.html((MockPrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      element0.prependElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000027 id", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        formElement0.outerHtmlHead((Appendable) null, 3800, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("liDtSong", "P,,Evy4i");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sCE*eAvRgj-2", "sCE*eAvRgj-2");
      document0.tagName("textarea");
      document0.val("Ep");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("g=$8j$fDG7}|T9GOp");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("EUS8u[E/4tSw] g >", "java.lang.string@0000000027");
      document0.addClass("FN");
      Element element0 = document0.addClass("FN");
      element0.toggleClass("FN");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.addClass("org.jsoup.nodes.Element");
      document0.hasClass("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("\"ag nae mus; not #e empty.");
      document0.nextElementSiblings();
      document0.addClass("\"ag nae mus; not #e empty.");
      Element element0 = document0.addClass("\"ag nae mus; not #e empty.");
      element0.hasClass("java.lang.string@0000000048");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K", "K");
      Element element0 = document0.addClass("K");
      element0.addClass(" ");
      document0.hasClass("{|n~~Jft70^");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".kv0W!*-", ".kv0W!*-");
      document0.addClass("java.lang.string@0000000027");
      document0.addClass("java.lang.string@0000000027");
      document0.hasClass("java.lang.string@0000000027");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("valuP", "valuP");
      Element element0 = document0.addClass("valuP");
      element0.hasClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("liDtSong", "liDtSong");
      document0.hasClass("liDtSong");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("6rspN)#cCi8uH%d-", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("b,");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "b,", attributes0);
      formElement0.prependChild(cDataNode0);
      formElement0.data();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a/Gsp_v#jvA", "a/Gsp_v#jvA");
      DataNode dataNode0 = DataNode.createFromEncoded("a/Gsp_v#jvA", "Pattern syntax error: ");
      document0.prependChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000027", "java.lang.string@0000000027");
      DataNode dataNode0 = new DataNode("java.lang.string@0000000027", "HTX~{");
      document0.prependChild(dataNode0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("pQDs@c*22y6w!^");
      Element.preserveWhitespace(textNode0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Initial");
      document0.title(":lt(%d)");
      document0.getElementsMatchingOwnText("java.lang.string@0000000027");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l");
      DocumentType documentType0 = new DocumentType(";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l");
      document0.appendChild(documentType0);
      document0.getElementsContainingOwnText(";@EOJlFj57[HtIv^l");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("Pattern syntax error: ");
      Document document0 = parser0.parseInput((Reader) stringReader0, "0Y");
      document0.append("Pattern syntax error: ");
      document0.getElementsMatchingText("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert po`ition out f bounds.", "Insert po`ition out f bounds.");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000038");
      document0.appendChild(cDataNode0);
      document0.getElementsMatchingText("K5%t3");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "br");
      document0.appendElement("br");
      document0.getElementsMatchingText("tag name must not be empty. s$jnnp';29p\"=$f");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K", "K");
      document0.parentNode = (Node) document0;
      Document document1 = Parser.parseBodyFragment("K", "{ML%");
      Element element0 = document0.after((Node) document1);
      Pattern pattern0 = Pattern.compile("i");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("htm l", "htm l");
      document0.charset(charset0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$3^]RD-8jbh&gdx,", "$3^]RD-8jbh&gdx,");
      document0.getElementById("$3^]RD-8jbh&gdx,");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("hl");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K", "j<H*Ak9=");
      document0.parentNode = (Node) document0;
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("6 l-kcp[%+k");
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.parser.Token$1", "java.lang.string@0000000047");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("ain");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      
      Elements elements0 = element1.nextElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals("ain", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("ain");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("ain", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = new Document("");
      document0.parentNode = (Node) document0;
      Elements elements0 = document0.nextElementSiblings();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Document.createShell(".");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(".", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document(",;@EOJlFj57[tIv^l");
      document0.siblingElements();
      assertEquals(",;@EOJlFj57[tIv^l", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p{:", "p{:");
      Element element0 = document0.body();
      Element element1 = element0.append("(:WT");
      element1.after("p{:");
      element0.cssSelector();
      assertEquals(2, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("d w=k", "d w=k");
      document0.toggleClass("!#root");
      document0.cssSelector();
      assertEquals("d w=k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("main");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(1276, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vVy", "vVy");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1433506051), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = new Document("7\"\"CS=M9bQWHaJA");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals("7\"\"CS=M9bQWHaJA", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p{:", "p{:");
      Elements elements0 = document0.getElementsByAttributeValueNot("p{:", "0");
      // Undeclared exception!
      try { 
        document0.insertChildren(1, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse("dl", "dl");
      Pattern pattern0 = Pattern.compile("vZre", 3414);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-4740), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("dl", "dl");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren(3414, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Element", "|olRi&");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("MgAC", "org.jsoup.helper.Validate");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("org.jsoup.helper.Validate", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(" />", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Tag name must not be empty.");
      Element element0 = document0.body();
      element0.text(" > ");
      Elements elements0 = element0.children();
      assertEquals(1, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals("Tag name must not be empty.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("0", "0");
      document0.parentNode = (Node) document0;
      Elements elements0 = document0.siblingElements();
      assertFalse(elements0.isEmpty());
      
      Element element0 = document0.firstElementSibling();
      assertEquals("0", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "?[!le&K#ICSbK");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1200));
      assertEquals(4, elements0.size());
      assertEquals("?[!le&K#ICSbK", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4liDoing", "4liDoing");
      Element element0 = document0.selectFirst("*");
      assertEquals(1, element0.childNodeSize());
      assertEquals("4liDoing", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("g=$8j$fDG7}|T9GOp");
      document0.getElementsByTag("#");
      assertEquals("g=$8j$fDG7}|T9GOp", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ain", "ain");
      document0.getAllElements();
      assertEquals("ain", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ain", "ain");
      Element element0 = document0.removeClass("ain");
      assertEquals("ain", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      // Undeclared exception!
      try { 
        document0.before("#root");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("ain");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out f bounds.");
      document0.getElementsByAttributeValueNot(" ", " ");
      assertEquals("Insert position out f bounds.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("valuP", "valuP");
      Element element0 = document0.shallowClone();
      assertEquals("valuP", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K", "EUS8u[E/4tSw] g >");
      document0.doSetBaseUri("#root");
      assertEquals("#root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("main", "main");
      document0.getElementsByAttributeValueContaining("main", "(pR6RfUV-<:OV");
      assertEquals(1, document0.childNodeSize());
      assertEquals("main", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000027", "java.lang.string@0000000027");
      Pattern pattern0 = Pattern.compile(":");
      Elements elements0 = document0.getElementsByAttributeValueMatching((String) null, pattern0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parse("R\"eS=M9bQWHkJ", "R\"eS=M9bQWHkJ");
      Elements elements0 = document0.getElementsContainingText("R\"eS=M9bQWHkJ");
      assertEquals(3, elements0.size());
      assertEquals("R\"eS=M9bQWHkJ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "?[!le&K#ICSbK");
      document0.getElementsByAttributeValueEnding("4/8qfA#", "br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("?[!le&K#ICSbK", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("listing", "listing");
      document0.is("I2w");
      assertEquals("listing", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = new Document(",;@EOJlFj57[tIv^l");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("?=", ",;@EOJlFj57[tIv^l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ,;@EOJlFj57[tIv^l
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("EUS8u[E/4tSw] g >", "java.lang.string@0000000027");
      Elements elements0 = document0.getElementsByIndexEquals(22);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Document.createShell("main");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Elements elements0 = document0.getElementsByIndexLessThan(8);
      assertEquals("br", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document$QuirksMode", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.after("GB+Sfg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("0", "0");
      Elements elements0 = document0.getElementsMatchingOwnText("0");
      assertEquals(1, elements0.size());
      assertEquals("0", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EUS8u[E/4tSw] g >", "EUS8u[E/4tSw] g >");
      document0.prepend("\n");
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "org.jsoup.nodes.Element");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "value");
      document0.getElementsByAttributeValueStarting("value", "0DKxU2m");
      assertEquals(1, document0.childNodeSize());
      assertEquals("value", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vVy", "vVy");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ain", "ain");
      document0.wholeText();
      assertEquals("ain", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p{:", "p{:");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Element element0 = new Element("Insert po`ition outf bounds.");
      String string0 = element0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out f bounds.");
      document0.addClass("Insert position out f bounds.");
      boolean boolean0 = document0.hasClass("T[gyAame must not b5 e(pty.");
      assertEquals("Insert position out f bounds.", document0.baseUri());
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K", "j<H*Ak9=");
      Elements elements0 = document0.getElementsContainingOwnText("GowbE$fFB|cYqG7:");
      assertEquals("j<H*Ak9=", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Pm", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "pC7) k}E[0w", attributes0);
      formElement0.dataset();
      assertEquals("pC7) k}E[0w", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Document.createShell("bq");
      document0.tagName("textarea");
      document0.val();
      assertEquals("bq", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l");
      document0.prependText("valup");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      Element element0 = document0.child(0);
      assertEquals("html", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Document.createShell("6 l-kcp[%+k");
      document0.previousElementSiblings();
      assertEquals("6 l-kcp[%+k", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("be", "be");
      Element element0 = document0.prependElement("be");
      element0.wrap("V,yFE_gY");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vvluy", "MTQX]1");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendText("BHWH\u0000p<mZO)s%W:6R");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";@EOJlFj57[HtIv^l", ";@EOJlFj57[HtIv^l");
      // Undeclared exception!
      try { 
        document0.wrap(";@EOJlFj57[HtIv^l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
