/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:11:06 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.FormatFlagsConversionMismatchException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a#8J`=", "a#8J`=");
      document0.siblingIndex = (-467);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("N3PX1");
      document0.addClass("samp");
      document0.toggleClass("Tag name must not be empty.");
      document0.hasClass("head");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "&'bQnRju/AlDX");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("9S.?=", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("F#zd");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "head", attributes0);
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("");
      document0.parentNode = (Node) document0;
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("dU}idNp{7IL");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexEquals((-2007));
      // Undeclared exception!
      try { 
        document0.insertChildren((-2007), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(".ashg(8w6F`", "7Y;%Opj-a!;}?BY");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Hd6Q", "Hd6Q");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = new Document("3+2_+vbR~l8=@");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.doSetBaseUri("");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = new Document("a#8J`=");
      Document document1 = Parser.parseBodyFragment("a#8J`=", "a#8J`=");
      document1.parentNode = (Node) document0;
      document1.wrap("#root");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9p~f?i3", "9p~f?i3");
      Element element0 = document0.head();
      element0.tagName(".ashg(8w6F`");
      element0.wrap("Ax]/T{%B");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9p~f?i3", "9p~f?i3");
      Element element0 = document0.head();
      element0.wrap("Ax]/T{%B");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Hd6Q", "Hd6Q");
      Element element0 = document0.body();
      element0.wrap("Hd6Q");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"`0Wlyb", "\"`0Wlyb");
      document0.siblingIndex = (-1625949436);
      document0.val("\"`0Wlyb");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("Hd6Q");
      Element element0 = document0.body();
      element0.val("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("a#8J`=");
      Element element0 = document0.val("a#8J`=");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("a#8J`=");
      Element element0 = document0.appendTo(document0);
      element0.toggleClass("a#8J`=");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("attributeValueUnquoted", "Insert position out of bounds.");
      document0.siblingIndex = (-356);
      document0.toggleClass("java.lang.string@0000000141");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("PLAINTEXT", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "o%5u", attributes0);
      Document document0 = new Document("?b1%F@1");
      Element element0 = formElement0.appendTo(document0);
      element0.toggleClass("Should not be reachable");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`*", "a#8J`*");
      Element element0 = document0.body();
      element0.text("org.jsoup.helper.HttpConnection$Response");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`*", "a#8J`*");
      document0.text("org.jsoup.helper.HttpConnection$Response");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Element element0 = new Element("batxToic");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("2)", "3+2_+vbR(l8F");
      document0.tagName("html");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("Hd6Q");
      Element element0 = document0.body();
      element0.tagName("seamless");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s\"KD:", "org.jsoup.internal.Normalizer");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element element0 = new Element("3+2_+vbR~l8=@");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`*", "a#8J`*");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("href", "Ol!s#E8(*35%tmqt");
      document0.selectFirst("href");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Element element0 = new Element("batxToic");
      element0.selectFirst("batxToic");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("body", "muted");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = new Document("dU}idNp{7IL");
      document0.select("e");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      formElement0.select("id");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Element element0 = document0.body();
      element0.removeClass("id");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`*", "a#8J`*");
      Element element0 = document0.body();
      element0.prependText("a#8J`*");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("%u", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "q:r`", attributes0);
      formElement0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Element element0 = new Element("s\"KD:");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("s\"KD:", "/xa?%G");
      element0.appendTo(document0);
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Hd6Q", "Hd6Q");
      Element element0 = document0.child(0);
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      Element element0 = document0.body();
      element0.prepend("+Tstn 4gjq6C]o(h.tQ");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document("h!&F");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&52e}x7`FH0;v", "");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Hd6Q", "Hd6Q");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = new Document("a#8J`=");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      Document document0 = Parser.parseBodyFragment("id", "promp5t");
      Element element0 = formElement0.prependElement("Q9}");
      formElement0.appendTo(document0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Element element0 = document0.doClone(document0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Hd6Q", "Hd6Q");
      Element element0 = document0.child(0);
      Element element1 = document0.body();
      element0.empty();
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("s\"KD:", "/xa?%G");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("#8J`", "#8J`");
      Document document1 = document0.clone();
      document1.parentNode = (Node) document0;
      Element element0 = document1.after((Node) document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cv", "cv");
      Tag tag0 = Tag.valueOf("eK;b1z.# KGrhAdy\"-r");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "~U*qt", attributes0);
      formElement0.appendTo(document0);
      formElement0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a#8J`=", "a#8J`=");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Element element0 = new Element("4Up5#ta2VscT,axA&~:");
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("4Up5#ta2VscT,axA&~:");
      element0.is((Evaluator) evaluator_Tag0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("OT&|bH0IWfF17?I,q", "OT&|bH0IWfF17?I,q");
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-644), (-644));
      document0.is((Evaluator) evaluator_IsNthLastOfType0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Tag tag0 = Tag.valueOf("BeforeAttributeName");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "BeforeAttributeName", attributes0);
      pseudoTextElement0.is("BeforeAttributeName");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a#8J`=", "java.lang.string@0000000093");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`=", "a#8J`=");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("3+2_+vbR~l8=@", "3+2_+vbR~l8=@");
      Element element0 = document0.body();
      Elements elements0 = document0.previousElementSiblings();
      element0.insertChildren(1, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Element element0 = document0.body();
      element0.html("8HP@Js2wKN3>&");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aJM7", "datalist");
      Element element0 = document0.appendElement("datalist");
      Element element1 = element0.val("aJM7");
      element1.html("Zi%4F6%81<&b<v/ts+K");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aJM7", "datalist");
      document0.html("Zi%4F6%81<&b<v/ts+K");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("#8J`");
      document0.html((CharBuffer) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RcdataLessthanSign");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "RcdataLessthanSign", attributes0);
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("OT&|bH0IWfF17?I,q", "OT&|bH0IWfF17?I,q");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Pattern pattern0 = Pattern.compile("br", 32);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s\"KD:", "org.jsoup.internal.Normalizer");
      document0.getElementsMatchingText("s\"KD:");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      Pattern pattern0 = Pattern.compile("", (-3620));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a#8J`=", "");
      document0.getElementsMatchingOwnText("a#8J`=");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = new Document("a#8J`=");
      document0.getElementsContainingOwnText("{xvb");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("nav", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("html");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "html", attributes0);
      element0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("Hd6Q");
      document0.getElementsByTag("head");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("([+-])?(d+)", "([+-])?(d+)");
      document0.getElementsByIndexLessThan(1189);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Element element0 = new Element("s\"KD:");
      element0.getElementsByIndexGreaterThan((-1121));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".ashg(8w6F`", ".ashg(8w6F`");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("cv");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("cv", "cv");
      FormElement formElement0 = new FormElement(tag0, "cv", attributes1);
      formElement0.getElementsByAttributeValueStarting("cv", "cv");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      document0.getElementsByAttributeValueNot("&52e}x7`FH0;v", " ");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("dU}idNp{7IL");
      document0.getElementsByAttributeValueMatching("#root", "html");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse(".ashg(8w6F`", ".ashg(8w6F`");
      Element element0 = document0.toggleClass("class");
      element0.getElementsByAttributeStarting("class");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Element element0 = new Element("3+2_+vbR~l8=@");
      element0.getElementsByAttribute("  fpX'3%U,7, v");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      document0.addClass("+Tstn 4gjq6C]o(h.tQ");
      document0.getElementsByAttribute("class");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse(".ashg(8w6F`", ".ashg(8w6F`");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("%u", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "q:r`", attributes0);
      Element element0 = formElement0.appendTo(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a#8J`=", "a#8J`=");
      document0.siblingIndex = (-467);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a#8J`=", "a#8J`=");
      Element element0 = document0.appendTo(document0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("dmNL", "dmNL");
      document0.siblingIndex = (-3);
      TextNode textNode0 = TextNode.createFromEncoded("a@*n/", "dmNL");
      document0.doClone(textNode0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("3+2_+vbR~l8=@", "3+2_+vbR~l8=@");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Element element0 = new Element("u}o&qYjeU{u|Py_");
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000038", "GbU:\"(Xsl{");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a#8J`=", "a#8J`=");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("dU}idNp{7IL");
      Element element0 = document0.doClone(document0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#cdata", "body");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      Element element0 = document0.addClass("comment");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("hd6q");
      Element element0 = document0.toggleClass("s\"KD:");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Hd6Q", "Hd6Q");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ".", attributes0);
      formElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`=", "a#8J`=");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|cDb%", "|cDb%");
      Document document1 = document0.clone();
      document1.parentNode = (Node) document0;
      document1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("a#8`*", "a#8`*");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000093 comment #root");
      Document document1 = Parser.parseBodyFragment("java.lang.string@0000000093 comment #root", "java.lang.string@0000000093 comment #root");
      document1.parentNode = (Node) document0;
      document1.before("java.lang.string@0000000093 comment #root");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a#8J`=", "dtatalit");
      Element element0 = document0.appendElement("dtatalit");
      element0.before("WJyc4|ES");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("OT&|bH0IWfF17?I,q", "OT&|bH0IWfF17?I,q");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document(" />");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`=", "a#8J`=");
      Element element0 = document0.body();
      element0.attr("a#8J`=", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Element element0 = new Element("s\"KD:");
      element0.attr("#root", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("dU}idNp{7IL");
      Element element0 = document0.body();
      element0.attr("s\"KD:", "B&fIk.]");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("a#8J`=");
      Document document1 = Parser.parseBodyFragment("a#8J`=", "a#8J`=");
      document1.parentNode = (Node) document0;
      document1.attr("html", "FDEAs#|?T<~9:");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Element element0 = new Element("3+2_+vbR~l8=@");
      element0.attr(";I!VPURea.", "  fpX'3%U,7, v");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a#8J`*", "a#8J`*");
      Element element0 = document0.body();
      element0.appendText("html > body");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Z\"\u0003{3", "Z\"\u0003{3");
      DataNode dataNode0 = DataNode.createFromEncoded("Z\"\u0003{3", "bj=x+y<bfR~n");
      document0.setParentNode(dataNode0);
      document0.appendText("Z\"\u0003{3");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("%u", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "q:r`", attributes0);
      formElement0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a#8J`=", "dtatalit");
      document0.siblingIndex = (-3204);
      Element element0 = document0.appendElement("dtatalit");
      document0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("#8J`", "#8J`");
      Element element0 = document0.appendTo(document0);
      Tag tag0 = Tag.valueOf("#8J`");
      CDataNode cDataNode0 = new CDataNode("|UFj");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "#8J`", attributes0);
      element0.after((Node) formElement0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Hd6Q", "Hd6Q");
      Element element0 = document0.child(0);
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("#8J`", "#8J`");
      Document document1 = new Document("#8J`");
      document1.parentNode = (Node) document0;
      document1.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9p~f?i3", "9p~f?i3");
      Element element0 = document0.head();
      element0.after("");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse(".ashg(8w6F`", ".ashg(8w6F`");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("%u", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "q:r`", attributes0);
      formElement0.appendTo(document0);
      formElement0.after("QnCSUcS:$};Gd(B0L");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`*", "a#8J`*");
      Element element0 = document0.body();
      element0.after("K:IY99<s+BP");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      document0.setSiblingIndex((-2));
      document0.addClass("comment");
      document0.addClass("3+2_+vbR~l8=@");
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AO", "");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("|0=86%kibgrj&P<pw!");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("U8HfMMuL[", "U8HfMMuL[");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a#8J`=", "datalist");
      Element element0 = document0.appendElement("datalist");
      element0.before((Node) document0);
      // Undeclared exception!
      element0.val("a#8J`=");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("([+-])?(d+)", "action");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      // Undeclared exception!
      try { 
        document0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`=", "a#8J`=");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`=", "a#8J`=");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document0.tagName("a#8J`=");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Q", "Q");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("og.jsoupselect.StructuralEvluator$Not", "_;@5xkrGb&<WFCNx*");
      Tag tag0 = Tag.valueOf("N.xL9");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "dEi%E~7d", attributes0);
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
      try { 
        element1.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("embed", "S");
      // Undeclared exception!
      try { 
        document0.select("m%ek1=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'm%ek1=': unexpected token at '%ek1='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document(";vBU");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a#8J`=", "");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000172", "java.lang.string@0000000172");
      document0.childNodes = null;
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("3+2_+vbR~l8=@", "3+2_+vbR~l8=@");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("#8J`", "#8J`");
      Document document1 = Parser.parseBodyFragment("#8J`", "#8J`");
      document1.parentNode = (Node) document0;
      document1.after((Node) document0);
      // Undeclared exception!
      document0.prependElement("#8J`");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("", "o.Nl");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$m=H:|Vudga/K", "$m=H:|Vudga/K");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("#8J`", "#8J`");
      Document document1 = Parser.parseBodyFragment("#8J`", "#8J`");
      document1.parentNode = (Node) document0;
      document1.after((Node) document0);
      // Undeclared exception!
      document1.prepend("0 TE3;'2R");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a#8J`*", "a#8J`*");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.prepend("class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|`)-r$a$S", "|`)-r$a$S");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("$F5Kk7W=+<Tm j$@!v", "$F5Kk7W=+<Tm j$@!v");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("$F5Kk7W=+<Tm j$@!v", "$F5Kk7W=+<Tm j$@!v", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.prepend("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("/Zhm)S)tCFK+[JP;2", "/Zhm)S)tCFK+[JP;2");
      MockFile mockFile0 = new MockFile("/Zhm)S)tCFK+[JP;2", "java.lang.string@0000000052");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1348);
      // Undeclared exception!
      document0.outerHtmlTail(mockFileWriter0, 1348, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$AttributeWithValueMatching", "org.jsoup.select.Evaluator$AttributeWithValueMatching");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(objectOutputStream0, charset0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(outputStreamWriter0, (-4326), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.SlemQnt");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-45), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000093 comment #root");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 68, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#8J`", "#8J`");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2959);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2959);
      // Undeclared exception!
      document0.outerHtmlHead(charArrayWriter0, 7, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("3+2_:+vWR~8@");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "3+2_:+vWR~8@");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-5484), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("aG8K)`=", "aG8K)`=");
      MockFile mockFile0 = new MockFile(" > ", " > ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, 5720, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1.0", "1.0");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringWriter0, (-2), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("batxToic", ":contains(");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, (-327), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = new Document(" />");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Element element0 = new Element("P3s''G_?vh=TxR6");
      // Undeclared exception!
      try { 
        element0.is("P3s''G_?vh=TxR6");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'P3s''G_?vh=TxR6': unexpected token at '''G_?vh=TxR6'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse(".", ".");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("#root");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Hd6Q", "Hd6Q");
      // Undeclared exception!
      try { 
        document0.is("K[%,H^@,U*%!;0G2t<v");
        fail("Expecting exception: FormatFlagsConversionMismatchException");
      
      } catch(FormatFlagsConversionMismatchException e) {
         //
         // Conversion = h, Flags = ,
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "AttributeValue_unquoted");
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.is("LHdataioit");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a#8Jr`=", "a#8Jr`=");
      Node[] nodeArray0 = new Node[8];
      Comment comment0 = new Comment("textarea", "a#8Jr`=");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      nodeArray0[0] = (Node) xmlDeclaration0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("#8J`", "#8J`");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document1;
      // Undeclared exception!
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Element element0 = new Element("dtatalit");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("dtatalit", element0, "dtatalit");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.html("java.lang.string@0000000014");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zhm)S)tCFK[JP;2", "Zhm)S)tCFK[JP;2");
      Element element0 = document0.appendElement("><[<E]RJ");
      DataNode dataNode0 = new DataNode("><[<E]RJ");
      element0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        element0.html("org.jsoup.nodes.Element");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "prompt");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("#8J`", "#8J`");
      Document document1 = Parser.parseBodyFragment("#8J`", "#8J`");
      document1.parentNode = (Node) document0;
      document1.after((Node) document0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("org.jsoup.nodes.Element$2");
      // Undeclared exception!
      document1.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("#gH%o8");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "#gH%o8");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell(" />");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("#8J`", "#8J`");
      Document document1 = document0.clone();
      document1.parentNode = (Node) document1;
      // Undeclared exception!
      document1.html();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("GQY^", "GQY^");
      DataNode dataNode0 = new DataNode("_n%.\">xKQ$Ln0T", (String) null);
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("3+X_+vbt_R~,8=@", "3+X_+vbt_R~,8=@");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("a#8J`=");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("OT&|bH0IWfF17?I,q", "OT&|bH0IWfF17?I,q");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(" zot){:Ap3DJa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error:  zot){:Ap3DJa
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "3+2_+vbR~l8=@");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("OT&|bH0IWfF17?I,q", "OT&|bH0IWfF17?I,q");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s\"KD:", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("aMddNW;iwk8n(!TU:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: aMddNW;iwk8n(!TU:
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("??aJg", "??aJg");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("??aJg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Z\"\u0003{3", "Z\"\u0003{3");
      DataNode dataNode0 = DataNode.createFromEncoded("Z\"\u0003{3", "bj=x+y<bfR~n");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("Z\"\u0003{3");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("n#=TVENKetM:k{", "n#=TVENKetM:k{");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("n#=TVENKetM:k{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("Hd6Q");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`i", "`i");
      Comment comment0 = new Comment("                    ");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(2569);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("dtatalit", "dtatalit");
      Comment comment0 = new Comment("", "");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(187);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = new Document("param");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Tag tag0 = Tag.valueOf("AO");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "AO", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueStarting("AO", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("               ", "               ");
      Document document1 = document0.parser((Parser) null);
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("               ", "hLxA?~{mI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, "eof");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "G#5 oa9W? qJ<|3<?");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("c\"scke");
      document0.attr("c\"scke", true);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("c\"scke", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000093 comment #root");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Tag tag0 = Tag.valueOf("%3Kf35ctc6jEU]wr:fL");
      Element element0 = new Element(tag0, "%3Kf35ctc6jEU]wr:fL");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding("VH\"yvsWy*", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Element element0 = new Element("org.jsoup.select.Evaluator$IsRoot");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("S7g4dIcMh+$", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Tag tag0 = Tag.valueOf("hd6q");
      CDataNode cDataNode0 = new CDataNode("hd6q");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, " > ", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining((String) null, " > ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&52e}x7`FH0;v", "&52e}x7`FH0;v");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "+Tstn 4gjq6C]o(h.tQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = new Document("a#8J`=");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("checked", "x\"eL<_t|@V2on1");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementById("head");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a#8Jr`=", "a#8Jr`=");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bataioig", "bataioig");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getAllElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = new Document("h!&F");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?-t!xh2bv;%");
      CDataNode cDataNode0 = new CDataNode("?-t!xh2bv;%");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "?-t!xh2bv;%", attributes0);
      Element element0 = formElement0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zhm)S)tCFK[JP;2", "Zhm)S)tCFK[JP;2");
      Element element0 = document0.appendElement("><[<E]RJ");
      DataNode dataNode0 = new DataNode("><[<E]RJ");
      element0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        element0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = new Document("java.lang.string@000000,)93 comment #root");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      Element element0 = document0.body();
      element0.addClass("java.lang.string@0000000093 comment #root");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000054': unexpected token at '@0000000054'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("8d5T\"p@I", "8d5T\"p@I");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = new Document("(k|W{6^p@8_<8([");
      // Undeclared exception!
      try { 
        document0.child(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$m=H:|Vudga/K", "$m=H:|Vudga/K");
      // Undeclared exception!
      try { 
        document0.child((-2007));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell("Xn");
      CDataNode cDataNode0 = new CDataNode("Xn");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.before((Node) cDataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000093 pomme]t #root", "9w2L4U`/rbu=\"lm");
      Element element0 = document0.body();
      element0.replaceWith(document0);
      // Undeclared exception!
      document0.before("java.lang.string@0000000093 pomme]t #root");
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("promp5t", "cv");
      DataNode dataNode0 = new DataNode("<F*tPbFzz}&tB9");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.before("cv");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Document document1 = (Document)document0.appendChild(document0);
      // Undeclared exception!
      document1.attr("Children collection to be inserted must not be null.", "j%Q^fj&Yw#}U6FwY>");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("br", "|dl%`\"");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("2Y:gySA({");
      CDataNode cDataNode0 = new CDataNode("WFg%$X/o!wY0T~");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("WFg%$X/o!wY0T~", parseSettings0);
      document0.parentNode = (Node) cDataNode0;
      FormElement formElement0 = new FormElement(tag0, "2Y:gySA({", attributes0);
      // Undeclared exception!
      try { 
        document0.appendTo(formElement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = new Document("%u");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Hd6Q", "Hd6Q");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Hd6Q", "Hd6Q");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$m=H:|Vudga/K", "$m=H:|Vudga/K");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.appendElement("$m=H:|Vudga/K");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[\"\u0003{3", "[\"\u0003{3");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("[\"\u0003{3");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("@", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Pattern syntax error: ");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes0);
      // Undeclared exception!
      try { 
        formElement0.appendElement(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = new Document("");
      document0.parentNode = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.doClone(document0.parentNode);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = new Document("dU}idNp{7IL");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AO", "");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$m=H:|Vudga/K", "$m=H:|Vudga/K");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = new Document("a#8J`=");
      Document document1 = Parser.parseBodyFragment("a#8J`=", "a#8J`=");
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document1.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = new Document("class");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.after("class");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a#8Jr`=", "a#8Jr`=");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("\u0004Y>-GX.S-", parseSettings0);
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "u}o&qYjeU{u|Py_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("3+2_+vbR~l8=@", "3+2_+vbR~l8=@");
      document0.addClass("3+2_+vbR~l8=@");
      document0.addClass("+Tstn 4gjq6C]o(h.tQ");
      document0.hasClass("3+2_+vbR~l8=@");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "IZ58 [wgX 0`'}");
      document0.hasClass("java.lang.string@0000000092");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = new Document(" />");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a#8J`*", "a#8J`*");
      Element element0 = document0.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = new Document("9L)jRd).\r+");
      document0.prependText("9L)jRd).\r+");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cv", "cv");
      Tag tag0 = Tag.valueOf("cv");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "cv", attributes0);
      formElement0.appendTo(document0);
      formElement0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell("Hd6Q");
      document0.prependChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("Hd6Q");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("#8J`", "#8J`");
      Document document1 = Parser.parseBodyFragment("#8J`", "#8J`");
      document1.parentNode = (Node) document0;
      document1.after((Node) document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", "#data");
      Element element0 = document0.body();
      element0.append("RrYU<D*\"XWvQU");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("a#8J`=");
      Element element0 = document0.val("`=YY:H:=x6q& _");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Element element0 = new Element("3+2_+vbR~l8=@");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Element element0 = new Element("3+2_+vbR~l8=@");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("idKB-dKG&Tyd KP:Sq#", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "idKB-dKG&Tyd KP:Sq#", (Attributes) null);
      Pattern pattern0 = Pattern.compile("Ul|]33pn OBV*");
      formElement0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[\"\u0003{3", "[\"\u0003{3");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Element element0 = new Element("s\"KD:");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Element element0 = new Element("u}o&qYjeU{u|Py_");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Element element0 = new Element("bataioig");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("Hd6Q", "org.jsoup.nodes.DataNode");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Element element0 = new Element("s\"KD:");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = new Document("%u");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`*", "a#8J`*");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "a#8J`*");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("figure", "figure");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("figure");
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse("figure", "figure");
      document0.title("Sfs)%{o^");
      MockFileWriter mockFileWriter0 = new MockFileWriter("figure");
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000141", "java.lang.string@0000000141");
      MockFileWriter mockFileWriter0 = new MockFileWriter("java.lang.string@0000000101");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(mockFileWriter0, 23, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      document0.addClass("3+2_+vbR~l8=@");
      document0.addClass("#root");
      document0.toggleClass("#root");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      document0.addClass("comment");
      document0.addClass("comment");
      document0.getElementsByClass("comment");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3+2_+vbR~l8=@", "&52e}x7`FH0;v");
      Document document1 = document0.normalise();
      document1.addClass("comment");
      document1.addClass("comment");
      document1.hasClass("java.lang.string@0000000093");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~@QVd/@", "a#8J`*");
      document0.addClass("comment");
      Element element0 = document0.addClass("          ");
      element0.hasClass("comment");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse(".ashg(8w6F`", ".ashg(8w6F`");
      document0.toggleClass("class");
      document0.hasClass("%u");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("s\"KD:", "/xa?%G");
      document0.addClass("u");
      document0.hasClass("java.lang.string@0000000167 +tstn 4gjq6c]o(h.tq");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("attributeValueUnquoted", "Insert position out of bounds.");
      document0.toggleClass("java.lang.string@0000000141");
      document0.hasClass("java.lang.string@0000000141");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("$F5Kk7W=+<Tm j$@!v", "$F5Kk7W=+<Tm j$@!v");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      DataNode dataNode0 = new DataNode("textarea", "textarea");
      document0.appendChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`i", "`i");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("iqy+@h%<2n`$R0tAfW", "iqy+@h%<2n`$R0tAfW");
      CDataNode cDataNode0 = new CDataNode((String) null);
      document0.appendChild(cDataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RcdataLessthanSign");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "RcdataLessthanSign", attributes0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("RcdataLessthanSign", "RcdataLessthanSign", true);
      element0.prependChild(xmlDeclaration0);
      element0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AO", "");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("#8J`");
      document0.title("DyiG<Sx~_ch");
      document0.appendText("#8J`");
      document0.getElementsContainingText("#8J`");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("#8J`", "#8J`");
      Document document1 = Parser.parseBodyFragment("#8J`", "#8J`");
      document1.parentNode = (Node) document0;
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = document1.parentNode;
      document1.addChildren(nodeArray0);
      document1.text();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RcdataLessthanSign");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "RcdataLessthanSign", attributes0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("RcdataLessthanSign", "RcdataLessthanSign", false);
      Element element1 = element0.prependChild(xmlDeclaration0);
      Pattern pattern0 = Pattern.compile("RcdataLessthanSign", (-744));
      element1.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = new Document("a#8J`=");
      Document document1 = Parser.parseBodyFragment("a#8J`=", "a#8J`=");
      document1.parentNode = (Node) document0;
      document1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("#8J`", "#8J`");
      Document document1 = new Document("#8J`");
      document0.appendTo(document1);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("", "oL.QNl");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("3+2_+vbR~l8=@", "3+2_+vbR~l8=@");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("a#8J`=");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("body", "muted");
      document0.siblingElements();
      assertEquals("muted", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a#8J`=", "a#8J`=");
      document0.appendTo(document0);
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      Element element0 = document0.body();
      element0.before("html");
      String string0 = element0.cssSelector();
      assertEquals("html", element0.baseUri());
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = new Document("3+2_+vbR~l8=@");
      document0.toggleClass("&52e}x7`FH0;v");
      document0.cssSelector();
      assertEquals("3+2_+vbR~l8=@", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Element element0 = new Element("s\"KD:");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        element0.insertChildren(46, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a#8J`=", "dtatalit");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren((-3204), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("3+X_+vbt_R~,8@", "3+X_+vbt_R~,8@");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(1, nodeArray0);
      assertEquals("3+X_+vbt_R~,8@", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("meta[charset]", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "dtatalit", attributes0);
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Element element1 = element0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
      assertEquals("dtatalit", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("3+2_+vbR~l8=@", "3+2_+vbR~l8=@");
      Elements elements0 = document0.previousElementSiblings();
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) elements0);
      assertEquals("3+2_+vbR~l8=@", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell(":nth-child(%d)");
      DataNode dataNode0 = new DataNode((String) null);
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = new Document("class");
      Element element0 = document0.appendText("class");
      List<TextNode> list0 = element0.textNodes();
      assertEquals("class", element0.baseUri());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.selet.valuator$IsNthOfTyp", "iKm#C{");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals("iKm#C{", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("Hd6Q");
      document0.prependText("Hd6Q");
      document0.getElementsByIndexLessThan(2);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("3+2_+vbR~l8=@", "3+2_+vbR~l8=@");
      Elements elements0 = document0.getElementsByIndexGreaterThan(46);
      assertEquals("3+2_+vbR~l8=@", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Element element0 = new Element("3+2_+vbR~l8=@");
      // Undeclared exception!
      try { 
        element0.selectFirst("e3]Sh0!!>riF8a8xzn");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'e3]Sh0!!>riF8a8xzn': unexpected token at ']Sh0!!>riF8a8xzn'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("#8J`");
      document0.title("DyiG<Sx~_ch");
      Elements elements0 = document0.getElementsContainingText("#8J`");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#8J`", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Element element0 = new Element("3+2_+vbR~l8=@");
      Elements elements0 = element0.getElementsMatchingText("Sd&f@cJ%Z0dO;XA");
      // Undeclared exception!
      try { 
        element0.insertChildren(93, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a#8J`*", "a#8J`*");
      document0.is("BeforeAttributeName");
      assertEquals("a#8J`*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bataioig", "bataioig");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("bataioig", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell(":nth-child(%d)");
      Element element0 = document0.removeClass(":nth-child(%d)");
      assertEquals(":nth-child(%d)", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      // Undeclared exception!
      try { 
        document0.before("html");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "#root");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a#8J`*", "a#8J`*");
      document0.getElementsByAttributeValueNot("a#8J`*", "a#8J`*");
      assertEquals(1, document0.childNodeSize());
      assertEquals("a#8J`*", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Element element0 = new Element("3+2_+vbR~l8=@");
      Element element1 = element0.shallowClone();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000038", "GbU:\"(Xsl{");
      Element element0 = document0.clone();
      assertEquals("GbU:\"(Xsl{", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = new Document("a#8J`=");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Element element0 = new Element("3+2_+vbR~l8=@");
      Elements elements0 = element0.getElementsByAttributeValueContaining("h$", "8yKZ|zdpx9}");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Document.createShell("c\"scke");
      document0.getElementsByAttributeValueMatching("c\"scke", (Pattern) null);
      assertEquals("c\"scke", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("id");
      Elements elements0 = document0.getElementsByClass("dtatalit");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("id", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Element element0 = new Element("s\"KD:");
      Elements elements0 = element0.getElementsByAttributeValueEnding("s\"KD:", "*jjZun~");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000093 comment #root");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("iKm#C{", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.selet.valuator$IsNthOfTyp", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueMatching("iKm#C{", "OjdrIv55'#52N{5E7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: OjdrIv55'#52N{5E7
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parse(".ashg(8w6F`", ".ashg(8w6F`");
      document0.getElementsByAttributeStarting("class");
      assertEquals(".ashg(8w6F`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("??aJg", "#8j`");
      Element element0 = document0.prependElement("#8j`");
      Element element1 = element0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`*", "a#8J`*");
      // Undeclared exception!
      try { 
        document0.after("K:IY99<s+BP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("a#8`*", "a#8`*");
      Elements elements0 = document0.getElementsMatchingOwnText("WN");
      assertEquals(0, elements0.size());
      assertEquals("a#8`*", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("a#8J`*", "a#8J`*");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("a#8J`*", element0.baseUri());
      assertEquals("html > body", string0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("               ", "               ");
      document0.getElementsByAttributeValueStarting("               ", "hLxA?~{mI");
      assertEquals(1, document0.childNodeSize());
      assertEquals("               ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Element element0 = new Element("s\"KD:");
      Elements elements0 = element0.getElementsByAttributeValue("V", "class");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#8J`", "#8J`");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Element element0 = new Element("3+2_+vbR~l8=@");
      Element element1 = element0.html("");
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Element element0 = new Element("s\"KD:");
      String string0 = element0.wholeText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell("Xn");
      CDataNode cDataNode0 = new CDataNode("Xn");
      // Undeclared exception!
      try { 
        document0.before((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Element element0 = new Element("dt");
      Map<String, String> map0 = element0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("#root");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Element element0 = new Element("a#8J`=");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.appendText("");
      boolean boolean0 = element0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$Not", "org.jsoup.select.StructuralEvaluator$Not");
      // Undeclared exception!
      try { 
        document0.wrap("dtatalit");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("checked", "x\"eL<_t|@V2on1");
      document0.getElementById("head");
  }
}
