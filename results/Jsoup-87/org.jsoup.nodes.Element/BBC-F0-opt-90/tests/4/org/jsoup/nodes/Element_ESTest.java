/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 11 04:17:06 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("KP,;9PVyt4Qe", "4[}pm0");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("E, (I\"Zb-vMqmRm'<", "+,'0{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: +,'0{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r=bZl7Jemm.ku`T", "r=bZl7Jemm.ku`T");
      Element element0 = document0.appendElement("r^85");
      element0.before((Node) document0);
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      Element element0 = document0.body();
      document0.parentNode = (Node) element0;
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("01m1ydo'$4/");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-70), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("incolumngroup", " />");
      List<Node> list0 = document0.ensureChildNodes();
      document0.insertChildren(0, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Could not parse attribute query '%s': unexpected token at '%s'");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "up");
      document0.outerHtmlTail(stringBuilder0, (-1205383900), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(charArrayWriter0, 1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "html");
      document0.doSetBaseUri("html");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      Element element0 = document0.body();
      document0.parentNode = (Node) element0;
      element0.remove();
      document0.wrap("[9iZL-,b-!;ftTbbuC");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      Element element0 = document0.head();
      element0.wrap("org.jsoup.select.Evaluator$AttributeWithValueEnding");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.wrap("^n7&4s_fV&");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("o|g");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("template", "template");
      document0.siblingIndex = (-1433506051);
      document0.val("template");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      Element element0 = document0.head();
      element0.val("5l{=/d9OrHD@a.?q@#U");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      Element element0 = document0.val("r=bZl:Jemm.ku`T");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = new Document("odh=q=");
      document0.setSiblingIndex((-3630));
      document0.toggleClass("novalidate");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.toggleClass("qsbJ&u)X~E))muSrD");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s+");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "inert", attributes0);
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.siblingIndex = (-1412);
      formElement1.text("inert");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.select.NodeFilter$FilterResult");
      Element element0 = document0.body();
      element0.text("\"EiyZ5&duef; 0m8z");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parse(":attern syntaxerror: ", ":attern syntaxerror: ");
      document0.parentNode = (Node) document0;
      document0.text(",U;Qf7UR}%]c&VE[8!");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "kW&Tmi");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      Element element0 = document0.body();
      element0.tagName("tD5ZiZ");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      CDataNode cDataNode0 = new CDataNode("html");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "html", attributes0);
      element0.tagName("u");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document("body");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element element0 = new Element("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textaeGFa", "textaeGFa");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("tW", "tW");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Tag tag0 = Tag.valueOf("template");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "template", attributes0);
      formElement0.selectFirst("template");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.appendElement("br");
      document0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.select("br");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.select("br");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.body();
      element0.removeClass("br");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("</", "</");
      document0.siblingIndex = (-1182);
      document0.removeClass("org.jsoup.nodes.element$nodelist");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      Element element0 = document0.appendElement("?[8-wff");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Could not parse attribute query '%s': unexpected token at '%s'");
      Element element0 = document0.appendElement("up");
      element0.prependText("DfN*%-Ru!(");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("", " />");
      Element element0 = document0.head();
      element0.prependText("'iXU");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document("aBr>m4k43V");
      document0.prependText("textarea");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("pre", "pre");
      document0.prependElement("pre");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.appendElement("up");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bd$", "bd$");
      document0.setSiblingIndex((-934));
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("xHQ~}]oS");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "xHQ~}]oS", attributes0);
      document0.prependChild(formElement0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tj%j-KRE", "");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@0EsxRVcEV7i", "br");
      Element element0 = document0.appendElement("java.lang.string@0000000113 body yu3w@z<+w]qbchbu6/r");
      element0.prepend(")M0g/]/]mi(G#9(Waj");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("children collection to be inserted must not be null.", "Tag name must not be empty.");
      document0.setSiblingIndex((-878));
      document0.prepend("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3", "m");
      Element element0 = document0.head();
      element0.prepend("m");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/", "/");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      document0.parentNode = (Node) element0;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textaeGFa", "textaeGFa");
      Element element0 = document0.appendElement("bS");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Attribute", "org.jsoup.nodes.Attribute");
      document0.prependChild(document0);
      document0.empty();
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("o|g");
      Element element0 = document0.append("o|g");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3L", "3L");
      Element element0 = document0.body();
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      element0.is((Evaluator) evaluator_IsOnlyOfType0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Element element0 = new Element("w");
      element0.is("w");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Document document1 = Parser.parseBodyFragment("1}),pc2<Qn<", "#d5=Vx");
      Element element0 = document0.head();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("emlate", "emlate");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("template", "template");
      Element element0 = document0.appendElement("template");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "caption");
      Element element0 = document0.body();
      element0.html("BogusComment");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("Tag cannot be self closing; not a void tag");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("o|g");
      Element element0 = document0.body();
      element0.html();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.select.NodeFilter$FilterResult");
      document0.addClass("bl@Ko?_T)kwKMMd'");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$NodeList", 1237);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Pattern pattern0 = Pattern.compile("", (-2641));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      Pattern pattern0 = Pattern.compile("xce!9YyG4,(Yl3tR", 1040);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "html");
      Element element0 = document0.text("]C4CI`*Dr");
      Pattern pattern0 = Pattern.compile("]C4CI`*Dr", 4306);
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.getElementsContainingText("a=");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("gfIf|oLq~?x_CsT", "gfIf|oLq~?x_CsT");
      document0.getElementsByTag("gfIf|oLq~?x_CsT");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Element element0 = new Element("r=bZl:Jemm.ku`T");
      element0.getElementsByTag("r=bZl:Jemm.ku`T");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("zB");
      document0.getElementsByIndexLessThan(40);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("|");
      document0.getElementsByIndexGreaterThan((-1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.select.NodeFilter$FilterResult");
      document0.getElementsByIndexEquals(1764);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Tag tag0 = Tag.valueOf("zulzyy-");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("zulzyy-", "zulzyy-");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "zulzyy-", attributes1);
      pseudoTextElement0.getElementsByAttributeValueStarting("zulzyy-", "zulzyy-");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", "tmpqaMJe");
      document0.getElementsByAttributeValueNot("tmpqaMJe", " ");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000096 body br");
      element0.getElementsByAttributeValueNot("java.lang.string@0000000096 body br", "java.lang.string@0000000096 body br");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.attr("br", "br");
      Pattern pattern0 = Pattern.compile("");
      element0.getElementsByAttributeValueMatching("br", pattern0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.getElementsByAttributeValueEnding("br", "br");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("gfIf|oLq~?x_CsT", "gfIf|oLq~?x_CsT");
      document0.getElementsByAttributeValueContaining("]zm`]lL|DSUN@m*^C(l", "gfIf|oLq~?x_CsT");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      CDataNode cDataNode0 = new CDataNode("html");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = Attribute.createFromEncoded("br", "u");
      attributes0.put(attribute0);
      Element element0 = new Element(tag0, "html", attributes0);
      element0.getElementsByAttribute("br");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@0EsxRVcEV7i", "br");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000096 body br");
      element0.siblingIndex = (-2580);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      Element element0 = document0.appendElement("by");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("tmplaMpe");
      Element element0 = document0.appendElement("tmplaMpe");
      Element element1 = (Element)element0.previousSibling();
      DataNode dataNode0 = new DataNode("tmplaMpe");
      element1.doClone(dataNode0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("KP,;9PVyt4Qe", "4[}pm0");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("template", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "*OX-b!]!f2~BV;[c", attributes0);
      formElement0.clone();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "br");
      Element element0 = document0.toggleClass("yFP");
      element0.siblingIndex = (-3325);
      Set<String> set0 = element0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      Locale locale0 = Locale.forLanguageTag("Pattern syntax error: ");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document("-USX*Pk'`");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.toggleClass("br");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("aBr>m4k43V");
      document0.appendElement("textarea");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("", " />");
      Element element0 = document0.head();
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      document0.parentNode = (Node) document0;
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("seamless");
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Patern syntax error: ", "Patern syntax error: ");
      Element element0 = document0.head();
      element0.before("html > head");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      element0.appendElement("br");
      element0.before("<html>\n <head></head>\n <body>\n  br\n </body>\n</html>\n<br><br></br>");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("?A]|68-p", "?A]|68-p");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("aBr>m4k43V");
      document0.toggleClass("aBr>m4k43V");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$1");
      element0.siblingIndex = (-3370);
      element0.attr("O''n(p_aWc,Jf[t)", false);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("", " />");
      Element element0 = document0.head();
      element0.attr(" />", false);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.appendElement("bS");
      element0.attr(":nth-child(%d)", true);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      element0.attr("Yu3W@z<+w]qbchbU6/R", "9O,");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("aBr>m4k43", "aBr>m4k43");
      Element element0 = document0.appendElement("aBr>m4k43");
      element0.attr("abr>m4k43", "");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      document0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendChild(document0);
      document0.appendText("textarea");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.head();
      element0.appendText("'eg3Sz");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s+");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "inert", attributes0);
      Document document0 = Document.createShell("UIEmF*");
      FormElement formElement1 = formElement0.addElement(formElement0);
      formElement1.siblingIndex = (-1412);
      formElement0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("", " />");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.select.NodeFilter$FilterRsult");
      Element element0 = document0.appendElement("sup");
      element0.append("sup");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000096 body br");
      element0.siblingIndex = (-2580);
      element0.append("InTableBody");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      Element element0 = document0.head();
      element0.append("[%s=%s]");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("aBr>m4k43V");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.head();
      Element element1 = element0.removeClass("br");
      element1.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      document0.parentNode = (Node) document0;
      DataNode dataNode0 = new DataNode("r=bzl7jemm.u`t");
      document0.after((Node) dataNode0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("r=bZl:Jemm.ku`T");
      Element element0 = document0.appendElement("f -#h[Nz+");
      element0.after("r=bZl:Jemm.ku`T");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#G*Xw[S2~s.g|GZ]", "#G*Xw[S2~s.g|GZ]");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.after(" />");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.body();
      element0.addClass(": ");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("title", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "title", attributes0);
      element0.addClass("T0X`Ge");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("Patern syntax rror: ", "Patern syntax rror: ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.wrap("#LDaD$A/%4DPg\"!lAZa");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Element element0 = new Element("Children collection to be inserted must not be null.");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Children collection to be inserted must not be null.", true);
      element0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        element0.wrap("w{");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.val("[9iZL-,b-!;ftTbbuC");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.settings((ParseSettings) null);
      Document document0 = parser0.parseInput("org.jsoup.nodes.Element$NodeList", "j1>");
      // Undeclared exception!
      try { 
        document0.val("Ojg21>^N<9>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Tag tag0 = Tag.valueOf("template");
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[3];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "template", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val("template");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      Element element0 = document0.body();
      element0.remove();
      // Undeclared exception!
      try { 
        document0.text("body > #root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("f -poh[n+");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pttenn synt3x 1rror: ", "Pttenn synt3x 1rror: ");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.tagName("s+");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("java.lang.string@0000000011", "hh>.-Z");
      // Undeclared exception!
      try { 
        document0.tagName("OJbG[hS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Tag tag0 = Tag.valueOf("xD)]09O\"@m");
      CDataNode cDataNode0 = new CDataNode("xD)]09O\"@m");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "[5&*j", attributes0);
      // Undeclared exception!
      try { 
        element0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.select.NodeFilter$FilterResult");
      // Undeclared exception!
      try { 
        document0.selectFirst("|63|tfh6Ij{bMOYp");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '|63|tfh6Ij{bMOYp': unexpected token at '|63|tfh6Ij{bMOYp'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.select.NodeFilter$FilterResult");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "br");
      // Undeclared exception!
      try { 
        document0.select("82%OC.*P");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '82%OC.*P': unexpected token at '%OC.*P'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.select.NodeFilter$FilterResult");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document(" */\"cl'wn'G");
      Comment comment0 = new Comment("afterdoctypesystemidentifier", "dhoI0*WAmdYf");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(element0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 yz");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 yz", element0, "<");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prependText("java.lang.string@0000000038 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 yz");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prependElement("#document");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("or", "or");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("F;", "F;");
      Element element0 = document0.toggleClass("F;");
      List<Node> list0 = Parser.parseXmlFragment("F;", "F;");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prepend(">io=");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("i#3q_v#\"hrii");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("template", "template");
      MockPrintStream mockPrintStream0 = new MockPrintStream("hg{=E/au*/Nka");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(8240);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 18, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 8, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-3263), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("Pattern sDntax error: ", "Pattern sDntax error: ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("odd", true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, (-2809), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("big", "big");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 1724, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5CHlf)#Z,", "5CHlf)#Z,");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "5CHlf)#Z,");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-1451), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("temlae", "temlae");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 1997, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("template", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "*OX-!]!f2~V;[c", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "template");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      formElement0.outerHtmlHead(stringBuilder0, 2147483645, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      MockFileWriter mockFileWriter0 = new MockFileWriter("utf8", false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockFileWriter0, (-80773204), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charArrayWriter0, (-3), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b'BEbrJ/x/tS'/3", "emae");
      DocumentType documentType0 = new DocumentType("s+", "", "x(<-N");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("g#+B|N;=", "g#+B|N;=");
      document0.appendTo(document0);
      Evaluator.AttributeWithValueEnding evaluator_AttributeWithValueEnding0 = new Evaluator.AttributeWithValueEnding("g#+B|N;=", "g#+B|N;=");
      // Undeclared exception!
      document0.is((Evaluator) evaluator_AttributeWithValueEnding0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.select.NodeFilter$FilterResult");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell("r=bZl:Jemm.ku`T");
      // Undeclared exception!
      try { 
        document0.is("3*;CmR%)vT7B~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '3*;CmR%)vT7B~': unexpected token at ';CmR%)vT7B~'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bdy", "bdy");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.is("value");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bd$", "bd$");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      pipedWriter0.close();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe closed
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      document0.parentNode = (Node) document0;
      MockFile mockFile0 = new MockFile("Pattern syntax error: ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      // Undeclared exception!
      document0.html(outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("4[}pm0", "Unexpected count of entities loaded");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Unexpected count of entities loaded");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("", "X_#0C6nJhnEL]");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r=bZl7Jemm.ku`T", "r=bZl7Jemm.ku`T");
      Element element0 = document0.appendElement("r^85");
      Element element1 = element0.before((Node) document0);
      // Undeclared exception!
      element1.html();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("tem;blat;", "tem;blat;");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) null);
      document0.outputSettings(document_OutputSettings1);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      element0.setSiblingIndex((-1432352094));
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = new Document("=,7?");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("3z^iA\"&(f?x-z.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 3z^iA\"&(f?x-z.
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("o|g");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("^o.pGV7>)R>+,nVJDu{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ^o.pGV7>)R>+,nVJDu{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("odh=q=", "odh=q=");
      DataNode dataNode0 = new DataNode((String) null);
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("nth-last-of-type");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      document0.setSiblingIndex((-2407));
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("body");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("template", "template");
      DocumentType documentType0 = new DocumentType(",y0", "template", ",y0", "template", "]=\"");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("template");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("template", "template");
      Element element0 = document0.appendElement("template");
      element0.siblingIndex = (-1889);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("template");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = new Document("fWOgmWXIO'F#@L-.");
      document0.normalise();
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("");
      document0.parentNode = (Node) document0;
      document0.siblingIndex = (-3021);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(26);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse("tmpqaMJe", "tmpqaMJe");
      Element element0 = document0.appendElement("tmpqaMJe");
      element0.siblingIndex = (-2);
      // Undeclared exception!
      try { 
        element0.getElementsByClass("org.jsoup.nodes.element$2");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("?A]|68-p", "?A]|68-p");
      Element element0 = document0.tagName("?A]|68-p");
      List<Node> list0 = document0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueStarting("FeO9; v", "?A]|68-p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = new Document("|");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", " />");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("/}=)\"@{", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("/}=)\"@{");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("|rk", "/}=)\"@{");
      FormElement formElement0 = new FormElement(tag0, "/}=)\"@{", attributes1);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueMatching("|rk", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("4[}pm0", "fB7@h(EWPgK:6zv");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("Insert position out of bounds.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("vm&j", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("vm&j", "html");
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "vm&j", attributes1);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueContaining("vm&j", "vm&j");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000038", "java.lang.string@0000000038");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("java.lang.string@0000000038", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!=i*x", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("[9iZL-,b-!;ftTbbuC", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("", " />");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = new Document("aBr>m4k43V");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("aBr>m4k43", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.element$nodelist", "attributeDoubleValueCharsSorted");
      Element element0 = document0.appendElement("attributeDoubleValueCharsSorted");
      element0.siblingIndex = (-1883);
      // Undeclared exception!
      try { 
        document0.getAllElements();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = new Document("aBr>m4k43V");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = new Document("-USX*Pk'`");
      DataNode dataNode0 = new DataNode("{AFPun[TrWb", (String) null);
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      Element element0 = document0.body();
      document0.parentNode = (Node) element0;
      document0.toggleClass("");
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000050': unexpected token at '@0000000050'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      CDataNode cDataNode0 = new CDataNode("]1;k");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = new Document("#root");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = new Document("body");
      // Undeclared exception!
      try { 
        document0.child(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      // Undeclared exception!
      try { 
        document0.child((-2109));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("tmplaMpe");
      DataNode dataNode0 = new DataNode("tmplaMpe");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("o|g");
      Element element0 = new Element("he");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.before("SGogF0E\u0000>?n%e");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse(":attern syntaxerror: ", ":attern syntaxerror: ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr(",U;Qf7UR}%]c&VE[8!", ":attern syntaxerror: ");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.select.NodeFilter$FilterResult");
      // Undeclared exception!
      try { 
        document0.attr((String) null, " .{*SI$ZE*phzq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell("o|g");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.appendElement("t");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NGj4", ":ImmediateParent%s");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement(":ImmediateParent%s");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("html", "html");
      // Undeclared exception!
      try { 
        document0.appendElement("Re-F0^0Vo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Set<String> set0 = document0.classNames();
      Element element0 = document0.classNames(set0);
      Tag tag0 = Tag.valueOf("1}),pc2<Qn<");
      Element element1 = new Element(tag0, "uCPvha)DjQ2o");
      element0.parentNode = (Node) element1;
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("4[}pm0", "Unexpected count of entities loaded");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("o|g", "o|g");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.append("#");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.select.NodeFilter$FilterResult");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("f(dw~");
      DataNode dataNode0 = new DataNode("<+zwJ&x(b21Z4Ma", "ibm367");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.append("f(dw~");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntaxerror: ", "Pattern syntaxerror: ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.after("#document");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("", "X_#0C6nJhnEL]");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "J(q~k*", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "aBr>m4k43");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("br", "q?`^tp}-");
      CharBuffer charBuffer0 = CharBuffer.allocate(16);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Q?`^TP}-", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes0);
      formElement0.html((MockPrintStream) null);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", "org.jsoup.select.NodeFilter$FilterResult");
      document0.hasClass("c");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#G*Xw[S2~s.g|GZ]", "#G*Xw[S2~s.g|GZ]");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.appendElement("br");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r=bZl7Jemm.ku`T", "r=bZl7Jemm.ku`T");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r=bZl7Jemm.ku`T", "r=bZl7Jemm.ku`T");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.appendElement("textarea");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("f -pOh[N+");
      Element element0 = document0.appendElement("+0/h$,%");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = new Document("aBr>m4k43V");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("o|g");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("o|g");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("body");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("zB");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3L", "3L");
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      document0.is((Evaluator) evaluator_IsOnlyOfType0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Element element0 = new Element("s8h!qs.r");
      Pattern pattern0 = Pattern.compile("kY^iS+'zJ7Wb9oEA`");
      element0.getElementsByAttributeValueMatching("Children collection to be inserted must not be null.", pattern0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Element element0 = new Element("s8h!qs.r");
      // Undeclared exception!
      try { 
        element0.select("G[0MqA4%@[jt)I{");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '@'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000038", "java.lang.string@0000000038");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "java.lang.string@0000000038");
      document0.title("s+");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000038", "java.lang.string@0000000038");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, (-307), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      element0.appendElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.appendElement("textarea");
      element0.val("textarea");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      Element element0 = document0.toggleClass("br");
      element0.toggleClass("br");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.toggleClass("bl@ko?_t)kwkmmd'");
      document0.hasClass("bl@ko?_t)kwkmmd'");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("+*`-o.o<XLG", "+*`-o.o<XLG");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      document0.toggleClass("");
      element0.hasClass(".");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Document document0 = Document.createShell("odh=q=");
      Element element0 = document0.classNames(set0);
      element0.hasClass("ascii7");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = new Document("template");
      Element element0 = document0.toggleClass("template");
      document0.toggleClass(" H]A1Of}<+nK<mEO0");
      element0.hasClass("uva.laQI.stting@00n00,0045");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000038", "java.lang.string@0000000038");
      Element element0 = document0.toggleClass("java.lang.string@0000000038");
      element0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = new Document("fWOgmWXIO'F#@L-.");
      Element element0 = document0.toggleClass("fWOgmWXIO'F#@L-.");
      element0.hasClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("f -poh[n+");
      Element element0 = document0.toggleClass(".~Y-k9dD=+wf");
      element0.hasClass("f -poh[n+");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b'BEbrJ/x/tS'/3", "emae");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("temlae", "temlae");
      DocumentType documentType0 = new DocumentType("temlae", "value", "temlae", "yNxDVlhVZy", "head");
      document0.prependChild(documentType0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("odh=q=");
      document0.append("               ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("r=bZl7Jemm.ku`T");
      document0.append("r=bZl7Jemm.ku`T");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      document0.parentNode = (Node) document0;
      document0.getElementsMatchingOwnText("body");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("SEyzHP<;9}+|/");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Tag tag0 = Tag.valueOf("template");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "template", attributes0);
      Node[] nodeArray0 = new Node[1];
      CDataNode cDataNode0 = new CDataNode("template");
      nodeArray0[0] = (Node) cDataNode0;
      formElement0.addChildren(nodeArray0);
      formElement0.getElementsMatchingOwnText("RCDATAEndTagOpen");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";6}q(N(</|", "");
      document0.getElementsContainingOwnText("KP,;9PVyt4Qe");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      document0.append("J(q~k*");
      document0.getElementsMatchingText("body");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("o|g");
      document0.append("J(q~k*");
      document0.getElementsMatchingText("body");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      document0.title("Pattern syntax error: ");
      document0.getElementsMatchingText("sup");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendElement("br");
      document0.getElementsMatchingText("Yu3W@<+w]qchbU6/R");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      document0.appendElement("by");
      document0.getElementsMatchingText("by");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("template", "template");
      document0.appendElement("template");
      document0.getElementsContainingText("template");
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";6}q(N(</|", "");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.getElementById(")\":4J");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = new Document("");
      document0.parentNode = (Node) document0;
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("f -pOh[N+");
      Element element0 = document0.appendElement("+0/h$,%");
      Element element1 = element0.val("f -pOh[N+");
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      document0.parentNode = (Node) document0;
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aBr>m4k43", "aBr>m4k43");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "");
      document0.parentNode = (Node) document0;
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("4[}pm0", "Unexpected count of entities loaded");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6);$$XIl/\"/[OBPeB[<", "template");
      DocumentType documentType0 = new DocumentType("6);$$XIl/\"/[OBPeB[<", "template", "image", "image", "template");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse("or", "or");
      document0.nextElementSibling();
      assertEquals("or", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Document.createShell("o|g");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
      assertEquals("o|g", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("", " />");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals(" />", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3L", "3L");
      document0.siblingElements();
      assertEquals("3L", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bo3Bd:^y", "bo3Bd:^y");
      Element element0 = document0.head();
      element0.after("Ew?ehLvm5l26^");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(1)", string0);
      assertEquals("bo3Bd:^y", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "body");
      document0.toggleClass("body");
      document0.cssSelector();
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lyq6|spw", "org.jsoup.select.Nodeilter$FilterResult");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren(2328, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#G*Xw[S2~s.g|GZ]", "#G*Xw[S2~s.g|GZ]");
      Elements elements0 = document0.getElementsMatchingOwnText(" ");
      // Undeclared exception!
      try { 
        document0.insertChildren((-373), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("template", "template");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("template", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Element element0 = new Element("textarea");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        element0.insertChildren(957, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.parentNode = (Node) document0;
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      DataNode dataNode0 = new DataNode("[9iZ-,b-!;ftTbbuC");
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = document0.parentNode;
      document0.addChildren(nodeArray0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
      assertEquals("Pattern syntax error: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.select.NodeFilter$FilterResult");
      document0.html("org.jsoup.select.NodeFilter$FilterResult");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("org.jsoup.select.NodeFilter$FilterResult", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tj%j-KRE", "");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("r=bZl7Jemm.ku`T");
      document0.append("r=bZl7Jemm.ku`T");
      document0.child(0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexGreaterThan(26);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = new Document("'z,Au.N7]%>KiAx");
      document0.selectFirst("br");
      assertEquals("'z,Au.N7]%>KiAx", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.element$nodelist", "attributeDoubleValueCharsSorted");
      document0.getAllElements();
      assertEquals("attributeDoubleValueCharsSorted", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Patern syntax error: ", "Patern syntax error: ");
      // Undeclared exception!
      try { 
        document0.before("html > head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Tag tag0 = Tag.valueOf("zulzyy-");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "zulzyy-", attributes0);
      pseudoTextElement0.getElementsByAttribute("ECK1zFGh{");
      assertEquals("zulzyy-", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "oH#bojx<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parse("tW", "tW");
      Element element0 = document0.shallowClone();
      assertEquals("tW", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getAllElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Document.createShell("o|g");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("SaU#e#w0g:", "SaU#e#w0g:");
      Elements elements0 = document0.getElementsByClass("SaU#e#w0g:");
      assertEquals("SaU#e#w0g:", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = new Document("legend");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("legend", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.is("rVN");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.getElementsByAttributeValueMatching("a=", "textarea");
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", "");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3L", "3L");
      document0.getElementsByAttributeStarting("body");
      assertEquals("3L", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      document0.prependElement("=xvv[fwml;f9dk(qy]");
      document0.child(0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = new Document("aBr>m4k43V");
      document0.getElementsByIndexLessThan((-70));
      assertEquals("aBr>m4k43V", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bo3Bd:^y", "bo3Bd:^y");
      // Undeclared exception!
      try { 
        document0.after("Ew?ehLvm5l26^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bo3Bd:^y", "bo3Bd:^y");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("html > head", string0);
      assertEquals("bo3Bd:^y", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Element element0 = new Element("s8h!qs.r");
      Elements elements0 = element0.getElementsByAttributeValueStarting("s8h!qs.r", "tTkIp@p'Dg~PKr(uy#b");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("template", "template");
      document0.getElementsByAttributeValue("template", "-'7PL^K5FD*U!");
      assertEquals("template", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.attr(":nth-child(%d)", true);
      assertEquals("textarea", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("temlae", "temlae");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("temlae", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Elements elements0 = document0.getElementsContainingOwnText((String) null);
      assertEquals("br", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000096 body br");
      // Undeclared exception!
      try { 
        element0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6);$$XIl/\"/[OBPeB[<", "template");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("template", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parse("Patern syntax rror: ", "Patern syntax rror: ");
      Elements elements0 = document0.getElementsMatchingText("");
      assertEquals(4, elements0.size());
      assertEquals("Patern syntax rror: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendText("'eg3Sz");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parse("r=bZl:Jemm.ku`T", "r=bZl:Jemm.ku`T");
      // Undeclared exception!
      try { 
        document0.wrap("org.jsoup.select.Evaluator$AttributeWithValueEnding");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b'BEbrJ/x/tS'/3", "emae");
      document0.nextElementSiblings();
  }
}
