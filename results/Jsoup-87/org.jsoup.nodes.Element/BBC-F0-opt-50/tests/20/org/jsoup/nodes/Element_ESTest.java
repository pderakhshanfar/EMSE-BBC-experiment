/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:13:32 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.empty();
      document0.setParentNode(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vw/WCRa.DpOvL0?=pY", "html");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = parser0.parseInput("org.jsoup.nodes.Element$2", "center");
      document0.outerHtmlTail(mockPrintStream0, 1642, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("zZIf56%q(\"_ez:");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(mockPrintStream0, (-3189), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4ObkR3#UiF@}", "a<e0[}");
      document0.getElementsByAttributeValueMatching("4ObkR3#UiF@}", "YicaEN^QB*IS~ED\"");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.sele?tEvalu@torIsOnlyOfType", "org.jsoup.sele?tEvalu@torIsOnlyOfType");
      Element element0 = document0.appendElement("org.jsoup.sele?tEvalu@torIsOnlyOfType");
      element0.wrap("SWNel@1\rPGg<'r");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      element1.wrap("<br>");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bB", "bB");
      Element element0 = document0.body();
      element0.wrap("86gg6g");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.appendElement("#root");
      element0.val("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("pblicind");
      FormElement formElement0 = new FormElement(tag0, "pblicind", attributes0);
      formElement0.setSiblingIndex((-262));
      formElement0.val("'(q");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "O!GAH[R|bh$g`kOG >", attributes0);
      formElement0.val("body");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("</", "center");
      Element element0 = document0.val("</");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("textarea", "tag name must not be empty. html");
      Element element0 = document0.body();
      element0.toggleClass("!f'.G%T)N'&~*9*");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]Y", "]Y");
      document0.setSiblingIndex((-1416));
      document0.toggleClass("]Y");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*R~]>+>[rWXNGJ4BZ", "<8f{M&OYXB");
      document0.setSiblingIndex((-1110026255));
      document0.text("<8f{M&OYXB");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*R~]>+>[rWXNGJ4BZ", "<8f{M&OYXB");
      Element element0 = document0.body();
      element0.text("<8f{M&OYXB");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*R~]>+>[rWXNGJ4BZ", "<8f{M&OYXB");
      document0.text("<8f{M&OYXB");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Mh%zndO\"2#");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.setSiblingIndex((-3));
      document0.tagName("r#IQ.)TP=eJph[sBI*");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("width must be > 0", "width must be > 0");
      document0.tagName("head");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      element0.tagName("f9%&K^[72o%'}");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Element element0 = new Element("head");
      element0.tagName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.selectFirst("hgroup");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      document0.selectFirst("head");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("pblibind");
      Document document0 = parser0.parseInput((Reader) stringReader0, "pblibind");
      document0.appendElement("pblibind");
      document0.selectFirst("pblibind");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      Element element0 = document0.appendElement("3Z");
      element0.select("3Z");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("+K}}F");
      element0.removeClass("?O7qYUqot");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.removeClass("?O7qYUqot");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Er", "Er");
      Element element0 = document0.appendElement("Er");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("<omhl9R=SG.3x;D'%");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.prependText("88wL#p\"=Z");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("bB", "li");
      Element element0 = document0.appendElement("G2hH#(5)");
      element0.prependText("!");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document("yfS,jepgZ#~[G+CKD");
      document0.prependElement("#root");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("bB", "li");
      Element element0 = document0.appendElement("G2hH#(5)");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("pzIWlykcI", "pzIWlykcI");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = new Document(")N_XKS");
      document0.setSiblingIndex((-1));
      document0.prepend("3dR8!8q");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "head", attributes0);
      formElement0.prepend("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.appendElement("#root");
      element0.prepend("h`BD2ArA|aImnK");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("zZIf56%q(\"_ez:");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Element element0 = new Element("br");
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.appendTo(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("!]h=v{egZhrxaZ;", "Ku'gwH423l`");
      Element element0 = document0.createElement("Ku'gwH423l`");
      element0.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("</", "center");
      Element element0 = document0.appendText("</");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("QH^_ReC^c\"?*y=");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("inert", "v;`cyt7||dkz");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("");
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      document0.is((Evaluator) evaluator_MatchesOwn0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document("S0*");
      document0.is("form");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(":KtFqa iK", "id");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("|nP`nhQ|Uqt", "|nP`nhQ|Uqt");
      Element element0 = document0.head();
      Elements elements0 = document0.getElementsByIndexEquals(0);
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      Element element0 = document0.appendElement("3Z");
      element0.html("g`g;Z'A{");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Rawtext", "Rawtext");
      Element element0 = document0.attr("Rawtext", "Insert position out of bounds.");
      element0.siblingIndex = (-119);
      element0.html("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(" > ", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, " > ", attributes0);
      formElement0.html((CharBuffer) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("pzIWlykcI", "pzIWlykcI");
      Element element0 = document0.head();
      element0.html();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("</", "center");
      Document document1 = (Document)document0.val("</");
      document1.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("</", "br");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("zZIf56%q(\"_ez:");
      Pattern pattern0 = Pattern.compile("zZIf56%q(\"_ez:", (-1986));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Sj'BD=m8hm,M@an6", "Sj'BD=m8hm,M@an6");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("V9L_>", "V9L_>");
      document0.getElementsMatchingText("V9L_>");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Mh%zndO\"2#");
      Pattern pattern0 = Pattern.compile("#root");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hgroup", "");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = new Document("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.getElementsByTag("9*z&|2*}xdra~{>");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("attern syntax error:", "attern syntax error:");
      Element element0 = document0.appendElement("Pattern syntax error: ");
      element0.getElementsByTag("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = new Document("zZIf56%q(\"_ez:");
      document0.getElementsByIndexLessThan((-3189));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("S0*");
      document0.getElementsByIndexGreaterThan(926);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("|nP`nhQ|Uqt", "|nP`nhQ|Uqt");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document("S0*");
      document0.addClass("S0*");
      document0.addClass("rot");
      document0.getElementsByClass("rot");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.Element$2", "center");
      document0.getElementsByAttributeValueStarting("<html>\n <head></head> \n <body>\n   org.jsoup.nodes.Element$2  \n </body>\n</html>", "<html>\n <head></head>\n <body>\n  org.jsoup.nodes.Element$2\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("         ", "$9q");
      document0.getElementsByAttributeValueNot("]dI", "         ");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=h", "x`Shf~$LW-d&cl");
      document0.getElementsByAttributeValueNot("}}8G~|", "=h");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("2BZJ:Xq");
      attributes0.put("2BZJ:Xq", "2BZJ:Xq");
      FormElement formElement0 = new FormElement(tag0, "publicId", attributes0);
      formElement0.getElementsByAttributeValueMatching("2BZJ:Xq", "2BZJ:Xq");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("0,*9", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("0,*9");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "0,*9", attributes0);
      pseudoTextElement0.getElementsByAttributeValueEnding("L", "0,*9");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "t2");
      document0.getElementsByAttributeValueContaining("head", "t2");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("Zbr");
      document0.getElementsByAttributeValue("EOF", "5sp}");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.addClass("");
      element0.getElementsByAttributeStarting("class");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000044 9*z&|2*}xdra~{>", "java.lang.string@0000000044 9*z&|2*}xdra~{>");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.title("Gc");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Rawtext", "Rawtext");
      Element element0 = document0.attr("Rawtext", "Insert position out of bounds.");
      element0.siblingIndex = (-119);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("Gc", "publicId");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("Sj'BD=m8hm,M@an6");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("1@md[", "lyD>62/d");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Element element0 = new Element("l(WK[:.8");
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      Element element0 = document0.appendElement("3Z");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("puzIblicId", "value");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("zZIf56%(\"_ez:");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.setSiblingIndex((-3));
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("tDo*}d(", "~cXvp.5G9C0-");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("yfS,jepgZ#~[G+CKD");
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.addClass("");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.addClass("M^9rBk^`{?1Wqy?");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("yfS,jepgZ#~[G+CKD");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("N{o*D(e", "|n`nhQ|Uqt");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("Sj'BD=m8hm,M@an6");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.child(1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000046 #rot", "java.lang.string@0000000046 #rot");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("pzIWlykcI", "pzIWlykcI");
      Element element0 = document0.head();
      element0.before("open");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = Parser.parse(":<$-9*bwC)sZbs5+", "");
      document0.setParentNode(document1);
      document0.before(":not(");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Element element0 = new Element("l(WK[:.8");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.addClass("");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Mh%zndO\"2#");
      document0.appendTo(document0);
      document0.attr("7+k", false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.setSiblingIndex((-3));
      document0.attr("{]4?:{[", true);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("pzIWlykcI", "pzIWlykcI");
      Element element0 = document0.head();
      element0.attr("pzIWlykcI", true);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000053 )ek*c*,$[ctyaaw #root", "org.jsoup.nodes.Element$2");
      Element element0 = document0.appendElement("ZXp7H4:Tt");
      element0.attr("]EYJv+N4ex@Gk", "]EYJv+N4ex@Gk");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("p7blibind");
      document0.setSiblingIndex((-577));
      document0.attr("cSo,8:T8n8l>d/", "org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.attr("", "org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.head();
      element0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.setParentNode(document0);
      Parser parser0 = Parser.xmlParser();
      Document document1 = parser0.parseInput("M^9rBk^m{?1Wqy?", "<B@Q<4bIbUTzR>}");
      document0.appendTo(document1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.setSiblingIndex(21);
      document0.appendText("");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.head();
      element0.appendText("");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("'O_(EtZV", "HLA+cn@Rj");
      document0.appendElement("hr");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("value");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.append("Y7}cxOj'_a[)W0d1u");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.appendElement("#root");
      element0.append("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("pblibind");
      FormElement formElement0 = new FormElement(tag0, "pblibind", attributes0);
      formElement0.append("");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("publicind", "textarea");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      TextNode textNode0 = TextNode.createFromEncoded("marquee");
      element0.after((Node) textNode0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      Element element0 = document0.appendElement("3Z");
      element0.after("3Z");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*R~]>+>[rWXNGJ4BZ", "*R~]>+>[rWXNGJ4BZ");
      Element element0 = document0.body();
      element0.after("BogusComment");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Rawtext", "Rawtext");
      Element element0 = document0.attr("Rawtext", "Insert position out of bounds.");
      element0.siblingIndex = (-119);
      element0.addClass("4QsVw'}a#VVRTJ2@#");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      Element element0 = document0.head();
      element0.addClass("V;`cYt7||DKZ");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      element0.addClass("|G");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("br", "eSTK\"2");
      Document document1 = (Document)document0.prependChild(document0);
      // Undeclared exception!
      document1.wrap("/r");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = new Document("zZIf56%q(\"_ez:");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DataNode dataNode0 = new DataNode("SQXAjfNm;S?<s");
      Document document0 = new Document("SQXAjfNm;S?<s");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.wrap("+/[xXdWjJGa!l\"}Z8)");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("pblicind");
      Attributes attributes1 = attributes0.put("'q", false);
      attributes1.keys = null;
      FormElement formElement0 = new FormElement(tag0, "v;`cyt7||dkz", attributes1);
      // Undeclared exception!
      try { 
        formElement0.val("'q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("`a(u+");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      String[] stringArray0 = new String[5];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.val((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = new Document("body");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(",[j", "3Z%+|.-?8aH9n;tI");
      // Undeclared exception!
      try { 
        document0.text(",[j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("pblicind");
      FormElement formElement0 = new FormElement(tag0, "pblicind", attributes0);
      // Undeclared exception!
      try { 
        formElement0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Er", "?xp77@#PV2{|rIp");
      Comment comment0 = new Comment("<%s>");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("w99dsd");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("java.lang.string@0000000104 9*z&|2*}xdra~{> #root", "java.lang.string@0000000104 9*z&|2*}xdra~{> #root");
      // Undeclared exception!
      try { 
        document0.tagName("java.lang.string@0000000104 9*z&|2*}xdra~{> #root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("R0uRlB<Ak");
      Document document0 = parser0.parseInput((Reader) stringReader0, "R0uRlB<Ak");
      // Undeclared exception!
      try { 
        document0.selectFirst("R0uRlB<Ak");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'R0uRlB<Ak': unexpected token at '<Ak'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Mh%zndO\"2#");
      // Undeclared exception!
      try { 
        document0.select("Mh%zndO\"2#");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Mh%zndO\"2#': unexpected token at '%zndO\"2#'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R`E?_VnD&sYub5/[t", "ComentStart");
      DocumentType documentType0 = new DocumentType("S^XkR$s", "SKIP_ENTIRELY", "*YrN");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("|nP`nhQ|Uqt", "|nP`nhQ|Uqt");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prependElement("|68p.8An");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document("zZIf56%q(\"_ez:");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("n'PZy-8^Yuy3~9)`?L", "html");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("@bE", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(":has(");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "EWHpP:d s<CLY,(35", attributes0);
      document0.setParentNode(formElement0);
      // Undeclared exception!
      try { 
        document0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("java.lang.string@0000000070 9*z&|2*}xdra~{>", "java.lang.string@0000000070 9*z&|2*}xdra~{>");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("8vB.$j/G;#^Q/", "embed");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Er", "Er");
      DocumentType documentType0 = new DocumentType("Er", "Er", "+%ADGr@", "+%ADGr@");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.prepend("eWW<");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = new Document("R8");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(":wq(", "R8", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000053 )ek*c*,$[ctyaaw #root", "org.jsoup.nodes.Element$2");
      StringBuilder stringBuilder0 = new StringBuilder("             ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(170);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 170, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("H(");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 18, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hgroup", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 94, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charArrayWriter0, (-858), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = Parser.parseBodyFragmentRelaxed("hgroup", "Tag name must not be empty.");
      MockFile mockFile0 = new MockFile(" ", "Tag name must not be empty.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintStream0, 98688, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell(">\"a[6c0y#ow/Y$iV]");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">\"a[6c0y#ow/Y$iV]");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 15, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bY", "bY");
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 96, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuffer0, 36, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = new Document("zZIf56%q(\"_ez:");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-3189), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("meta", "meta");
      DataNode dataNode0 = new DataNode("", "");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=h", "x`Shf~$LW-d&cl");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pblibind", "pblibind");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("pblibind", "id", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L", "L");
      document0.setParentNode(document0);
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("Sj'BD=m8hm,M@an6");
      // Undeclared exception!
      try { 
        document0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("o", "o");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.is("#root");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?S*_h'5Rk0 |Jc#Z*", "?S*_h'5Rk0 |Jc#Z*");
      document0.childNodes = null;
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-129), nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("`FPJ ");
      nodeArray0[3] = (Node) cDataNode0;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("     ", "     ");
      TextNode textNode0 = new TextNode(", state=", "^S>DkG{\"<.O");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.html("     ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 4);
      // Undeclared exception!
      try { 
        document0.html(bufferedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C6I>FT|2?Ub^x", "C6I>FT|2?Ub^x");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = new Document("b)");
      Element element0 = document0.appendElement("b)");
      element0.after((Node) document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u<>u4)EH", "u<>u4)EH");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("Er", "Er");
      CDataNode cDataNode0 = new CDataNode("Er");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.sele?tEvalu@torIsOnlyOfType", "org.jsoup.sele?tEvalu@torIsOnlyOfType");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("value");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4ObkR3#UiF@}", "a<e0[}");
      String string0 = "78)hg]/vBEHQS/";
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 78)hg]/vBEHQS/
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.element$nodelist", "org.jsoup.nodes.element$nodelist");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("org.jsoup.nodes.element$nodelist");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BetweeDoctypPublicAndSystemIdenifirs", "BetweeDoctypPublicAndSystemIdenifirs");
      document0.setParentNode(document0);
      document0.setSiblingIndex((-2296));
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("BetweeDoctypPublicAndSystemIdenifirs");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      Element element0 = document0.appendElement("3Z");
      element0.siblingIndex = (-1);
      // Undeclared exception!
      document0.getElementsMatchingOwnText("3Z");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("HdZV=eUF[gmZ[Y", "HdZV=eUF[gmZ[Y");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("*5@um7!H<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: *5@um7!H<
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#O)$e4PZ/ST.$}", "#O)$e4PZ/ST.$}");
      CDataNode cDataNode0 = new CDataNode("RCDATAEndTagOpe.n");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("RCDATAEndTagOpe.n");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("hA&>ft~", "hA&>ft~");
      TextNode textNode0 = new TextNode("ScriptDataDoubleEscapeEnd", "hA&>ft~");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("ScriptDataDoubleEscapeEnd");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.sele?tEvalu@torIsOnlyOfType", "org.jsoup.sele?tEvalu@torIsOnlyOfType");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.sele?tEvalu@torIsOnlyOfType");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.sele?tEvalu@torIsOnlyOfType", "org.jsoup.sele?tEvalu@torIsOnlyOfType");
      Element element0 = document0.appendElement("org.jsoup.sele?tEvalu@torIsOnlyOfType");
      element0.siblingIndex = (-5334);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("org.jsoup.sele?tEvalu@torIsOnlyOfType");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = new Document("yfS,jepgZ#~[G+CKD");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-626));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*R~]>+>[rWXNGJ4BZ", "<8f{M&OYXB");
      Element element0 = document0.body();
      element0.setSiblingIndex((-1110026255));
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("*R~]>+>[rWXNGJ4BZ", "mwT!?mw#!UT\"m-");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("n*L4w@0z", "n*L4w@0z");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("n*L4w@0z", "n*L4w@0z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "PLAINTEXT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("|nP`nhQ|Uqt", "|nP`nhQ|Uqt");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("?9|B67M*TbCy 9", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("1@md[", "lyD>62/d");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "t2");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("br");
      Document document0 = new Document("br");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      TextNode textNode0 = TextNode.createFromEncoded("_S?ve;4s(", "23|?L>5U0Y");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.head();
      element0.toggleClass("");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000088': unexpected token at '@0000000088'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      TextNode textNode0 = new TextNode("BbJlR*Qt");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("@u57U@");
      Element element0 = document0.appendElement("pbxibind");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("2BZJ:Xq");
      FormElement formElement0 = new FormElement(tag0, "publicId", attributes0);
      // Undeclared exception!
      try { 
        formElement0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.child((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.appendElement("J^EtRACv<Rhft");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("id");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = new Document("X@");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("id", "id");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.attr("id", "id");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("truespeed");
      FormElement formElement0 = new FormElement(tag0, "c2emvE?c-*7", attributes0);
      // Undeclared exception!
      try { 
        formElement0.attr((String) null, "#document");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Element element0 = new Element("br");
      Document document0 = new Document("lBcf 1:{VX]");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9*z&|2*}xdra~{", "ead");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Element element0 = new Element("F,r7T");
      Element element1 = element0.attr("o]aM{h0", true);
      List<Node> list0 = Parser.parseXmlFragment("o]aM{h0", "KQTlfc0BB8!f)cE7");
      element1.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.appendText("F,r7T");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("%_'_;ZbXk0e", parseSettings0);
      Element element0 = new Element(tag0, "%_'_;ZbXk0e");
      // Undeclared exception!
      try { 
        element0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("pzIWlykcI", "pzIWlykcI");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.appendElement("pzIWlykcI");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Element element0 = new Element("i");
      List<Node> list0 = Parser.parseXmlFragment("textarea", "1!a[x]3u^aG0.~?P");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.appendElement("i");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Y", "Y");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.appendElement("Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$NodeLis", "org.jsoup.nodes.Element$NodeLis");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = new Document("yfS,jepgZ#~[G+CKD");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("'O_(EtZV", "HLA+cn@Rj");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Element element0 = new Element("8S]02DfM7");
      Element element1 = new Element("*a");
      element1.setSiblingIndex((-3587));
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        element0.appendChild(element1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.append("Dd)'i*yn@Rf");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("area");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("class");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "c2'dP9.OH)'HE", attributes0);
      pseudoTextElement0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.append("class");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = new Document("R8");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(":wq(", "R8", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("*", "class");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("id", "id");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("id");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*R~]>+>[rWXNGJ4BZ", "<8f{M&OYXB");
      Element element0 = document0.body();
      element0.setSiblingIndex((-1110026255));
      // Undeclared exception!
      try { 
        element0.after("BogusComment");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1110026254, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.Element$2", "center");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "z[v*Nqr31f[VCWFW,>(", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.hasClass("N&fLHVn==lU[");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = new Document("b)");
      Element element0 = document0.appendElement("b)");
      Element element1 = element0.after((Node) document0);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("br", "eSTK\"2");
      Element element0 = document0.prependChild(document0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("pzIWlykcI", "pzIWlykcI");
      Element element0 = document0.head();
      element0.html("2_v^K:(btz9{jB.u( ");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("attern syntax error:", "attern syntax error:");
      document0.absUrl("pzIWlykcI");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hgroup", "");
      document0.getElementsByAttribute("hgroup");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("</", "center");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L", "L");
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      document0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("publicind", "textarea");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      element0.appendElement("br");
      StringWriter stringWriter0 = new StringWriter(2090);
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("pblibind", "area");
      document0.appendElement("area");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Element element0 = new Element("i");
      MockFileWriter mockFileWriter0 = new MockFileWriter(">", true);
      element0.outerHtml((Appendable) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("Rques has already been read");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Rques has already been read");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "},xr0nwN;_X", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("pblicind");
      Element element0 = document0.addClass("pblicind");
      element0.addClass("~w_fVQ*}80$C2LvQ_#");
      element0.toggleClass("~w_fVQ*}80$C2LvQ_#");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.addClass("");
      element0.addClass("M^9rBk^`{?1Wqy?");
      document0.addClass("#root");
      element0.hasClass(")eK*C*,$[ctyAaw");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.addClass("");
      element0.addClass("M^9rBk^`{?1Wqy?");
      element0.addClass("W71Uj=f");
      document0.hasClass("M^9rBk^`{?1Wqy?");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.addClass("");
      element0.addClass(" > ");
      element0.hasClass(",3Ztd4%+!s%l");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("pblicind");
      Element element0 = document0.addClass("pblicind");
      element0.addClass("~w_fVQ*}80$C2LvQ_#");
      document0.hasClass("~w_fVQ*}80$C2LvQ_#");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.addClass("");
      document0.addClass("#rot");
      document0.hasClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.addClass("");
      document0.hasClass("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("pblicind");
      document0.addClass("pblicind");
      document0.hasClass("~w_fVQ*}80$C2LvQ_#");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("0,*9", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("0,*9");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "0,*9", attributes0);
      pseudoTextElement0.appendChild(cDataNode0);
      pseudoTextElement0.data();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("V9L_>", "V9L_>");
      document0.setParentNode(document0);
      Comment comment0 = new Comment("V9L_>");
      document0.after((Node) comment0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("Zbr");
      DataNode dataNode0 = DataNode.createFromEncoded("6-w@f3gB{jyCTLv.", (String) null);
      document0.appendChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("attern syntax error:", "attern syntax error:");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("java.lang.string@0000000049", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "PR", attributes0);
      DataNode dataNode0 = new DataNode("Er", "class");
      pseudoTextElement0.prependChild(dataNode0);
      pseudoTextElement0.hasText();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("</", "center");
      Element element0 = document0.prepend("<html>\n <head></head>\n <body>\n  &lt;/\n </body>\n</html>");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("ApVI:F:CYoKX", "ApVI:F:CYoKX");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Comment comment0 = new Comment(" > ", ".)GW\",O =I>Qt0i");
      Element.preserveWhitespace(comment0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      Element element1 = new Element(tag0, "8:*,GU ", attributes0);
      element0.before((Node) element1);
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("/\"");
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BetweenDoctypePublicAndSystemIdentifiers", "BetweenDoctypePublicAndSystemIdentifiers");
      Node[] nodeArray0 = new Node[2];
      DataNode dataNode0 = new DataNode("BetweenDoctypePublicAndSystemIdentifiers");
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(0, nodeArray0);
      document0.setParentNode(document0);
      document0.getElementsMatchingOwnText("BetweenDoctypePublicAndSystemIdentifiers");
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.appendText("");
      document0.prependText("o KuDUs ItGhV");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      element0.appendElement("br");
      document0.getElementsMatchingText("1 oI|4");
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.appendElement("#root");
      document0.getElementsContainingText("!< .vZ$~");
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BetweenDoctypePublicAndSystemIdentifiers", "BetweenDoctypePublicAndSystemIdentifiers");
      Node[] nodeArray0 = new Node[2];
      DataNode dataNode0 = new DataNode("BetweenDoctypePublicAndSystemIdentifiers");
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(0, nodeArray0);
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("pzIWlykcI", "pzIWlykcI");
      document0.getElementById("_<OV7P|q^y%");
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      Element element0 = document0.appendElement("3Z");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.doClone(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("puzIblicId", "puzIblicId");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = new Document("");
      document0.setParentNode(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Er", "Er");
      DocumentType documentType0 = new DocumentType("Er", "Er", "+%ADGr@", "+%ADGr@");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(0, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = new Document("zZIf56%q(\"_ez:");
      document0.nextElementSibling();
      assertEquals("zZIf56%q(\"_ez:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000044 9*z&|2*}xdra~{>", "java.lang.string@0000000044 9*z&|2*}xdra~{>");
      document0.prependChild(document0);
      Elements elements0 = document0.siblingElements();
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("pblibind");
      FormElement formElement0 = new FormElement(tag0, "pblibind", attributes0);
      formElement0.siblingElements();
      assertEquals("pblibind", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = new Document("");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.after("Array must not contain any null objects");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("inert", "v;`cyt7||dkz");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("v;`cyt7||dkz", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.toggleClass("");
      document0.cssSelector();
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("|n`nhQ|Uqt", "|n`nhQ|Uqt");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren(60, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("width must be > 0", "width must be > 0");
      Node[] nodeArray0 = new Node[7];
      // Undeclared exception!
      try { 
        document0.insertChildren((-129), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("pblibind", "area");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(40, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-2666), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("ScriptDataEndTagOpen");
      FormElement formElement0 = new FormElement(tag0, "ScriptDataEndTagOpen", attributes0);
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Element element0 = formElement0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("ScriptDataEndTagOpen", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "-kw8[");
      DataNode dataNode0 = DataNode.createFromEncoded("Q/7(iiKa[", (String) null);
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("-kw8[", document0.baseUri());
      assertTrue(list0.contains(dataNode0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("HdZV=eUF[gmZ[Y", "");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*R~]>+>[rWXNGJ4BZ", "*R~]>+>[rWXNGJ4BZ");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals("*R~]>+>[rWXNGJ4BZ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Element element0 = document0.appendText("");
      document0.appendTo(element0);
      Element element1 = document0.previousElementSibling();
      assertEquals("", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=h", "x`Shf~$LW-d&cl");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1376));
      assertEquals(1, document0.childNodeSize());
      assertEquals("x`Shf~$LW-d&cl", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      Element element0 = document0.selectFirst("*");
      assertEquals("*", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("|n`nhQ|Uqt", "|n`nhQ|Uqt");
      document0.getAllElements();
      assertEquals("|n`nhQ|Uqt", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("pblicind");
      FormElement formElement0 = new FormElement(tag0, "v;`cyt7||dkz", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.before(":not(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "a<e0[}");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "f");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.html("Jf");
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Document.createShell("value");
      Element element0 = document0.shallowClone();
      assertEquals("value", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      document0.doSetBaseUri("2Bzmk0/");
      assertEquals("2Bzmk0/", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      TextNode textNode0 = TextNode.createFromEncoded("marquee");
      // Undeclared exception!
      try { 
        document0.after((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.title("#root");
      Elements elements0 = document0.getElementsContainingText("!< .vZ$~");
      assertEquals("#root", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Element element0 = new Element("'");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parse("*", "*");
      Elements elements0 = document0.getElementsByClass("*");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) elements0);
      assertEquals("*", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding((String) null, "java.lang.string@0000000070 #rot");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Element element0 = new Element("head");
      boolean boolean0 = element0.is("head");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag cannot be self closing; not a void tag", "U[_,yO7U6/41G~|");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("&", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parse("ApVI:F:CYoKX", "ApVI:F:CYoKX");
      Element element0 = document0.val("ApVI:F:CYoKX");
      Elements elements0 = element0.getElementsByAttribute("value");
      assertEquals(1, element0.childNodeSize());
      assertEquals("ApVI:F:CYoKX", element0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bB", "bB");
      // Undeclared exception!
      try { 
        document0.wrap("86gg6g");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsByIndexEquals(51);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "a<e0[}");
      document0.getElementsByAttributeStarting("a<e0[}");
      assertEquals(1, document0.childNodeSize());
      assertEquals("a<e0[}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      document0.prependElement("body");
      document0.appendTo(document0);
      document0.previousElementSibling();
      assertEquals(2, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("id", "id");
      Elements elements0 = document0.getElementsByIndexLessThan(3535);
      assertEquals("id", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Element element0 = new Element("head");
      // Undeclared exception!
      try { 
        element0.after("(>Z%8=UU.NXjq%d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      document0.select("3Z");
      assertEquals("3Z", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("</", "center");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, "center");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parse("R8", "R8");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "-kw8[");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("-kw8[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3Z", "3Z");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.sele?tEvalu@torIsOnlyOfType", "org.jsoup.sele?tEvalu@torIsOnlyOfType");
      document0.getElementsContainingOwnText((String) null);
      assertEquals("org.jsoup.sele?tEvalu@torIsOnlyOfType", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bB", "bB");
      document0.dataset();
      assertEquals("bB", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("|nP`nhQ|Uqt", "|nP`nhQ|Uqt");
      // Undeclared exception!
      try { 
        document0.child(8249);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8249, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Document document0 = Document.createShell("@u57U@");
      document0.previousElementSiblings();
      assertEquals("@u57U@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendText("");
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = Document.createShell("!dLOYd %<^\"yuy");
      Elements elements0 = document0.children();
      assertEquals(1, elements0.size());
      assertEquals("!dLOYd %<^\"yuy", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.nextElementSiblings();
  }
}
