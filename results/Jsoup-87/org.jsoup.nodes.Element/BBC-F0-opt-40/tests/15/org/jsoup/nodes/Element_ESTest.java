/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 15:59:48 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1555), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      Document document0 = Document.createShell("head");
      document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("wwX,sl[og!zlwBe3s3:");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuilder0, 1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      Element element0 = document0.head();
      element0.wrap("{)H+7g\"$E`Y(@;;sJJ");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse(")sl", ")sl");
      Element element0 = document0.body();
      element0.wrap(")sl");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element("jo=q:]QP");
      element0.siblingIndex = (-455);
      element0.val("Kl\"n|ecnD");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.siblingIndex = (-3587);
      document0.toggleClass("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("'_y~yhx");
      Element element0 = document0.prependElement("'_y~yhx");
      Element element1 = element0.before("'_y~yhx");
      element1.text("'_y~yhx");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u.M{3", "Kl\"n|eac~nD");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.text("");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = new Document("joq:f]jx");
      document0.setSiblingIndex((-1633798820));
      document0.tagName("joq:f]jx");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "8<_-f=mU<_V{gGl,7");
      Element element0 = document0.body();
      element0.tagName("E=q:]P");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("!'4e6[y.S~!i?");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.tagName("basefont");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("PirU8yWW`MP[Y+,=");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LuSh&p|w/tOq", "GIYiajW");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      document0.selectFirst("SelfClosingStartTag");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "id", attributes0);
      pseudoTextElement0.selectFirst("id");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parse("org.jop.nodsEleLent$1", "org.jop.nodsEleLent$1");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "D>2}*b*[tnu6");
      document0.select("t");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u.M{3", "Kl\"n|eac~nD");
      Element element0 = document0.body();
      element0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("A", "A");
      Element element0 = document0.head();
      element0.removeClass("A");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "D>2}*b*[tnu6");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.prependText("Cd}E/]~tO[Wo");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse("fYw=d", "");
      document0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      Element element0 = document0.body();
      element0.prepend("selected");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-", "-");
      Element element0 = document0.head();
      element0.prepend("-");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("joq:f]qx");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", ":nth-child(%d)");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "D>2}*b*[tnu6");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u.M{3", "Kl\"n|eac~nD");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("*zcxzmu|lai:");
      document0.parentNode = (Node) document0;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(":nth-child(%d)");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, ":nth-child(%d)", attributes0);
      Element element1 = element0.val(":nth-child(%d)");
      element1.ownText();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("&#xa0;");
      Document document0 = parser0.parseInput((Reader) stringReader0, "|VsR8m3!)fsfm");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u.M{3", "Kl\"n|eac~nD");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("&#xa0;");
      Document document0 = parser0.parseInput((Reader) stringReader0, "|VsR8m3!)fsfm");
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-8));
      document0.is((Evaluator) evaluator_IndexGreaterThan0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("S", "S");
      Element element0 = document0.body();
      Element element1 = element0.val((String) null);
      element1.is(":last-child");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("QDP<B<xu-xG[ye^tS[%[", "QDP<B<xu-xG[ye^tS[%[");
      Node[] nodeArray0 = new Node[4];
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("Must be true", parseSettings0);
      Element element0 = new Element(tag0, "Must be true");
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      DataNode dataNode0 = DataNode.createFromEncoded("Must be true", "]4ACSnI c%x%*2K");
      nodeArray0[2] = (Node) dataNode0;
      nodeArray0[3] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("bd Wi");
      Elements elements0 = document0.getElementsContainingOwnText("");
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = new Document("joq:f]qx");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AX", "AX");
      MockFileWriter mockFileWriter0 = new MockFileWriter("Z.");
      document0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":nth-child9%d)");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "/US8z(;Z5l", attributes0);
      element0.html();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "D>2}*b*[tnu6");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("wwX,sl[og!zlwBe3s3:");
      Pattern pattern0 = Pattern.compile(" > ", (-738));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      document0.getElementsMatchingText("<html>\n <head></head>\n <body>\n  *ZCXZMU\"Clai}\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("wwX,sl[og!zlwBe3s3:");
      Pattern pattern0 = Pattern.compile(" > ", (-738));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("O", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("35}9_ny27j");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "head", attributes0);
      element0.getElementsMatchingOwnText("O");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("wxsl[og!zlwbe3s3e");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("body");
      Element element0 = new Element(tag0, "textarea", attributes0);
      element0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4/w?CX", " gd9n?u)");
      document0.getElementsContainingText(":contains(%s)");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("O", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("35}9_ny27j");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "head", attributes0);
      element0.getElementsByTag("hetad");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Kl\"n|eac~nD");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$NodeList", attributes0);
      element0.getElementsByTag("Kl\"n|eac~nD");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("orgjop8,sVleent$1", "orgjop8,sVleent$1");
      document0.getElementsByIndexLessThan((-1140));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*ZCXZMU|lai:", "l}JNz_iE4&");
      document0.getElementsByIndexGreaterThan((-3378));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("e~6");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      document0.getElementsByAttributeValueNot("-}NyRJa(,2", "-}NyRJa(,2");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("b`sj]onJ");
      document0.toggleClass("b`sj]on");
      Element element0 = document0.toggleClass("java.lang.string@0000000047 children collection td be inverted must not id null.");
      Pattern pattern0 = Pattern.compile("java.lang.string@0000000047 children collection td be inverted must not id null.", (-847));
      element0.getElementsByAttributeValueMatching("class", pattern0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Element element0 = new Element("&");
      element0.getElementsByAttributeValue("&", "yiGg(,2");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element element0 = new Element("value");
      element0.val("Pattern syntax error: ");
      element0.getElementsByAttributeStarting("value");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      Element element0 = document0.prependElement("*ZCXZMU|lai:");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jE=q:]QP", "jE=q:]QP");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell(";dDIMw\"/}");
      document0.setSiblingIndex((-2964));
      DataNode dataNode0 = new DataNode(";dDIMw\"/}", "S$7^");
      document0.doClone(dataNode0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("*ZCZMUolai}");
      Element element0 = document0.body();
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jE=q:]QP", "jE=q:]QP");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      Element element0 = document0.previousElementSibling();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      Element element0 = document0.body();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      Element element0 = document0.head();
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.addClass("*ZCXZMU|lai:");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jE=q:]QP", "jE=q:]QP");
      Element element0 = document0.toggleClass("jE=q:]QP");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("wXsl[og!zlwBe3s3e");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$NodeList");
      Element element0 = new Element(tag0, "jE=q:]QXP", attributes0);
      element0.children();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("o8", parseSettings0);
      Element element0 = new Element(tag0, "o8");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AX", "AX");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("AX", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "AX", attributes0);
      Document document0 = Parser.parseBodyFragment("AX", "AX");
      document0.appendChild(pseudoTextElement0);
      pseudoTextElement0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = new Document("*ZCXZMU|lgi:");
      document0.parentNode = (Node) document0;
      TextNode textNode0 = new TextNode("*ZCXZMU|lgi:");
      document0.before((Node) textNode0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.before("jE=G|$]QP");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h(3k3tP9TpPa", "h(3k3tP9TpPa");
      Document document1 = (Document)document0.doClone(document0);
      document1.before("ScriptDataEscapedLessthanSign");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("e~6");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf(" > ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("a{ZQCnD$");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "a{ZQCnD$", attributes0);
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.setSiblingIndex((-1618));
      document0.attr("org.jsoup.nodes.Element$1", true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("Xw$*'LV$b&t5.pk:K", "'CZgOxw`=es6");
      Element element0 = document0.prependElement("'CZgOxw`=es6");
      Element element1 = element0.lastElementSibling();
      element1.attr("IL[jUijEDI0%C//-p", false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("Xw$*'LV$b&t5.pk:K", "'CZgOxw`=es6");
      Element element0 = document0.prependElement("'CZgOxw`=es6");
      element0.attr("IL[jUijEDI0%C//-p", false);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.setSiblingIndex((-1618));
      document0.attr("track", "0");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.attr("/*@d]K{X[Hbr,w0ro", "!1N");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("D>2}*b*[tnu6");
      document0.attr("[}'Xq18#1IQC=y%", "[}'Xq18#1IQC=y%");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("Kl\"Q|aac~nD", "Kl\"Q|aac~nD");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.parentNode = (Node) document0;
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$2", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "*ZCXZMU|lai:", attributes0);
      document0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("orgjop8,sVleent$1", "orgjop8,sVleent$1");
      document0.setSiblingIndex((-1812));
      document0.appendText("orgjop8,sVleent$1");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "D>2}*b*[tnu6");
      Element element0 = document0.body();
      element0.appendText("q");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("!'4e6[y.S~!i?");
      document0.appendElement("!'4e6[y.S~!i?");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Element element0 = new Element("jo=q:]QP");
      element0.appendElement("body");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document("g8T ");
      Element element0 = document0.tagName("hgroup");
      document0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parse("Tl?\"?1M$.']&", "b%xo^XP@dn>?");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("jo=q:]qp", "jo=q:]qp");
      Element element0 = document0.body();
      element0.append("jo=q:]qp");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("SS#EJe");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.parentNode = (Node) document0;
      DocumentType documentType0 = new DocumentType("VX", "*ZCXZMU|lai:", "B.EJ&o]", "VX");
      document0.after((Node) documentType0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "D>2}*b*[tnu6");
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode(".");
      element0.after((Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZACRL5`05it+ZHx", "ZACRL5`05it+ZHx");
      Element element0 = document0.body();
      element0.after((Node) document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "id", attributes0);
      Document document0 = Parser.parseBodyFragment("id", "id");
      document0.appendChild(pseudoTextElement0);
      pseudoTextElement0.after("                ");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("<a3bU", "<a3bU");
      Element element0 = document0.head();
      element0.after("<a3bU");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*ZCXZMU|lai:", "l}JNz_iE4&");
      Element element0 = document0.body();
      element0.addClass("wxsl[og!zlwbe3s3e");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parse("Kl\"n|eac~nD", "Kl\"n|eac~nD");
      Element element0 = document0.prependChild(document0);
      element0.siblingIndex = (-1145);
      element0.addClass("Kl\"n|eac~nD");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      Element element0 = document0.head();
      element0.addClass("html");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.wrap("fm4%vck");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("bd Wi");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("*ZCXZMU|lgi:");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.val("*ZCXZMU|lgi:");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(":nth-child(%d)");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Element element0 = new Element(tag0, ":nth-child(%d)", attributes0);
      List<Node> list0 = Parser.parseXmlFragment("tag name must not be empty.", "style");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.val(":nth-child(%d)");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Tag tag0 = Tag.valueOf("jE=q:]QP");
      Attributes attributes0 = new Attributes();
      attributes0.vals = null;
      Element element0 = new Element(tag0, "]4+8#bGdJP`KaY", attributes0);
      // Undeclared exception!
      try { 
        element0.val("#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", "bdi");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document("A6l!");
      // Undeclared exception!
      try { 
        document0.text("limitedQuirks");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Tag tag0 = Tag.valueOf("f");
      Element element0 = new Element(tag0, "IiJR>R]/,5");
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jop.nosleLent$1", "org.jop.nosleLent$1");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.tagName("hetad");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("-");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d", "d");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".3@-A0Q1alWDH-XouK");
      Element element0 = new Element(tag0, "s+");
      // Undeclared exception!
      try { 
        element0.select(".3@-A0Q1alWDH-XouK");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '.3@-A0Q1alWDH-XouK': unexpected token at '@-A0Q1alWDH-XouK'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2]9xRY[", "2]9xRY[");
      // Undeclared exception!
      try { 
        document0.select("+tolsD\"(APZR]um7}%S");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%S'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("WOBJ}}/*", ":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      DataNode dataNode0 = new DataNode("bYa6ff*YI^(0NL@&", "HOm{;~5\"l0\".@d");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(element0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell(":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("*ZCXZMU|lai:");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prependElement("wVB*k");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u.M{3", "Kl\"n|eac~nD");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      document0.parser(parser1);
      // Undeclared exception!
      try { 
        document0.prependElement("u.M{3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("[Xe,");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prepend("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      Element element0 = document0.tagName("Children collection to be inserted must not be null.");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("Children collection to be inserted must not be null.", document0, "Children collection to be inserted must not be null.");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prepend("org.jsoup.select.Evaluator$IsOnlyOfType");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "head", attributes0);
      // Undeclared exception!
      try { 
        formElement0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document("children");
      TextNode textNode0 = new TextNode("-q?r7D'/4{`9Jzg", "org.jsoup.nodes.Element$1");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      MockFileWriter mockFileWriter0 = new MockFileWriter("[W{L@7H%,Te%lMK");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2017);
      // Undeclared exception!
      document0.outerHtmlTail(mockFileWriter0, 48, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      StringWriter stringWriter0 = new StringWriter(662);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringWriter0, 63, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("wwX,sl[og!zlwBe3s3:", "wwX,sl[og!zlwBe3s3:");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder0, (-93), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ogjsoup.nods.Element$1", "ogjsoup.nods.Element$1");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 701, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("_.!0A3");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("org.jsoup.nodes.Element$1");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1895);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(32);
      // Undeclared exception!
      document0.outerHtmlHead(outputStreamWriter0, 1895, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Element element0 = new Element("jo=q:]QP");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "jo=q:]QP");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(stringBuilder0, (-492), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bsLjon", "bsLjon");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        document0.outerHtmlHead(pipedWriter0, (-1238), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("children", "children");
      TextNode textNode0 = TextNode.createFromEncoded("java.lang.string@0000000047 br");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Element element0 = new Element("tfoot");
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("orgjop8,sVleLent$1", "orgjop8,sVleLent$1");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("orgjop8,sVleLent$1", "}QviZziji");
      // Undeclared exception!
      document0.is((Evaluator) evaluator_AttributeWithValue0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3$qRaK*/Z", "t[n3&'25;,1O\"LX");
      // Undeclared exception!
      try { 
        document0.is("4#e/O)@M");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '4#e/O)@M': unexpected token at '#e/O)@M'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.is("publicId");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = new Document("wwX,sl[og!zlwBe3s3:");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("eiws'1~QU:e", "eiws'1~QU:e");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html("f4Xgb[xZ");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "ohk+Ixw#;j7`3|");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":o0nly-of-type", ":o0nly-of-type");
      CDataNode cDataNode0 = new CDataNode(":o0nly-of-type");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.html("$QoVB*G&?5}}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wtFJ8K^&-2", "wtFJ8K^&-2");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.html((MockFileWriter) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("h4'}vG.s!|6$");
      // Undeclared exception!
      try { 
        document0.html((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("joq:f]qx", "joq:f]qx");
      DataNode dataNode0 = new DataNode("joq:f]qx");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J3HGPq;", "8<_-f=mU<_V{gGl,7");
      Element element0 = document0.body();
      element0.siblingIndex = (-1841207968);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("bdi", "bdi");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("9X}`r`(`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 9X}`r`(`
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf(".", parseSettings0);
      Element element0 = new Element(tag0, "aQpv!P-K )vCcZJ", (Attributes) null);
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText("aQpv!P-K )vCcZJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: aQpv!P-K )vCcZJ
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "id", attributes0);
      List<Node> list0 = Parser.parseXmlFragment("*n(&?x#l", "&;!d+A-%k>");
      pseudoTextElement0.childNodes = list0;
      Document document0 = Parser.parseBodyFragment("id", "id");
      document0.appendChild(pseudoTextElement0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("upB", "upB");
      TextNode textNode0 = new TextNode("upB");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("cw'<efqvj'c;p");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a']7Vs.=8j(WOi", "t");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.setSiblingIndex((-1618));
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.getElementsByClass("org.jsoup.nodes.Element$1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("head");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("textarea", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", "b");
      Element element0 = document0.head();
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("b", ".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "*ZCXZMU|lai:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("noframes", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "D>2}*b*[tnu6");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("html", "Zt2mSyMIV)0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: Zt2mSyMIV)0
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding((String) null, "<html>\n <head></head>\n <body>\n  *ZCXZMU|lai:\n </body>\n</html>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u.M{3", "Kl\"n|eac~nD");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "u.M{3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = new Document("wwX,sl[og!zlwBe3s3:");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = new Document("O0$:myVeiccHpP1}Cvx");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Element element0 = document0.body();
      element0.setSiblingIndex((-2));
      // Undeclared exception!
      try { 
        document0.getElementById("class");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("A", "A");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse(":prev%s", ":prev%s");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.body();
      element0.toggleClass("_dGm1 !p$]>|;_Q|n");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000090': unexpected token at '@0000000090'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("joq:f]qx", "joq:f]qx");
      Element element0 = document0.body();
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("joq:f]qx", document0, "h *'cm'uft.m`9{qv");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("br", "id");
      DocumentType documentType0 = new DocumentType("id", "pK", "l8c!L$Cx$3>-kU", "-)CG`m", "pK");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = new Document("wwX,sl[og!zlwBe3s3:");
      // Undeclared exception!
      try { 
        document0.child(1979);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1979, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5\"OVt", "5\"OVt");
      // Undeclared exception!
      try { 
        document0.child((-1303));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("hmy`%\"*sS@ULK");
      CDataNode cDataNode0 = new CDataNode("textarea");
      Document document1 = (Document)document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        document1.before((Node) cDataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jop.nodsEleLent$1", "org.jop.nodsEleLent$1");
      Document document1 = (Document)document0.empty();
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document1.before(document0.parentNode);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.before("<html>\n <head></head>\n <body>\n  *ZCXZMU\"Clai}\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Document.createShell("'_y~yhx");
      CDataNode cDataNode0 = new CDataNode("'_y~yhx");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.before("'_y~yhx");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("Kl\"n|eac~nD", "Kl\"n|eac~nD");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr(".", "<*zcxzmu|lai:></*zcxzmu|lai:>\n<html>\n <head></head>\n <body>\n  *ZCXZMU|lai:\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator", "org.jsoup.select.Evaluator");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("jE=q>y3:]QXP");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.appendElement("*ZCXZMU\"Clai}");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Tag tag0 = Tag.valueOf("jEq:]QP");
      Element element0 = new Element(tag0, "s+", (Attributes) null);
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.appendElement("s+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("joq:f]qx", "joq:f]qx");
      Element element0 = document0.body();
      element0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("[t[R=vJFbKDRXsb", "#root");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.append("org.jsoup.parser.TreeBuilder");
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R", "R");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u.M{3", "Kl\"n|eac~nD");
      Element element0 = document0.body();
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.after("!@@5M");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      CDataNode cDataNode0 = new CDataNode("r2JHG#$`SA&H+");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("<!--", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("O", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(":nth-child(%d)");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "<>9$SO9\"z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = new Document("Yw{");
      document0.html((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$1");
      element0.toggleClass("org.jsoup.nodes.Element$1");
      document0.hasClass("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse("AX", "AX");
      document0.toggleClass("Lh3z)e'");
      Element element0 = document0.toggleClass("Children collection td be inverted must not be null.");
      element0.hasClass("me@@thod");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell(":hildren");
      Element element0 = document0.toggleClass(" > ");
      element0.toggleClass(" > ");
      element0.hasClass("L#/I|Q[ABOtp%Vb");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("S", "S");
      document0.hasClass("section");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DoctypePublicIdentifier_singleQuoted", "org.jsoup.nodes.Element$1");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$1");
      element0.hasClass("DoctypePublicIdentifier_singleQuoted");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("wXsl[og!zlwBe3s3e");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("jE=q:]QXP");
      Element element0 = new Element(tag0, "jE=q:]QXP", attributes0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")sl", ")sl");
      document0.append(")sl");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ogjsoup.nods.Element$1", "ogjsoup.nods.Element$1");
      Comment comment0 = new Comment("sA*", ",)K2Uke2c=3O");
      document0.appendChild(comment0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("nCation");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("*ZCXZMU|lai:");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.parentNode = (Node) document0;
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.prependChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.parentNode = (Node) document0;
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("'CZgOxw`=es6", "'CZgOxw`=es6");
      List<Node> list0 = Parser.parseXmlFragment("'CZgOxw`=es6", "#Xz~q'm.)?s0X/L~O");
      document0.childNodes = list0;
      document0.textNodes();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("WOyK;CN,'dajLhh8", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.html("noresize");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = new Document("joq:f]jx");
      document0.absUrl(":Unj{,QY~V#CK~'(");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jE=q:]QP", "jE=q:]QP");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("InBody", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "InBody", attributes0);
      formElement0.ownText();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u.M{3", "Kl\"n|eac~nD");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Element element0 = new Element("-H");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("b`sj]onJ");
      Pattern pattern0 = Pattern.compile("java.lang.string@0000000047 children collection td be inverted must not id null.", (-847));
      document0.getElementsByAttributeValueMatching("class", pattern0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "D>2}*b*[tnu6");
      document0.id();
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      Document document1 = document0.clone();
      document0.parentNode = (Node) document1;
      document0.wrap("fm4%vck");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.outerHtml();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("be", "be");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "be");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 13, document_OutputSettings1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("orgjop8,sVleLent$1");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7v", "7v");
      Document document1 = (Document)document0.tagName("menuitem");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("menuitem");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      document1.outerHtmlHead(mockPrintWriter0, 4, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = new Document("children");
      Document document1 = (Document)document0.tagName("menuitem");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.outerHtmlHead(mockPrintWriter0, 4, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("QDP<B<xu-xG[ye^tS[%[", "QDP<B<xu-xG[ye^tS[%[");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 5, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$1");
      element0.toggleClass("org.jsoup.nodes.Element$1");
      document0.toggleClass("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.toggleClass("org.jsoup.nodes.Element$1");
      document0.toggleClass("org.jsoup.nodes.Element$1");
      document0.getElementsByClass("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000118 childrencollection td id inverted must not be null", "java.lang.string@0000000118 childrencollection td id inverted must not be null");
      document0.toggleClass("java.lang.string@0000000118 childrencollection td id inverted must not be null");
      document0.toggleClass("java.lang.string@0000000118 childrencollection td id inverted must not be null");
      document0.getElementsByClass("id");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("be", "children collection td be inverted must not be null.");
      document0.toggleClass("+t=|@Wp4P,@[ah");
      document0.toggleClass("                  ");
      document0.getElementsByClass("org.jsoup.select.Evaluator$IsNthOfType");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.toggleClass("java.lang.string@0000000076");
      document0.hasClass("java.lang.string@0000000076");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u.M{3", "Kl\"n|eac~nD");
      document0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("QDP<B<xu-xG[ye^tS[%[", "QDP<B<xu-xG[ye^tS[%[");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000047 ?hildren collection td ax inverted must not be null.");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.prependText("        ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("wXsl[og!zlwBe3s3e");
      document0.prependText("wXsl[og!zlwBe3s3e");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("<!", "<!");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document("*zcxzmu|lai:");
      document0.parentNode = (Node) document0;
      Element.preserveWhitespace(document0.parentNode);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.tagName("textarea");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = new Document("wwX,sl[og!zlwBe3s3:");
      document0.append("A#LBjz.x7J`=ymX]o");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("h(3k3tP9TpPa");
      CDataNode cDataNode0 = new CDataNode("h(3k3tP9TpPa");
      document0.prependChild(cDataNode0);
      document0.append("h(3k3tP9TpPa");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")sl", ")sl");
      document0.append(")sl");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("QDP<B<xu-xGSye^2[%[", "QDP<B<xu-xGSye^2[%[");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("nCation");
      DataNode dataNode0 = new DataNode("+w\"+ys)).c", (String) null);
      document0.appendChild(dataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(" />", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "_.!0A3", attributes0);
      Document document0 = Parser.parseBodyFragmentRelaxed("sq$5zsve'\"[3ybsbe", " />");
      document0.appendChild(pseudoTextElement0);
      pseudoTextElement0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.parentNode = (Node) document0;
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      document0.parentNode = (Node) document0;
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.parentNode = (Node) document0;
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("PG9fBl4F7.g<?66R9sK", "*ZCXZMU\"Clai}");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("org.jop.no!sEleLent1");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("org.jop.no!sEleLent1", element0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("WOyK;CN,'dajLhh8", ":nth-child(%d)");
      document0.nextElementSibling();
      assertEquals(":nth-child(%d)", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = new Document("*ZCXZMU|lgi:");
      document0.parentNode = (Node) document0;
      document0.nextElementSibling();
      assertEquals("*ZCXZMU|lgi:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      document0.siblingElements();
      assertEquals("*ZCXZMU\"Clai}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Tag tag0 = Tag.valueOf("jE=q:]QP");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "]4+8#bGdJP`KaY", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "p5=C:*\"46", attributes0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) pseudoTextElement0;
      nodeArray0[1] = (Node) element0;
      CDataNode cDataNode0 = new CDataNode("jE=q:]QP");
      nodeArray0[2] = (Node) cDataNode0;
      pseudoTextElement0.addChildren(nodeArray0);
      Elements elements0 = pseudoTextElement0.siblingElements();
      assertEquals("p5=C:*\"46", pseudoTextElement0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("be", "be");
      Element element0 = document0.body();
      element0.after("AfterDoctypePublicIdentifier");
      String string0 = element0.cssSelector();
      assertEquals("be", element0.baseUri());
      assertEquals("html > body:nth-child(2)", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jE=q:]QP", "jE=q:]QP");
      Element element0 = document0.toggleClass("jE=q:]QP");
      element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("jE=q:]QP", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wwX,sl[og!zlwBe3s3:", "wwX,sl[og!zlwBe3s3:");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(1, nodeArray0);
      assertEquals("wwX,sl[og!zlwBe3s3:", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = new Document("wwX,sl[og!zlwBe3s3:");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(4148, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = new Document("wwX,sl[og!zlwBe3s3:");
      List<TextNode> list0 = document0.textNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(2923, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      List<Node> list0 = Parser.parseXmlFragment("]]>", "BeforeHtml");
      Document document0 = Parser.parseBodyFragmentRelaxed("\"Z>w~)zh3(GJ'vJ\"&", "org.jsoup.parser.Token$StartTag");
      // Undeclared exception!
      try { 
        document0.insertChildren((-139), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("im<h3uCvvP|?QX!U", "im<h3uCvvP|?QX!U");
      DataNode dataNode0 = new DataNode("@", "im<h3uCvvP|?QX!U");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
      assertEquals("im<h3uCvvP|?QX!U", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Document.createShell("wXsl[og!zlwBe3s3e");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("wXsl[og!zlwBe3s3e", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Element element0 = new Element("&");
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      element0.text("&");
      boolean boolean0 = element0.is((Evaluator) evaluator_MatchText0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("org.jop.nodsEleLent$1", "org.jop.nodsEleLent$1");
      document0.prependText("rg.jsupnodes.Element$1");
      Elements elements0 = document0.getElementsByIndexEquals((-495));
      assertEquals("org.jop.nodsEleLent$1", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".3@-A0Q1alWDH-XouK");
      Element element0 = new Element(tag0, "s+");
      Elements elements0 = element0.getElementsByIndexGreaterThan(0);
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertEquals(0, element1.childNodeSize());
      assertEquals("s+", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "8<_-f=mU<_V{gGl,7");
      // Undeclared exception!
      try { 
        document0.selectFirst("+!Qq)uDtosvBFeX']");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '!Qq)uDtosvBFeX']': unexpected token at '!Qq)uDtosvBFeX']'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      document0.getElementsMatchingText("");
      assertEquals("*ZCXZMU\"Clai}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("S", "S");
      document0.is(":last-child");
      assertEquals("S", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("!'4e6[y.S~!i?");
      document0.getAllElements();
      assertEquals("!'4e6[y.S~!i?", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.before("jE=G|$]QP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]4+8#bGdJP`KaY", "]4+8#bGdJP`KaY");
      document0.getElementsByAttribute("jE=q:]QP");
      assertEquals("]4+8#bGdJP`KaY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = new Document("orgjop8,sVleLent$1");
      Elements elements0 = document0.getElementsByAttributeValueNot("~zA1O9a?3E[</I", " ");
      assertEquals("orgjop8,sVleLent$1", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("&lt;");
      Element element0 = document0.appendTo(document0);
      element0.parent();
      assertEquals(2, document0.childNodeSize());
      assertEquals("&lt;", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jE=q:]QP", "jE=q:]QP");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("jE=q:]QP", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.doSetBaseUri("*ZCXZMU|lai:");
      assertEquals("*ZCXZMU|lai:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ZACRL5`05it+ZHx", "ZACRL5`05it+ZHx");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h(3k3tP9TpPa", "h(3k3tP9TpPa");
      document0.getElementsByAttributeValueContaining("URVuUbmI$.%X2b", "h(3k3tP9TpPa");
      assertEquals(1, document0.childNodeSize());
      assertEquals("h(3k3tP9TpPa", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "");
      Elements elements0 = document0.getElementsContainingText("");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "D>2}*b*[tnu6");
      document0.getElementsByAttributeValueEnding("EBvh5tfs+&h@", "EBvh5tfs+&h@");
      assertEquals(1, document0.childNodeSize());
      assertEquals("D>2}*b*[tnu6", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      document0.getElementsByAttributeValueMatching("w3HPiK4onp+cW5w_mh", " > ");
      assertEquals(" > ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.getElementsByAttributeStarting("org.jsoup.select.Evaluator$ContainsOwnText");
      assertEquals("*ZCXZMU|lai:", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("JZO", "JZO");
      Elements elements0 = document0.getElementsByIndexLessThan(97692013);
      assertEquals("JZO", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse("<a3bU", "<a3bU");
      // Undeclared exception!
      try { 
        document0.after("<a3bU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("hetad", "hetad");
      Pattern pattern0 = Pattern.compile("hetad", 34);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals(1, elements0.size());
      assertEquals("hetad", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jop.nodsEleLent$1", "org.jop.nodsEleLent$1");
      Elements elements0 = document0.select(":root");
      assertEquals("org.jop.nodsEleLent$1", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      document0.getElementsByAttributeValueStarting("Children collection to be inserted must not be null.", "<html>\n <head></head>\n <body>\n  *ZCXZMU\"Clai}\n </body>\n</html>");
      assertEquals("*ZCXZMU\"Clai}", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = new Document("joq:f]qx");
      document0.wholeText();
      assertEquals("joq:f]qx", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = new Document("*ZCXZMU|lgi:");
      TextNode textNode0 = new TextNode("*ZCXZMU|lgi:");
      // Undeclared exception!
      try { 
        document0.before((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("<!", "<!");
      Elements elements0 = document0.getElementsContainingOwnText("org.jsoup.parser.Token$EOF");
      assertEquals(0, elements0.size());
      assertEquals("<!", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Document.createShell("h(3k3tP9TpPa");
      document0.dataset();
      assertEquals("h(3k3tP9TpPa", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("QDP<B<xu-xG[ye^tS[%[", "QDP<B<xu-xG[ye^tS[%[");
      document0.title("Children collection to be inserted must not be null.");
      String string0 = document0.html();
      assertEquals("QDP<B<xu-xG[ye^tS[%[", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>Children collection to be inserted must not be null.</title>\n </head>\n <body>\n  QDP\n  <b></b>\n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("JZO", "JZO");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertEquals("JZO", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU|lai:", "*ZCXZMU|lai:");
      document0.previousElementSiblings();
      assertEquals("*ZCXZMU|lai:", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1>))%l*?", "1>))%l*?");
      Pattern pattern0 = Pattern.compile("#root", 1669);
      document0.getElementsMatchingText(pattern0);
      assertEquals("1>))%l*?", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("*ZCXZMU\"Clai}", "*ZCXZMU\"Clai}");
      document0.addClass("?>$3mhrD9XuVv");
      document0.hasClass("*ZCXZMU\"Clai}");
      assertEquals(1, document0.childNodeSize());
      assertEquals("*ZCXZMU\"Clai}", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("orgjop8,sVleent$1", "orgjop8,sVleent$1");
      document0.appendText("orgjop8,sVleent$1");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse(")sl", ")sl");
      // Undeclared exception!
      try { 
        document0.wrap(")sl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("children", "children");
      document0.nextElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("children", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = new Document("orgjop8,sVleLent$1");
      Element element0 = document0.getElementById("orgjop8,sVleLent$1");
      assertEquals("orgjop8,sVleLent$1", document0.baseUri());
      assertNull(element0);
  }
}
